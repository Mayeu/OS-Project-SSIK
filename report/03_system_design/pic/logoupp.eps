%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Uppsala_University_logo.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: lainux
%%CreationDate: 10/09/09
%%BoundingBox: 0 0 886 842
%%HiResBoundingBox: 0 0 885.8267 841.9297
%%CropBox: 0 0 885.8267 841.9297
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 124 8%%BeginData: 15012 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD38FFCA9BBD94B08D8D8CB08DB694BC9BCAFD6EFFCA9A938C9394%C3A1CA9BC39AC39BC394938C8D8CBCA1FD68FF9B938CBCA1FFFFFFCACA9B%C39BC3A1FD04CAFFC3BD8D8D93C3CAFD62FFA1948CBCA1FFA8C3948D8C8D%8C8D8C94938D8C8D8C8D8C9A9AC4A1BC8D8D9AFD5FFFCA93939BFFC4C38D%B08DBC9BCACACBA1FD05FFC3C4A1C39AB58CB59ACAA1B68DC3FD5BFFCA94%8CC3CAC38D9394C3A1FD04FFCA8D8D8DBC9A8D93938CCAFFFFFFCA94938C%94A8C38D94A1FD58FF9B8D94FFA1B68DBC94B6FD06FF9B938DBC9ABCA193%94C3FD06FFCAC38D8D9AFF9A8D93FD55FFCA8D8DA1CA938D9BC48DC494FF%FFFFA88D8C9AA8C38CFFFF949AFFA89A93CAFD04FFA8BD9B8D8CCAA18D8D%CAFD52FFC38DBDCAC38DC3FFFFC48D8CB093FFFFC38D8D8CB08D8DFFFF94%8D93B68D93A1FFFFFF9BB09493CABD8DBDFFBC8DCBFD4FFFCA938DCAA18D%93BCA2FFFFFF9A8D938DA2FFFFFF93C39A948CFFA8BC94C394B6FD04FFA1%C38CC393FFFFC48C93A8BC8DCAFD4DFFCAB694FF9A8D9A948CC3FD04FF9A%C38DCAC3BD8D8D94948CBD9494A18D8DBD93C3CAFFA193CA8D9AFD04FFCB%8D93CABD8DCAFD4BFFCA9394FF938DA1FFA18D8CCAFFFFFF8D939A8C8D8C%C38D8D8C8D8C938C8D8C8D93938D8D94C38CC38C9AFFCA93CAFFCA8D8DA8%BC8DCAFD4AFFBC94FF9393C3FFFFFFCAB593FFFFFF948D8DC39A9393B693%BD8DB693B58DB08D8D8DB0C3BD8CBC94C3CAFF948DA1FFFFFF93B5CABD8D%FD49FFC393FF9493948DA1FFFFFFA18D8DC38C93A1FFFFFFA28D8C938D94%94C39BC39AB68D8D94FFFFCB94939ACBFFFFA1FD05FF9393CA9A93FD47FF%CA8DCB9B93CA8D9BBD8DBCFFFF8DBC8DBDCAFFFFC4938D9ACACAFFCA8D8C%8D93CAFFFF9BBC8CBCCAFFCAC38DC3FD04FFC4BC8DCA8D93CA949AFD46FF%8DC3A88DA2FF8C8D8C8D8CCAA8938CC3FFFFA1938D9B948DA1FFFFFFA18D%94C3CAFFFF938DCA948D94CAFFCA8D9A9B948D938C93FFCA8C94A88DA1FD%44FF94BCFFBC9AFFFFFFCACACAB0C3938DFFFFC48DB59BFFFFB59493CAFF%FFFF8CC3FD04FF8DBCFFFFCABC8CC3FFFF93B694B68DB0C3FFFFCA8DC3A1%B6FD43FFA193CAC38CBD9BFFFFFF8D8D949393FFA8948CBDCAFFFFFF8CBC%8C8DA8FFA18D94FFFFFF9A8DA1FD04FFC38C94CAFF93BCCA9A8CFD04FFBC%8DFF93C3FD42FF94A1FF93BD8C93CAFFFFC4A1948DFFC38D8DCAFD05FF8D%C4CA9ACAA1C39ABCA1CBCA948CCAFFFFCAB68DC48C93CAFF93BC8DBDFFFF%FFCACAB694CA8DFD41FFCA8DFF9A93CACA938D9AFFFF948DCAA18D9A948C%C3CACAFFCA939A938D8CFD058D8C8D949AFFFF9A8D938DFFCA8C8DA8FF8D%BCA1FF9B8D8C8D9A8DA29A94FD40FF94C3FFB5C3FFA1C3938D8DC38DCACA%B09A8D93B69AC39AFF948D8CBD8DBC94BC9B938CBD8D938CB69AB694B094%FFFFFF8D93CAFF8DCAC3B094CAA1B09AB5CAB5CAFD3EFFA893CAC38DC48C%8D93C3A1C38CC3CA8D94FF9B8D8C8D8C9A8C8D8D9393BC8D948DBD8C8D9A%939BCA8C8D8DBD8CBDFFFFFFCA8D94FFC3939A8CFFFFFF8CC48CC394BCFD%3EFFBD9BFF93C394B68D939AC393B6FFBC93FFFFFF9A8D94BD8D8D8DBC8D%B69BBC8D949BC38D939ABC9ACAC4BC8DBC9BFFFFFFA1BD8DC4CA939A93CA%FFC3C3CABC94CA8DFD3EFF8DCAA18DCAFFFFFF938D938DCAC38CCAFD04FF%8D9A8C94939493CA9A8D8C94CACAFFFF93948D9393949AC3939AFFFF9A8D%8C948DFF9A949B9AFD04FFA18DA893A1FD3CFFC4B6FFBD94FD05FF8DB59A%FF8DC38DFD04FFBD8CB08D938CB694C394B08DC38DBD9A938DC39ABC94BC%94B58CBD8D938CBC948DA1FF8DCAFD06FF8DC3A1BCFD3CFFBCA1FF8CC3CA%FD04FFC38CFFA18DA1BCA18DA1BD8C8D8C8D8DBD9AFFFF9494CACABDA1C3%938D9ACA9A9493B694948CBC93C3A8FF9393FFC39A94A1FD04FFBC93CA8C%FD3CFF8DFFC49393B6CAFF8DCA93BDFFBC94C38DC38DBD8CBCCAC3A1C394%BD93CA9494FD05FFC393948DBC9AC3C4CACAC38CB694CAFFC48DC4CA8DA1%8D8CBC9AC39B8DFF93C4FD3AFFCA93FFBC948DA894A89A9A8DA8FF8CC3A8%8D8C8D8D8D8C8D8D9A949A9393A1C38C9AA8FFFFCA8CCAA2938D94949393%C3A19494FD04FF8D93FF93C3A893A18D8DCA8CCA9AC3FD3AFFCA94FF93C3%8CB68DC494BC8DFFCAB0FFFFCACAC38D93CACAC393B694B693C3CABC8CB0%94B58CB093B68DB08D9394C39BBC8DB0CAFFFFFF9A8DCAC493CB9AB58DCB%FFB69BCA94FD3AFFA1C3A88DA194938D8C8D94B6FFC393FD04FF948C938D%8D939A8DB6A19494B69B9A94BC8D8D93B693949AB693BD948D9AC38CBDFF%FFFFCA8CC3A18D938D93FFFFFF94BDCA8DFD3AFFBD9BCA8DFD04FFCA8DB6%9BFF9BBCFD04FF8C8D8D9494939ACA9B93C3BD93BC949393BC9AB69AB69B%939BCA93B6A1C49A8D93FD04FF9394FF8CBC94FD04FFC393FF8DFD3AFF93%CA9A94FD05FFC38DC3FF9493CAA8CA9A8D8C8D8C93A1CA8D8DA1C38DC38D%C3948D9ABD93C39393A19A93FFA19394FFA28DA8FFFFCA8D8DFF939AFD05%FF9A94FF94A2FD39FFBCCAC39AFD06FF8DCAFF8D8D8CB08D8D8CB08D8D8C%B08D8D93B68D938CB68DB58CB08D8D8CB08D8D8CB58DB693B08D8D8CB08D%8D8CB08DCB94C3CAFFFFFFC4C38CFF94CAFD39FF93CA93C3A1FFFFFFA8C3%8C8D938D93CA9B949ABD93C39A9393C39B9A93BC9AC3A1C49A9AA1CA949A%9AB6FFFFA194A1CACAFF9BC3A8FFFFFF948DA1BD948D8C8D8C8DA18DFFB6%A1FD39FFB6C4C39A8D8C93938D9A8D94948CC3FFFF93C393BCFFC38DBDA1%FFCA8D9A93FFFFCAB694FFFFC393BDA1FFFFC38CC3FFFFA18D9ACAFFFFFF%C38C8D8DBD8CBC9BC38DC38DFF93C3FD39FF93CA9ABD8C9393948D948CC3%948D93FFFFC38C8DCAFF9A8D9AFFFFCA8C9393FFCAFF93BCFFFFFF949AFF%FFFF8D948CFFFFCA938DA8FFFFFFA18DA1949A8DA1CA9A8DA18DFF949BFD%39FFBCCABC94CAFD04FFCAB08D8D8CB5FFFFFFB69BFFFFBC8DC38DFFCA8D%8DB093C3CAB693FFFFFF93C3FFFF9A9394B09AFF9ABD93CAFFFFFFCA8CB0%8DC3A1B08D8D9AC38DFF8DCAFD39FF93CA9AB6FD06FF93C3CA938C8D8C93%93BD9BC394BC9ABDA1C39ACA9ABCA1C394BCA2CAA1BC9ACAA1BC9ACA94BC%A29A94BC9BC39AB68D8DA193A2FFA1C3A1FF9A93FF8DA8FD39FFBCCAC38D%FFFFFFCAC3A1B69AFF948D8C938D8D8C8D8D8D8C8D8D8D8C8D8D8D8C8D8D%8D8C8D8D8D8C8D8D8D8C8D8D8D8C8D8D8D8C9394B6938D93FF8CFD06FFC3%93FF8DFD3AFF93CAA18DFD04FF9A8D9A93FFC38CCAFFFFA18D8C9AA2CA9B%8D8C949A938DC49A9493939AC3FD058D948D8D94CAA1CA8D8DA8FFFFFF8C%BDA893949AA2FFFFFF949AA194FD3AFFC39BFF8CFD05FF93BD8CFFCA8DCA%FFFFFF94B09AFFFFCA8DCBFFFF8DC4FFCA9A938CB094BC8CFF93BCFFFF9A%93CAFFFF939AFFFFFFA1B0CAC394B08D8D8CBC8DB69BCA9AFD3AFFA1BCFF%8DA1BCA2C3938D9A8D9BFF8DC3FFFFFFC48C93CAC38CC4FFFF9AB6FF9A8C%93A2FFCAC38C8DCACA8CCBFFFF9A8DCACA8CCAFFFFFF9A8DFF93BD8CCA8D%938DBC8CC39AC3FD3BFF93FF94B6FD058DB69494FFBC9AFD04FFB68C938D%BCFFFFFF93C4CA8D93CAFD04FFC38DCAFFBC9AFFFFFF9A938DBDFD04FF8D%C3CA8DC38DCAC3CAB69A8DCA94C4FD3BFF93A8C38CC393CAFFFFA8C38CCA%A193FFFFFFCA948D8C8DA8FFFFC393FF938DA1FD05FFA88DA1FFA18DCAFF%FFCA8C8DA1FFFFFFA18DCA9A8DFFCAFFFF9A8C9A8DFF8CFD3CFF9ACAFF8D%CAFD05FFCA939AFF8DCAFFCA8DBC9BB08DFFFFFF8DFFFFB08DCAFD05FFCA%8DC3FFFF93BDFFFFC38D94B0C3FFFFB69AFF8DC4FD06FF93BDC3BCFD3CFF%C394FF949AFD04FFA1939A8DCABD93948C8D9BC3948D8DCA94BCFFFF8C8D%A1FD05FFA18D9BFFFFCA8CCBA88D948D9ABD93C38CFF9B9394BDFD04FFCA%8DA194A1FD3DFF8DCAC48DFD04FF938CC38DC3CA8D93CA8C8D8DC39A8D8D%8DC4FFC48D8CBDFD04FFCA938DBCFFFFFFBD94FD04938D9A8D8DBDCA8DA1%8D8CB6CAFFFFC393FF8CFD3EFF94C3A88DA1FFA8948CC3A8BC8DCA9A8DA1%8D9AFFFFFF948D8C9AA894948D8CC3A2CAA1948DC393FFFFFF948D93FFFF%FF938D8D93CA9A8DFFA8C38D8D9AFF8DBD9B94FD3EFFC494FF94B6FFBD8D%BD8DC39B9394FF94B6C3FFFFFFCAC39A8D8CB08DCBFFBC8D8D8CB093CAFF%B0CAC38DB094CAFFFFFFCA94B5CACA8CC393CA8DB594BDC3B0CAB6A1FD3F%FF93A1CA8CC393B693948C8D9B8DA1FF8DBDA8CA9A938CCACA9A8C8D8C9A%A1CA948D93FFCAC38C8D8C94A1CA8C8D94CAA18DA1FF8DBD9A8D8C9394FF%FF9393CA8DFD40FF9BB6FFBC93FD05FFCACA9493CACB8DBD8C8D948DCAFF%CABD9AB68D8D8C8D8D8D8C8D8D939ACAFFFFC4B6938D9393CAFF94B6FFFF%CACA938DCAC38DCA93C3FD41FF8DCAA88D9AFD07FF8D93A8C38D9AA89493%FFFF9A938D8DC39B9B9394939A9ABC8D9393FFFFFF8CC3938DA8FF948DA1%C3FD04FFA2CA8C94A18DA8FD41FFCA94FF9A93CAFFFFFFCAB594BD8CBCFF%CB8DBC9AB5FFFFFFBD8DC3C3FF9BB0C3B68DFFC4939AB0FFCBFFB69393CA%FF9A93CAB58DC3FD04FF94B5FFB69BFD43FF94A1FF8D94FFFFFFC48CBD8C%948CBCCACB93939AFFFFFF8CBDFFFFFFCB8CFF94CAFFFF9A8D8C948DC38C%B6CAFF9493CAFFA1948C9ACAFFA18DA1C38DFD44FFCA93CACA8DC3FFC3CA%8DA1B68DC38CB6CAFF9B9393C39AB69AFD04FF8DA1B6CAFFFFCA8DFF9AB6%8DC3FFFF9493CABCA1FFCABC8D93A18D9AFF8DCAFD45FF9B94FFBC8CC38C%FF8CC3A1FFFFC38C8D9AFFA8C3938D8DBC9BCAA8FF938D8CFFFFCAA1948D%8D9AFFCAC38C94A8C48CCAFFFFFF94948D8DFF93C3FD47FF94BDFFB68DBD%8D8DFFFFFFC38DB6948D8DCAFFFFFFCA9BBC8DB08DB594B68D8D8CB694C3%FFFFC3B58CC394BC93B0CAFFFFFFCAB68DFF9BB6FD49FF93BCCA9393CACA%FFFFFF8C94938D9A938C939AC4FFFF9B8D93C4948D9394939AFFFFCAC38D%8D9ACB9A8D8C9394C3FFFFA8948DCAA193CAFD4AFF8DC3FF948DCBFFFFCA%8DA1938CC3FFCA9A938D9393938D939BBC9ABD8D8DA1C3948D93BD9BBCFF%FFC4BC8D9394FFCA938CCAC38DC4FD4BFFCA8CC3CA9A8CC3FF948D948C9B%FFFFA89493C39A9A8D8D8C94FFFFA18D8C8D939BA8BC8C8D8CFD04FFCA8D%8DA18D8DCA9B8DA1FD4EFF8DC3FFC38DBC9BB69393FFFFFFB5A1CA8DCAFF%FFFFCA8DCAFFBC93CAFD04FF94FF94B0C3FD05FF94B094FF94B5C4FD50FF%9393A8CA8D8D949394FFFFC493FFA88DA1FD04FF949AFF939AFD06FFCA8D%8C94FFFFFFCA8D8D9ACA8D93A8FD52FF9493A1FF9B8D94CAFFCA8DCAFFC4%8CC4FD04FF8DCAFFC393FD07FFCA938C93C3938CBCCAC38CC3FD55FF9B8D%93FFCA9A8C949B949BFF8D8DA8FFFFFF9A8D94949A9393CAFD04FF9B8D8D%9B938D93CAA1938DCAFD57FFCABC8DC3FFFF9A938DBDC3BC8CFFFFFF9AB0%8D8D8DB08D8D8CB6FFFFFFCA9AB68DC3CACA94B09AFD5BFFCA938D9AFFCA%C3938D8D94A1BD938D8CBCA1FFA1BC939394BC938D8C939BFFA1B68C9AA8%FD5EFFCAB68DBDC4FFCAC49A938C8D93B693BC94938C8D8D8D93BCA1CACA%C494939AFD63FFCA94938D9A9ACACACAA1CAA1C39AC3A2CAA1FFFFFFA8C3%938D93C3CAFD68FFCAC3948D93BD9BC3A1CAC4C39BC394BC8CB69AC4FD70%FFCAA1C39BC39AC39BC39BCAA2FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC%FFFDE7FFA1A87DA8FD05FFA87DA8A1FFFFA8A1A87D7D7DA8A8FFFFFFA8A8%A1A87D7D7DA8A8FD05FF7D7D527D7DFD09FF52FD08FFA8A1A8A8FD0CFFA8%52FD2FFF27F827A8FD05FF5227F852FFFF7D27F84B5252272752FFFFFF27%27F8525252F84BFD04FF522727522727FD08FFA8277DFD07FF522727FD0D%FF5227FD2FFF7D27F8FD07FF2727A8FFFFFF27277DFFFFFFF827A8FFFF7D%F852FFFFFF52F87DFFFF7D277DFFFFFF27A8FD07FF52F827FD07FFA8F852%FD0CFFA827F87DFD2EFFA8F852FD07FF5227FD04FF52F8A8FFFFFF52F8A8%FFFFA8274BFFFFFFA82727FFFF52F8FD04FFA8FD08FFF827F8A8FD06FFA8%274BFD0CFF52212727FD2EFF7D2727FD07FF2752FD04FF2727A1FFFFFF52%217DFFFFA8F852FD04FFF852FFFF4C217DFD0BFF52277D2127FD06FFA8F8%7DFD0CFFF87D2727A1FD2DFFA8F852FD07FF5227FD04FF52F8A8FFFFFF52%F8FFFFFFA82752FFFFFFA82752FFFFA8F82752CBFD09FF277DFF2727A8FD%05FFA8277DFD0BFF7D27FFA8F877FD2DFF7D2727FD07FF2752FD04FF2727%52A87D52F852FFFFFFA8F827A8A87D2720FD04FF52F827F8277DFD06FF7D%F8FFFF7DF87DFD05FFA8F87DFD0AFFA82752FFA827F8FD2DFFA8F852FD07%FF524BFD04FF52F827F827277DFD04FFA827F827F82752FD06FFA85227F8%2752FD05FF2752FFFF7D2721FD05FFA82776FD0AFF7DF8FFFFFF27277DFD%2CFFA12127FD07FF2752FD04FF27217DFD08FFA8F852FD0CFFA852F8217D%FFFFFF7D27F821F827F8217DFD04FFA8F87DFD0AFF2721F827F821F827FD%2CFFA8F852FD07FF5252FD04FF52F8A8FD08FFA82727FD0EFF77F87DFFFF%FF4B52FD04A87DF852FD04FFA8277DFD09FF7D277DFD04A852F8A8FD2BFF%A82727FD07FF2752FD04FF27277DFD08FFA8F852FD0EFF7D2752FFFF7DF8%A8FD05FF27F8A8FFFFFFA8F87DFD09FF2727FD05FF7D2752FD2CFFF827A8%FD05FFA82752FD04FF27F8A8FD08FF7D274BFD08FF7DFD05FFA8F8A8FFFF%2752FD06FF7D2752FFFFFFA82752FD05FF7DFFFFA8F8A8FD06FF2127A8FD%2BFF52F827A8FFFFFF7D27F8A8FFFFFFA8F8277DFD08FF52F827FD08FF27%52A8FFFFA82727FFFF7D277DFD06FFA8F821A8FFFFA8F8277DFFFFFFA127%FFFF2727FD07FF52F852FD2CFF52F827F827F82727CBFD04FF5227F852FD%08FFF827F8CBFD07FF52F8275252F8277DFF7D27F87DFD06FFA827F852A8%FF2727F827F827F82727FF522727FD07FF5227F87DFD2CFFA87D7D527D7D%FD06FF7D527D52FD07FFA87D527D7DFD07FF7D7D527D52A8A8FFFF7D7DA8%A8FD06FFA87DA87DFFA8A87DA8A8A87DFD08A8FD05FFA87D7DA8A8FDFCFF%FDFCFFFDFCFFFDFCFFFDA5FFA8FD08FFA8FD05FF7DA8FD09FF7DA8A1FFFF%A8A1A87DFFA8A87DA8FD06FFA8A8A1A8FFFFA1A87DA8A1A87DFD04FFA8A1%A87DA8A1A8A8FD06FFA8527D527DA8FFFFFF7DA8A1A8FFFFA1A87DA8A1A8%7DA8A1A87DA8FFFF7DA8A1A87DA8A1A8FFFFA1A87DA8A1A87DA8A1A87DA8%27F8277DFD05FF5227F827FFFF5227A8FD07FFA827F852FFFF2727F852FF%7D272727FD06FFA8F82752FFA827F827275227277DFFFFFF5227F827F827%F827A8FD04FFA8F84B5227F87DFFFFA827F8277DFFA827F827F827F82752%52272752FFFF52F82727525227F8FFFF27F827F827F82727522727F87D27%F8FD07FF2727A8FFFF52F827A8FD07FF7D27A8FFFFFF27277DFFFF7DF827%FD07FF2727FFFFFF522752FFFFFFA87DFD04FFF827A8FFA87DF852FD04FF%2752FFFFFF5252FFFFFF7D2727FFFFA827FFFFFF522727FFFFFF5252FFFF%A82727FFFFFFA852FFFFF8A8FFFFA827F8FFFFFF7D27A8F852FD07FF52F8%FFFFFF2727F827A8FD06FFA8F8FD04FF52F8A8FFFFFF27F8A8FD05FFA8F8%A8FFFFFFA8F87DFD09FF27F8FD04FF27F8FFFFFFA8277DFD04FFA8FFFFFF%A8F852FFFFA8FD04FFA8F852FD04FF7DFFFFFFF852FD07FFA8FD04FFF827%FD04FFA87D2727FD07FF2721FFFFFF522727F827A8FD05FFA121FD04FF27%27A1FFFFFF522127FD05FF2727FD04FF7D2752FD09FFF827FD04FF2721FF%FFFFA8F852FD08FFA12127FD07FF7D2752FD08FF2127FD0CFF27F8FD05FF%A8F852FD07FF7DF8FFFFFF2752FF52F827A8FD04FFA8F8FD04FF52F8A8FD%04FFF827A8FFFFFFA8277DFD04FFA8F87DFD09FF27F8FFFFFFA827F8FD04%FF27F8277DFD06FFA8F852FD07FFA8F87DFD08FFF852FD0CFFF827FD05FF%7D2727FD07FF5227FFFFFF5227FFA827F827A8FFFFFFA827FD04FF2727A8%FD04FF52F852FFFFFF7DF8FD05FF7D27277D527D527DFD04FFF8277DA852%2720A8FD04FF7D27F827F87DA8FFFFFFA82727FD07FF7D2752FD08FF2727%7D527D5252FD07FF27F8FD05FFA8F852FD07FF7DF8FFFFFF4B52FFFFFF52%F827A8FFFFA8F8FD04FF52F8A8FD04FFA827F8FFFFFF2152FD05FFA8F827%4B5227277DFD04FF27F827F82727FD07FFA87D2727F827A8FFFFA8F852FD%07FF7DF87DFD08FFF82727524B2727FD07FFF827FD05FFA12127FD07FF52%27FFFFFF5227FFFFFFA827F827A8FF7D27FD04FF27217DFD05FF522152FF%7D217DFD05FF522152FFFFFF7DA8FD04FFF821FF7DF821A8FD09FF7D27F8%52FFFF7D2727FD07FF522152FD08FF2727FFFFFFA87DFD07FF21F8FD05FF%A8F852FD07FF52F8FFFFFF5252FD05FF52F827A8A8F8FD04FF52F8A8FD06%FFF827FF5227FD06FF7DF87DFD09FF27F8FFFF7DF852FD0AFFA82727FFFF%A8F852FD07FF7DF87DFD08FFF852FD0CFFF827FD05FFA82727FD07FF2727%FFFFFF5227FD05FFA852F8277D27FD04FF27277DFD06FF52F852F87DFD06%FF522752FD09FFF827FFFFFF27F87DFD0AFFF827FFFF7D2727FD07FF5227%52FD07FFA82727FD0CFF27F8FD06FFF827A8FD06FF2752FFFFFF2752FD07%FF7DF827F8FD04FF52F8A8FD06FFA827F827FD07FF7DF87DFD04FFA8FD04%FF27F8FFFFFFA827F8FFFFFF7DA8FD05FF5252FFFFA8F852FD07FF7DF87D%FD07FFA8F852FD0CFFF827FD06FF52F852FD04FFA827F8A8FFFFFF52F8FD%08FF52F821FD04FF2727A1FD07FF272152FD07FF522727FFFFFFA8527DFF%FFFFF827FD04FF522127FFFF7D27FD04FF7DF87DFFFFA12127FD07FF5227%27FD07FFA121F8FD04FF7D52FD05FFA827F8FD07FF52F82752522727F8A8%FFFFFFA827277DFD08FF77F8FD04FF27F877FD07FFA8F8FD07FFA827F827%F8272727F8A8FFFF5227F87DFD04FF522727FF7D27F8522727F852FFFFFF%7DF827A8FD05FFA852F8277DFD06FF52F827F8272727F87DFD05FF7DF827%27FD06FFA87D4B52275252FD05FF7DA87D7DFD09FF7DFFFFFF7D527D52FD%08FF7DFD08FF527D527D527D527DA8FFFFA87DA87DFD05FF7D7D7DFF527D%527D7DA8FD04FF527D7DA8FD05FFA8527D527DFD06FF527D527D527D527D%A8FD05FF7DA8A8A8FDFCFFFD07FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-09-10T22:15:20+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>244</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA9AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FWJ67+Z/lLSbw6ak8mqawNhpemRtdXFR2IT4VPszDK5ZANurtNN2Pnyx46EMf86Z4R&#xA;9rH9V80fmnfWrTW1jp/k7TTt+kdbuEeah/aWJaojf5MlciZTPl73Pw6PRQlUpTzz/m447fPmfgwi&#xA;6u/JrGT/ABV+auo6m4PJrfTDLFAT/KBEs8beFRT6MqJj1k7iENR/kNJCHnOiftopLcRfkPfzAQxe&#xA;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&#xA;UvprFD//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>956.693359</stDim:w>
            <stDim:h>912.755859</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -841.93 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 841.93 li
885.827 841.93 li
885.827 0 li
cp
clp
[1 0 0 1 0 0 ]ct
466.89 787.834 mo
463.679 788.014 459.927 787.581 456.752 786.787 cv
455.886 786.571 455.706 785.922 455.706 784.694 cv
455.814 770.083 455.995 757.601 455.995 755.363 cv
455.995 753.343 459.963 753.668 462.2 753.632 cv
469.018 753.451 476.487 752.838 480.78 755.688 cv
483.486 757.456 484.929 760.342 485.867 762.579 cv
487.274 765.935 486.949 770.841 486.733 774.521 cv
486.444 778.67 483.702 782.386 480.094 784.983 cv
479.012 785.777 472.626 787.509 466.89 787.834 cv
514.837 838.054 mo
510.653 836.142 507.297 834.014 504.844 830.226 cv
500.045 822.685 483.486 798.945 480.708 794.256 cv
480.311 793.642 480.203 792.415 480.997 791.91 cv
485.542 790.647 li
490.954 789.71 495.644 785.128 497.448 780.041 cv
499.577 774.016 499.108 766.584 497.484 760.414 cv
496.402 756.157 493.227 752.044 489.403 749.339 cv
487.996 748.4 486.733 747.896 484.821 747.462 cv
482.728 746.993 480.78 746.597 478.038 746.597 cv
464.148 746.633 451.99 746.741 438.208 746.633 cv
437.558 746.633 436.729 747.246 436.836 748.004 cv
436.945 749.014 438.28 748.869 439.506 749.339 cv
441.888 750.24 443.223 753.198 443.151 756.698 cv
443.042 829.359 li
443.367 834.05 440.012 836.899 437.162 836.899 cv
435.754 836.899 435.43 839.245 437.811 839.101 cv
445.171 838.667 453.613 838.739 460.937 839.569 cv
461.55 839.642 462.596 839.137 462.596 838.198 cv
462.596 837.657 462.272 837.296 461.333 837.008 cv
457.33 835.854 455.706 835.42 455.237 830.226 cv
455.454 801.832 li
455.454 801.255 455.597 796.456 455.597 795.879 cv
455.597 793.858 462.668 794.725 465.483 794.94 cv
467.936 795.121 469.09 797.286 470.353 799.09 cv
479.157 811.717 484.387 820.231 491.422 830.946 cv
493.479 834.085 496.041 836.069 499.251 837.693 cv
503.978 840.11 508.452 840.579 513.864 841.085 cv
514.333 841.121 515.09 840.651 515.27 840.255 cv
515.595 839.642 515.811 838.487 514.837 838.054 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.697627 .675227 .638575 .739559 cmyk
f
522.811 629.921 mo
500.154 629.921 li
499.649 629.74 499.649 629.199 499.902 628.874 cv
504.555 618.592 509.39 608.346 513.864 597.955 cv
514.117 597.631 514.766 596.909 514.982 597.486 cv
516.822 602.068 526.058 625.411 526.852 627.323 cv
527.862 629.849 526.744 629.921 522.811 629.921 cv
561.847 670.472 mo
558.781 669.715 556.4 667.946 555.065 665.276 cv
546.333 647.815 526.491 597.27 526.491 597.27 cv
523.135 589.297 519.167 579.087 517.941 576.236 cv
517.507 574.649 516.317 575.912 515.704 576.525 cv
506.503 597.45 479.553 655.247 475.765 661.994 cv
473.384 666.287 470.318 668.523 469.019 669.534 cv
467.395 670.869 465.195 670.616 465.195 671.915 cv
465.195 672.456 465.808 673.178 466.385 673.178 cv
469.524 673.178 480.167 672.06 487.815 672.926 cv
488.681 672.997 489.15 672.132 489.15 671.41 cv
489.15 670.472 487.382 670.184 486.445 669.245 cv
484.46 667.297 484.171 665.349 484.821 663.4 cv
487.78 654.851 491.604 647.238 495.067 639.265 cv
495.428 638.398 496.221 637.569 497.16 637.569 cv
530.17 637.642 li
530.892 637.642 531 638.038 531.217 638.507 cv
538.793 657.304 li
539.732 660.875 541.427 664.52 540.454 668.523 cv
539.732 671.193 536.087 670.111 536.087 672.204 cv
536.087 672.781 536.737 673.105 537.567 673.105 cv
546.333 672.854 553.982 672.023 562.424 672.926 cv
563.146 672.997 563.543 672.42 563.543 671.843 cv
563.543 671.121 562.822 670.725 561.847 670.472 cv
cp
f
699.375 629.921 mo
676.718 629.921 li
676.213 629.74 676.213 629.199 676.501 628.874 cv
681.083 618.592 685.99 608.346 690.428 597.955 cv
690.644 597.631 691.33 596.909 691.583 597.486 cv
693.386 602.068 702.659 625.411 703.416 627.323 cv
704.426 629.849 703.307 629.921 699.375 629.921 cv
738.375 670.472 mo
735.345 669.715 732.927 667.946 731.592 665.276 cv
722.898 647.815 703.055 597.27 703.055 597.27 cv
699.7 589.297 695.731 579.087 694.504 576.236 cv
694.036 574.649 692.881 575.912 692.268 576.525 cv
683.032 597.45 656.154 655.247 652.33 661.994 cv
649.949 666.287 646.881 668.523 645.619 669.534 cv
643.959 670.869 641.758 670.616 641.758 671.915 cv
641.758 672.456 642.372 673.178 642.95 673.178 cv
646.088 673.178 656.767 672.06 664.379 672.926 cv
665.209 672.997 665.714 672.132 665.714 671.41 cv
665.714 670.472 663.947 670.184 663.008 669.245 cv
660.988 667.297 660.736 665.349 661.385 663.4 cv
664.343 654.851 668.131 647.238 671.631 639.265 cv
671.992 638.398 672.786 637.569 673.724 637.569 cv
706.771 637.642 li
707.457 637.642 707.565 638.038 707.782 638.507 cv
715.322 657.304 li
716.295 660.875 717.992 664.52 716.981 668.523 cv
716.259 671.193 712.652 670.111 712.652 672.204 cv
712.652 672.781 713.265 673.105 714.131 673.105 cv
722.898 672.854 730.546 672.023 738.989 672.926 cv
739.71 672.997 740.107 672.42 740.107 671.843 cv
740.107 671.121 739.349 670.725 738.375 670.472 cv
cp
f
447.804 579.917 mo
450.004 580.422 449.752 581.829 449.752 583.488 cv
449.752 587.89 449.788 591.028 449.932 596.224 cv
449.968 597.233 450.149 598.641 449.031 598.641 cv
446.793 598.641 446.649 593.59 445.098 591.678 cv
442.861 588.864 436.944 584.643 429.765 584.643 cv
421.034 584.643 414.792 589.729 414.792 596.837 cv
414.792 605.676 416.452 608.418 427.889 613.794 cv
435.068 617.185 451.412 621.839 457.148 630.75 cv
460.034 635.224 460.719 640.022 460.719 645.434 cv
460.467 652.289 458.05 658.891 453.72 664.339 cv
443.979 676.605 419.699 674.657 407.252 673.286 cv
405.556 673.142 403.428 674.188 403.211 671.987 cv
403.536 665.782 403.428 660.118 403.428 653.984 cv
403.428 652.253 404.33 651.748 404.979 652.325 cv
405.701 653.299 405.773 654.453 406.314 655.464 cv
410.679 663.689 417.39 666.792 430.198 666.792 cv
438.315 666.792 446.757 662.318 449.716 653.804 cv
451.556 648.608 450.401 642.512 446.649 638.76 cv
439.506 630.209 428.827 627.179 419.122 623.282 cv
413.421 621.009 403.933 614.804 403.933 599.398 cv
403.933 592.725 408.045 585.725 412.736 582.622 cv
422.224 576.345 437.918 577.68 447.804 579.917 cv
f
598.142 580.061 mo
598.899 579.988 599.116 581.396 598.106 582.081 cv
596.158 583.416 593.92 583.488 592.838 586.122 cv
591.035 591.642 591.829 597.847 591.576 603.476 cv
591.431 638.398 li
591.72 651.892 589.772 657.917 597.745 664.086 cv
600.776 666.431 616.145 665.745 620.149 665.385 cv
628.664 664.591 631.658 660.009 633.499 656.87 cv
633.895 656.112 634.148 655.066 635.085 655.066 cv
636.312 655.066 636.276 656.005 636.131 657.304 cv
635.59 661.741 634.977 667.405 634.544 670.725 cv
634.328 671.698 633.282 672.673 632.379 672.745 cv
614.882 673.466 588.256 672.167 574.294 672.997 cv
573.609 672.997 572.563 672.853 572.563 671.915 cv
572.563 670.977 573.428 670.363 574.331 669.858 cv
576.279 668.813 577.866 668.921 579.273 666.323 cv
580.5 664.014 580.825 661.416 580.897 658.566 cv
581.51 629.92 581.257 596.115 580.175 586.663 cv
579.886 583.849 576.422 583.163 574.15 582.045 cv
573.211 581.612 573.681 579.916 574.944 580.024 cv
577.938 580.349 592.694 580.746 598.142 580.061 cv
f
185.807 818.86 mo
185.915 761.604 li
185.843 759.079 185.518 758.069 184.905 756.266 cv
183.822 753.199 182.307 750.962 179.204 749.339 cv
178.014 748.726 178.194 747.029 179.06 747.065 cv
186.059 747.57 192.192 747.282 198.542 747.065 cv
199.3 747.065 199.985 747.282 199.985 747.787 cv
199.985 749.519 198.037 749.555 196.846 750.781 cv
195.006 752.693 193.635 754.281 193.455 757.203 cv
192.589 769.254 193.311 824.597 193.311 824.597 cv
193.455 830.009 193.347 834.122 193.563 839.714 cv
193.599 841.337 192.373 842.059 191.868 841.554 cv
188.404 838.018 184.327 834.627 180.214 829.864 cv
164.954 815.794 131.834 782.711 116.248 768.784 cv
115.888 768.46 115.202 768.965 115.202 769.254 cv
115.202 769.254 114.877 822.974 116.429 831.993 cv
116.753 833.978 120.073 837.261 122.273 838.126 cv
122.634 838.234 123.103 838.415 123.175 839.028 cv
123.175 839.533 122.923 839.858 122.021 839.786 cv
114.444 839.028 106.976 838.523 99.7969 839.605 cv
99.0752 839.678 98.8589 839.064 98.8589 838.56 cv
98.8589 836.611 103.585 837.225 105.677 832.498 cv
107.373 828.674 106.94 751.395 106.94 751.395 cv
106.94 742.881 li
106.94 742.087 107.842 742.051 108.347 742.483 cv
108.347 742.483 178.735 812.764 185.807 818.86 cv
f
716.261 746.777 mo
716.694 746.777 717.091 747.138 717.235 747.498 cv
717.271 762.796 li
717.271 765.971 715.107 765.321 714.385 763.084 cv
713.591 760.595 712.653 758.394 711.968 757.564 cv
709.442 754.426 706.196 752.693 702.479 752.369 cv
685.162 752.405 li
682.889 752.369 681.951 753.307 681.915 755.291 cv
681.446 783.035 680.652 824.236 682.457 830.298 cv
684.152 835.89 687.327 836.25 689.383 837.116 cv
690.61 837.621 691.259 839.28 688.734 839.28 cv
681.987 839.28 662.325 839.353 662.325 839.353 cv
660.16 839.353 660.449 837.368 661.963 836.972 cv
664.454 836.286 666.33 835.673 667.52 833.616 cv
668.638 831.668 669.215 830.298 669.324 827.087 cv
669.504 822.829 669.649 775.676 669.541 759.692 cv
669.504 754.498 668.783 753.091 667.701 752.729 cv
664.561 751.756 650.311 751.611 643.564 753.813 cv
639.559 755.219 637.395 758.972 637.395 763.012 cv
637.395 763.806 636.854 764.419 636.024 764.419 cv
635.411 764.419 635.049 764.238 635.049 763.265 cv
635.23 747.859 li
635.23 747.065 635.988 746.452 638.008 746.452 cv
716.261 746.777 li
f
411.546 748.653 mo
411.546 752.802 411.474 755.399 411.691 759.188 cv
411.727 759.513 411.331 759.945 410.933 759.945 cv
409.743 759.945 408.48 756.121 405.918 754.75 cv
398.992 750.962 390.802 752.297 381.999 752.333 cv
381.999 752.333 377.056 752.514 376.948 753.523 cv
376.948 753.849 376.479 774.81 376.479 785.597 cv
376.479 785.922 376.767 786.246 377.417 786.246 cv
378.715 786.246 405.414 786.065 405.414 786.065 cv
407.722 786.029 408.299 783.685 408.552 782.963 cv
409.057 781.664 410.825 781.484 410.717 782.891 cv
410.32 788.23 410.139 793.281 410.104 798.368 cv
410.104 798.729 409.382 798.981 408.84 798.116 cv
406.821 794.833 403.862 792.957 399.713 792.957 cv
391.74 792.921 384.668 792.451 376.839 793.354 cv
376.334 793.39 376.262 793.858 376.262 794.508 cv
376.262 804.285 375.866 812.042 376.083 821.855 cv
376.154 825.246 377.02 828.457 379.69 830.694 cv
384.994 834.157 392.245 833.184 398.306 832.895 cv
403.176 832.679 408.84 833.364 411.763 829.034 cv
413.458 826.581 412.557 825.282 414.757 822.505 cv
415.119 822.071 416.165 822.216 416.128 822.974 cv
415.768 829.612 415.875 831.235 415.696 838.632 cv
415.66 839.642 414.613 839.497 414.613 839.497 cv
414.613 839.497 360.569 839.714 358.332 839.533 cv
357.465 839.497 356.924 837.946 358.187 837.513 cv
361.182 836.575 364.717 836.395 364.681 830.226 cv
364.862 801.904 li
365.151 786.896 366.341 771.13 364.465 755.868 cv
364.176 753.415 363.346 750.781 360.533 749.88 cv
359.63 749.555 357.899 749.735 357.899 748.509 cv
357.899 747.246 358.368 746.741 360.208 746.741 cv
376.371 746.921 392.642 746.633 408.697 746.561 cv
410.211 746.524 411.546 746.957 411.546 748.653 cv
f
343.611 746.777 mo
344.946 746.777 345.342 747.932 344.405 748.509 cv
342.565 749.663 339.318 750.457 338.091 753.379 cv
326.077 783.071 313.558 811.681 301.183 841.121 cv
301.04 841.518 300.209 841.914 299.812 840.904 cv
299.812 840.904 276.29 789.493 258.359 752.91 cv
256.916 749.916 253.633 750.24 251.288 748.905 cv
250.891 748.689 250.71 748.184 250.783 747.679 cv
250.783 747.498 250.891 746.813 251.973 746.813 cv
257.746 746.957 268.93 746.993 275.568 746.597 cv
276.109 746.561 276.794 747.065 276.686 747.896 cv
276.326 750.276 271.599 750.349 273.62 755.075 cv
279.068 767.883 287.582 788.627 302.085 817.093 cv
302.59 818.067 303.457 815.505 304.034 814.278 cv
311.899 796.348 318.753 777.731 326.149 759.621 cv
326.834 757.961 328.674 751.792 324.67 749.699 cv
323.768 749.194 322.181 748.797 322.181 748.004 cv
322.181 747.462 322.325 746.741 323.227 746.741 cv
330.479 746.741 336.288 746.777 343.611 746.777 cv
f
241.654 746.957 mo
242.736 746.957 243.206 749.194 241.618 749.339 cv
237.252 749.844 235.701 752.188 235.521 760.018 cv
235.304 769.65 235.304 824.452 235.304 824.452 cv
235.304 828.891 236.639 833.4 237.542 834.555 cv
239.886 837.477 243.061 837.08 243.061 838.487 cv
243.061 838.992 242.989 839.894 242.195 839.786 cv
233.97 838.703 225.491 840.327 217.518 840.11 cv
216.833 840.074 216.616 839.316 216.616 838.992 cv
216.616 836.972 219.719 838.198 221.198 836.647 cv
222.569 835.24 223.254 833.292 223.291 831.488 cv
223.904 794.977 224.084 782.025 223.507 756.121 cv
223.399 750.926 217.157 749.88 215.317 748.905 cv
214.848 748.653 215.029 746.705 216.292 746.741 cv
224.806 746.813 233.104 746.776 241.654 746.957 cv
f
226.286 579.844 mo
227.332 579.844 227.404 580.421 227.404 580.746 cv
227.404 581.287 226.935 581.647 226.286 581.864 cv
220.91 583.632 219.683 589.224 219.431 594.167 cv
219.467 608.851 219.395 625.374 219.575 640.527 cv
219.106 648.753 217.843 656.112 212.72 662.21 cv
208.751 666.9 202.51 671.302 192.3 672.997 cv
185.373 674.151 178.482 674.765 171.411 673.646 cv
161.237 672.023 157.773 669.967 151.352 663.726 cv
145.543 658.024 144.46 651.351 143.883 641.646 cv
143.919 590.307 li
143.667 585.688 143.054 582.803 138.292 581.07 cv
138.075 580.962 137.931 580.205 138.039 579.952 cv
138.399 579.23 140.636 579.628 141.935 579.663 cv
149.115 579.771 155.537 579.735 162.896 579.771 cv
163.221 579.771 163.69 580.024 163.69 580.529 cv
163.69 581.504 161.995 581.468 161.057 581.973 cv
155.067 585.111 156.475 591.064 156.222 597.342 cv
156.258 629.271 li
156.222 641.682 154.563 658.494 168.453 664.303 cv
173.323 666.322 179.06 666.106 183.533 666.106 cv
203.52 666.106 210.086 653.227 210.411 644.965 cv
210.988 631.038 210.808 593.842 210.123 590.739 cv
209.112 585.978 205.036 583.344 202.077 581.504 cv
201.572 580.674 201.861 579.556 203.268 579.663 cv
207.633 580.024 222.678 580.169 226.286 579.844 cv
f
282.208 621.587 mo
278.925 621.623 270.483 621.804 265.829 621.695 cv
264.35 621.623 264.025 619.999 263.989 619.206 cv
263.483 608.454 263.195 596.44 263.844 587.349 cv
263.989 585.762 265.865 586.086 267.091 585.978 cv
274.271 585.545 279.575 585.473 285.527 586.339 cv
287.981 586.699 290.686 588.468 292.057 590.921 cv
294.15 594.673 294.294 599.038 294.691 603.403 cv
295.629 613.794 288.45 621.406 282.208 621.587 cv
289.459 580.169 mo
275.389 578.618 260.092 580.386 245.841 579.953 cv
244.723 579.953 242.991 579.953 242.991 581.035 cv
242.991 582.875 245.156 582.406 246.491 582.839 cv
248.728 583.561 251.614 586.627 251.831 593.302 cv
252.011 598.642 252.119 643.125 251.938 651.784 cv
251.794 657.665 252.624 668.813 245.733 671.05 cv
245.012 671.302 243.785 671.88 243.785 672.421 cv
243.785 673.034 243.965 673.395 244.506 673.395 cv
250.171 673.395 260.706 672.637 269.689 673.539 cv
270.555 673.647 270.735 673.143 270.699 672.349 cv
270.627 671.41 268.571 671.194 267.308 670.473 cv
263.953 668.633 263.592 663.401 263.592 659.396 cv
263.592 648.573 263.123 639.914 263.303 630.715 cv
263.339 628.803 264.241 628.55 265.179 628.622 cv
300.896 631.725 305.839 614.804 305.623 602.032 cv
305.478 591.498 301.221 581.504 289.459 580.169 cv
cp
f
361.686 621.587 mo
358.404 621.623 349.925 621.804 345.307 621.695 cv
343.828 621.623 343.503 619.999 343.467 619.206 cv
342.962 608.454 342.673 596.44 343.323 587.349 cv
343.467 585.762 345.343 586.086 346.57 585.978 cv
353.75 585.545 359.053 585.473 365.005 586.339 cv
367.423 586.699 370.165 588.468 371.536 590.921 cv
373.628 594.673 373.773 599.038 374.169 603.403 cv
375.108 613.794 367.928 621.406 361.686 621.587 cv
368.938 580.169 mo
354.868 578.618 339.571 580.386 325.284 579.953 cv
324.166 579.953 322.47 579.953 322.47 581.035 cv
322.47 582.875 324.634 582.406 325.933 582.839 cv
328.207 583.561 331.092 586.627 331.309 593.302 cv
331.489 598.642 331.597 643.125 331.417 651.784 cv
331.273 657.665 332.103 668.813 325.211 671.05 cv
324.454 671.302 323.263 671.88 323.263 672.421 cv
323.263 673.034 323.444 673.395 323.985 673.395 cv
329.649 673.395 340.184 672.637 349.131 673.539 cv
350.034 673.647 350.213 673.143 350.177 672.349 cv
350.106 671.41 348.049 671.194 346.75 670.473 cv
343.431 668.633 343.07 663.401 343.07 659.396 cv
343.07 648.573 342.601 639.914 342.782 630.715 cv
342.818 628.803 343.719 628.55 344.658 628.622 cv
380.375 631.725 385.282 614.804 385.101 602.032 cv
384.957 591.498 380.7 581.504 368.938 580.169 cv
cp
f
88.2886 747.57 mo
89.3345 747.57 89.4067 748.147 89.4067 748.473 cv
89.4067 749.014 88.9019 749.374 88.2886 749.555 cv
82.9126 751.323 81.686 756.951 81.4336 761.857 cv
81.4336 776.577 81.3975 793.101 81.5776 808.254 cv
81.0728 816.443 79.8462 823.84 74.7231 829.9 cv
70.7183 834.627 64.5132 839.028 54.3027 840.724 cv
47.3398 841.843 40.4492 842.456 33.4141 841.337 cv
23.2397 839.75 19.7402 837.693 13.3545 831.452 cv
7.5459 825.752 6.46338 819.077 5.88623 809.336 cv
5.92236 758.033 li
5.63379 753.415 5.02051 750.529 .294434 748.797 cv
.0419922 748.653 -.0664063 747.896 .0419922 747.679 cv
.366699 746.957 2.60352 747.354 3.90186 747.391 cv
11.0815 747.462 17.5396 747.427 24.8994 747.498 cv
25.2241 747.498 25.6934 747.751 25.6934 748.22 cv
25.6572 749.23 23.9614 749.194 23.0234 749.699 cv
17.0347 752.838 18.4775 758.791 18.189 765.032 cv
18.2612 796.961 li
18.189 809.408 16.5654 826.185 30.4556 832.029 cv
35.3262 834.014 41.0625 833.797 45.5 833.797 cv
65.4873 833.797 72.0894 820.953 72.4141 812.691 cv
72.9912 798.766 72.7749 761.569 72.1255 758.466 cv
71.1152 753.668 67.0386 751.07 64.0439 749.23 cv
63.5752 748.4 63.8638 747.282 65.2705 747.391 cv
69.6362 747.715 84.6445 747.859 88.2886 747.57 cv
f
568.376 746.199 mo
570.542 746.669 570.289 748.076 570.289 749.735 cv
570.289 754.137 570.361 757.275 570.505 762.471 cv
570.505 763.481 570.721 764.888 569.603 764.888 cv
567.331 764.888 567.222 759.837 565.67 757.925 cv
563.434 755.111 557.481 750.854 550.301 750.854 cv
541.607 750.854 535.365 756.013 535.365 763.084 cv
535.365 771.959 536.989 774.665 548.425 780.077 cv
555.641 783.468 571.948 788.122 577.685 796.997 cv
580.571 801.471 581.292 806.306 581.256 811.681 cv
581.003 818.536 578.623 825.138 574.257 830.622 cv
564.552 842.853 540.236 840.904 527.789 839.569 cv
526.093 839.389 524 840.436 523.784 838.234 cv
524.109 832.065 523.964 826.365 523.964 820.231 cv
523.964 818.5 524.867 818.031 525.552 818.572 cv
526.274 819.582 526.346 820.736 526.887 821.747 cv
531.289 829.973 537.926 833.075 550.77 833.075 cv
558.888 833.075 567.294 828.565 570.289 820.051 cv
572.092 814.856 570.938 808.723 567.186 805.007 cv
560.042 796.456 549.4 793.426 539.659 789.529 cv
533.995 787.257 524.505 781.087 524.505 765.682 cv
524.505 759.007 528.619 751.972 533.273 748.869 cv
542.761 742.628 558.491 743.927 568.376 746.199 cv
f
619.608 746.524 mo
620.69 746.561 621.159 748.761 619.608 748.941 cv
615.207 749.446 613.655 751.756 613.474 759.585 cv
613.258 769.218 613.258 824.02 613.258 824.02 cv
613.258 828.493 614.592 832.967 615.495 834.122 cv
617.875 837.044 621.014 836.647 621.014 838.09 cv
621.05 838.56 620.943 839.461 620.149 839.353 cv
611.923 838.271 603.445 839.895 595.471 839.678 cv
594.786 839.678 594.57 838.884 594.57 838.56 cv
594.57 836.503 597.672 837.729 599.152 836.25 cv
600.522 834.807 601.208 832.858 601.244 831.091 cv
601.857 794.58 602.038 781.592 601.497 755.688 cv
601.352 750.493 595.111 749.446 593.271 748.473 cv
592.766 748.22 592.946 746.308 594.245 746.308 cv
602.759 746.416 611.057 746.344 619.608 746.524 cv
f
787.262 748.653 mo
787.262 752.802 787.19 755.399 787.407 759.188 cv
787.443 759.513 787.045 759.945 786.649 759.945 cv
785.458 759.945 784.16 756.121 781.634 754.75 cv
774.708 750.962 766.553 752.261 757.714 752.333 cv
757.714 752.333 752.772 752.478 752.664 753.487 cv
752.664 753.849 752.231 774.773 752.231 785.597 cv
752.231 785.922 752.483 786.246 753.132 786.246 cv
754.431 786.21 781.093 786.065 781.093 786.065 cv
783.438 785.993 784.051 783.685 784.304 782.963 cv
784.773 781.664 786.541 781.484 786.432 782.891 cv
786.036 788.194 785.819 793.281 785.819 798.368 cv
785.819 798.729 785.098 798.945 784.556 798.116 cv
782.536 794.833 779.578 792.957 775.429 792.921 cv
767.456 792.921 760.384 792.451 752.555 793.317 cv
752.05 793.39 751.978 793.822 751.978 794.472 cv
751.978 804.249 751.582 812.006 751.761 821.855 cv
751.87 825.246 752.736 828.457 755.406 830.658 cv
760.709 834.157 767.96 833.147 774.022 832.895 cv
778.892 832.679 784.556 833.364 787.479 829.034 cv
789.174 826.581 788.273 825.282 790.473 822.469 cv
790.834 822.071 791.88 822.216 791.844 822.974 cv
791.484 829.612 791.591 831.235 791.448 838.632 cv
791.375 839.642 790.329 839.497 790.329 839.497 cv
790.329 839.497 736.285 839.678 734.047 839.533 cv
733.181 839.461 732.604 837.91 733.867 837.513 cv
736.898 836.575 740.433 836.395 740.397 830.226 cv
740.578 801.904 li
740.866 786.896 742.057 771.094 740.18 755.868 cv
739.892 753.415 739.062 750.781 736.249 749.88 cv
735.346 749.555 733.579 749.735 733.579 748.473 cv
733.579 747.246 734.12 746.705 735.923 746.741 cv
752.086 746.921 768.393 746.633 784.413 746.524 cv
785.927 746.524 787.262 746.957 787.262 748.653 cv
f
884.817 746.488 mo
885.213 746.488 885.646 746.849 885.791 747.246 cv
885.827 762.507 li
885.827 765.682 883.662 765.068 882.941 762.832 cv
882.111 760.343 881.208 758.142 880.487 757.275 cv
877.961 754.137 874.714 752.405 871.035 752.116 cv
853.681 752.116 li
851.445 752.116 850.47 753.019 850.47 755.039 cv
850.001 782.747 849.171 823.947 850.975 830.009 cv
852.671 835.637 855.882 835.998 857.938 836.827 cv
859.166 837.333 859.815 839.028 857.253 839.028 cv
850.542 839.028 830.88 839.064 830.88 839.064 cv
828.715 839.064 829.004 837.08 830.483 836.684 cv
833.008 836.034 834.884 835.421 836.076 833.328 cv
837.194 831.416 837.771 830.009 837.879 826.798 cv
838.024 822.541 838.204 775.387 838.095 759.404 cv
838.059 754.245 837.338 752.802 836.255 752.478 cv
833.081 751.467 818.866 751.358 812.083 753.523 cv
808.115 754.967 805.95 758.683 805.95 762.724 cv
805.95 763.518 805.373 764.131 804.543 764.131 cv
803.966 764.131 803.605 763.914 803.605 763.012 cv
803.786 747.57 li
803.786 746.813 804.543 746.2 806.528 746.2 cv
884.817 746.488 li
f
334.375 405.228 mo
333.834 406.093 332.789 408.835 331.634 409.195 cv
329.758 408.582 327.99 406.995 326.475 405.335 cv
323.336 401.944 326.835 398.985 327.376 396.857 cv
330.191 394.909 335.638 395.053 338.127 396.894 cv
339.896 399.852 335.061 402.81 334.375 405.228 cv
326.727 420.452 mo
324.31 421.606 322.253 418.215 320.377 417.133 cv
320.305 415.906 320.594 414.03 321.099 412.876 cv
322.001 412.154 324.238 409.809 325.392 410.314 cv
326.367 411.649 328.315 413.092 329.866 413.813 cv
330.191 415.581 327.521 419.009 326.727 420.452 cv
cp
344.37 396.208 mo
340.509 393.321 336.396 390.724 332.139 388.703 cv
327.449 388.09 322.47 388.703 319.873 392.816 cv
317.13 395.883 317.708 400.718 319.079 404.181 cv
320.125 406.382 314.064 407.753 313.595 409.629 cv
311.177 412.695 313.595 417.782 315.759 419.586 cv
318.105 421.498 320.197 422.869 322.47 424.493 cv
326.005 427.415 330.119 428.75 334.124 430.445 cv
334.701 430.626 335.783 430.843 336.324 430.121 cv
337.659 428.281 336.432 428.75 335.169 426.946 cv
333.293 423.808 337.118 418.864 338.236 416.375 cv
340.509 411.793 341.808 407.247 346.461 404.686 cv
348.482 403.784 351.765 405.407 352.74 402.99 cv
350.9 399.671 346.967 398.949 344.37 396.208 cv
cp
.175753 .999237 .861112 .0733959 cmyk
f
400.001 244.5 mo
399.135 246.34 397.006 246.521 395.167 246.34 cv
393.543 245.547 394.987 240.712 394.301 239.45 cv
393.904 238.512 394.121 236.888 394.698 235.986 cv
396.429 235.337 399.099 235.229 400.038 237.429 cv
400.615 238.872 400.687 243.129 400.001 244.5 cv
415.623 248.902 mo
413.458 249.732 415.443 253.087 411.762 253.412 cv
408.876 253.664 404.835 251.031 403.212 248.181 cv
404.511 246.629 408.372 245.944 408.263 241.001 cv
408.191 236.6 407.145 233.966 401.877 232.306 cv
398.234 231.188 393.868 231.909 389.864 231.657 cv
388.312 231.909 385.931 231.296 384.957 232.739 cv
384.416 233.966 386.328 233.966 387.013 235.012 cv
387.916 240.315 387.049 249.263 386.653 254.566 cv
386.653 256.19 383.225 256.911 384.776 258.535 cv
385.895 260.447 389.575 258.896 391.451 259.184 cv
392.389 259.365 393.218 259.762 394.084 259.184 cv
395.78 257.994 394.229 256.298 394.409 254.603 cv
394.553 253.123 392.677 248.938 398.414 252.51 cv
401.588 254.494 404.042 257.777 407.758 258.643 cv
409.995 259.04 414.108 259.833 415.731 257.489 cv
417.102 255.216 418.149 253.195 417.607 250.381 cv
417.03 249.479 416.778 248.397 415.623 248.902 cv
cp
f
401.48 119.381 mo
400.434 119.923 394.589 123.025 393.471 122.124 cv
392.497 119.706 391.883 113.465 393.327 110.831 cv
396.538 109.352 399.712 115.269 401.48 116.784 cv
401.877 117.505 401.877 118.732 401.48 119.381 cv
399.388 104.806 mo
398.233 103.435 391.27 105.6 389.899 106.249 cv
386.436 108.666 388.384 113.104 389.034 116.315 cv
388.708 126.309 li
388.204 129.627 387.23 132.767 386.039 135.833 cv
387.663 137.42 390.152 135.761 392.064 135.147 cv
393.291 134.173 395.203 134.282 395.635 132.694 cv
395.564 131.792 394.481 132.045 393.94 131.72 cv
393.543 131.071 392.966 130.565 393.146 129.7 cv
393.218 127.607 395.058 126.38 396.501 125.118 cv
398.125 124.468 404.222 121.149 405.99 122.412 cv
406.928 123.169 407.433 124 407.505 125.154 cv
407.974 126.777 403.537 129.014 406.928 129.988 cv
410.32 130.962 415.118 126.489 418.437 125.226 cv
418.582 124.577 li
415.695 121.907 416.2 123.963 413.963 120.644 cv
413.963 120.644 402.67 106.826 399.388 104.806 cv
cp
f
348.409 149.219 mo
345.919 149.219 342.925 142.833 340.76 141.859 cv
340.905 140.885 342.998 138.792 343.863 138.432 cv
347.652 135.726 350.863 141.137 351.187 143.952 cv
351.512 145.647 349.311 148.281 348.409 149.219 cv
368.288 137.782 mo
366.954 137.458 365.546 137.854 364.68 138.9 cv
364.031 140.019 364.103 141.57 364.284 142.869 cv
363.886 144.313 362.985 145.828 361.361 146.225 cv
359.917 146.225 356.779 146.044 356.779 146.044 cv
357.934 142.653 358.078 137.458 355.156 134.644 cv
353.063 132.407 351.151 130.783 347.976 131.396 cv
344.441 131.324 341.049 132.623 339.318 135.834 cv
336.54 138.504 332.715 140.524 329.973 143.122 cv
329.396 143.916 330.154 144.781 330.695 145.214 cv
333.365 144.637 335.313 146.405 337.225 147.776 cv
339.714 150.915 342.708 155.352 345.27 158.491 cv
347.507 160.511 344.477 163.397 346.822 165.454 cv
347.363 165.995 348.445 166.067 349.058 165.743 cv
356.779 157.986 li
357.356 156.615 356.382 154.811 354.651 155.532 cv
353.676 155.424 352.486 155.027 352.269 153.729 cv
355.95 151.564 361.216 152.935 365.257 151.312 cv
367.747 150.193 370.308 147.776 370.958 145.034 cv
371.355 142.364 370.958 139.297 368.288 137.782 cv
cp
f
405.242 324.435 mo
408.71 328.685 li
411.525 334.818 417.997 336.655 423.335 339.216 cv
427.845 339.938 431.717 342.129 436.335 342.779 cv
437.454 343.176 437.263 344.367 437.335 345.341 cv
436.037 348.985 431.318 346.774 428.179 347.279 cv
423.02 345.655 417.452 345.244 412.617 342.935 cv
408.251 342.033 404.074 340.562 400.429 337.748 cv
399.635 337.279 400.16 336.313 400.304 335.591 cv
401.351 332.525 402.462 329.468 404.085 326.654 cv
404.411 325.607 405.242 324.435 405.242 324.435 cv
cp
468.242 321.81 mo
468.32 321.795 468.383 321.797 468.46 321.81 cv
468.979 321.9 469.46 322.559 469.46 323.123 cv
470.074 329.076 471.107 334.853 471.648 340.841 cv
471.648 342.357 470.172 343.254 469.054 343.904 cv
465.699 345.744 461.888 346.139 457.992 346.716 cv
454.131 346.861 449.756 348.318 446.148 346.623 cv
444.849 344.999 445.415 342.768 446.46 341.216 cv
450.501 337.5 456.079 337.676 459.867 333.31 cv
463.908 330.424 465.096 326.084 467.585 322.404 cv
467.768 322.039 468.009 321.855 468.242 321.81 cv
cp
439.523 282.279 mo
444.348 282.233 449.042 283.108 453.335 284.591 cv
454.054 285.091 li
455.835 286.279 li
459.299 289.237 464.307 291.838 464.054 296.998 cv
465.678 302.878 466.554 311.161 462.585 316.248 cv
460.241 322.272 455.731 329.212 449.273 331.81 cv
443.464 335.346 431.175 335.654 425.835 331.685 cv
417.177 326.634 412.944 306.726 417.273 298.248 cv
419.077 293.918 424.201 288.338 429.648 285.091 cv
432.282 283.504 435.007 282.45 437.46 282.341 cv
438.155 282.296 438.833 282.286 439.523 282.279 cv
cp
493.429 273.966 mo
496.062 273.955 498.748 274.161 501.273 274.341 cv
504.242 275.716 li
507.453 278.855 510.493 281.989 513.523 285.091 cv
513.554 285.091 li
517.054 288.591 520.62 292.075 524.335 295.466 cv
526.32 298.425 530.015 301.904 527.273 305.873 cv
524.423 312.294 517.86 316.723 512.773 321.81 cv
511.799 322.676 510.452 323.01 509.117 322.685 cv
504.643 315.289 501.268 307.302 497.335 299.654 cv
495.208 296.407 494.167 292.639 492.398 289.248 cv
491.712 287.805 490.8 286.426 489.898 285.091 cv
488.275 282.566 486.689 280.038 486.617 276.935 cv
486.653 275.708 487.691 274.856 488.773 274.279 cv
490.275 274.076 491.85 273.974 493.429 273.966 cv
cp
472.617 273.029 mo
474.354 272.945 476.2 273.775 477.304 275.06 cv
479.505 278.235 481.208 281.664 482.867 285.091 cv
483.877 287.148 484.9 289.228 486.054 291.248 cv
489.518 296.912 491.435 303.211 494.429 309.091 cv
498.001 314.575 500.778 320.372 504.71 325.748 cv
505.072 326.469 505.144 327.178 504.71 327.935 cv
500.706 331.795 495.654 333.843 490.71 335.935 cv
486.778 337.126 482.883 338.82 478.554 338.748 cv
477.328 338.423 476.283 337.494 476.21 336.123 cv
473.613 322.738 473.4 308.282 471.054 294.716 cv
470.622 291.578 470.468 288.302 470.179 285.091 cv
470.071 283.504 469.838 281.919 469.585 280.404 cv
469.044 278.456 469.191 276.047 469.804 274.279 cv
470.562 273.467 471.575 273.079 472.617 273.029 cv
cp
347.148 270.716 mo
351.481 270.659 356.496 272.206 360.554 271.529 cv
364.929 271.779 li
366.698 272.031 368.609 272.24 369.835 273.466 cv
369.655 276.028 367.437 277.734 366.21 279.935 cv
364.624 281.595 363.132 283.36 361.617 285.091 cv
359.885 287.04 358.137 288.905 356.117 290.529 cv
353.7 291.755 352.255 295.231 349.117 294.185 cv
346.664 291.624 344.601 288.447 343.085 285.091 cv
343.054 285.091 li
341.755 282.205 340.906 279.148 340.617 276.154 cv
340.942 274.386 341.024 271.94 343.117 271.435 cv
344.343 270.921 345.704 270.735 347.148 270.716 cv
cp
529.367 270.56 mo
532.531 270.472 535.693 270.69 538.804 271.529 cv
541.773 272.654 li
542.429 273.81 li
543.259 278.067 542.397 281.736 540.773 285.091 cv
539.042 288.591 536.471 291.729 534.054 294.904 cv
531.132 295.553 529.113 292.477 527.273 290.529 cv
525.686 288.725 524.231 286.896 522.679 285.091 cv
520.443 282.422 518.061 279.854 515.21 277.654 cv
514.092 276.139 512.165 274.768 512.273 272.748 cv
513.492 271.966 li
518.768 271.696 524.094 270.708 529.367 270.56 cv
cp
414.46 269.935 mo
418.113 269.945 421.71 271.615 423.992 274.591 cv
425.507 275.313 426.145 273.553 427.335 273.373 cv
429.861 272.579 432.366 272.23 434.71 273.529 cv
435.649 274.755 436.869 275.563 438.492 275.31 cv
441.378 275.238 443.478 273.14 446.148 272.31 cv
450.261 271.769 455.343 271.134 459.023 273.154 cv
460.971 275.391 460.874 278.465 461.523 281.279 cv
461.704 282.109 461.694 283.134 461.117 283.748 cv
459.024 284.722 459.554 282.532 456.054 281.341 cv
456.054 281.341 450.328 278.842 448.054 277.904 cv
443.978 276.028 439.033 277.594 434.523 277.341 cv
428.499 278.965 421.297 279.469 416.21 283.654 cv
415.669 284.123 415.122 284.623 414.617 285.091 cv
406.824 292.343 402.949 301.696 402.335 312.123 cv
400.867 322.216 li
397.728 325.752 397.296 330.585 394.085 333.904 cv
389.324 334.553 385.874 331.083 382.085 328.81 cv
379.596 326.465 379.895 322.389 381.085 319.466 cv
383.611 312.72 389.193 307.228 391.429 300.373 cv
394.496 295.43 396.18 290.034 399.21 285.091 cv
393.117 285.091 li
390.447 290.9 387.796 296.776 384.585 302.404 cv
381.988 305.687 381.284 309.794 378.867 313.185 cv
376.667 315.422 376.617 319.86 372.648 320.185 cv
366.587 318.345 361.422 313.258 357.273 308.279 cv
356.119 302.795 359.909 298.515 362.398 294.185 cv
364.959 291.227 367.241 288.158 369.585 285.091 cv
372.002 281.844 374.455 278.627 377.304 275.56 cv
382.463 270.582 390.558 269.506 397.304 271.779 cv
397.954 272.248 398.117 273.151 398.117 273.873 cv
397.72 276.687 395.536 278.787 394.742 281.529 cv
394.201 282.72 393.658 283.906 393.117 285.06 cv
399.21 285.091 li
399.608 284.442 399.997 283.83 400.429 283.216 cv
402.918 278.851 404.865 273.925 409.554 270.966 cv
411.11 270.256 412.8 269.931 414.46 269.935 cv
cp
572.085 266.748 mo
582.148 266.935 li
583.664 268.306 582.375 270.588 582.085 272.248 cv
581.04 276.541 579.711 280.726 578.773 285.091 cv
578.629 285.813 578.475 286.526 578.367 287.248 cv
576.418 292.299 574.907 297.524 572.742 302.466 cv
570 307.698 568.636 313.529 564.992 318.435 cv
560.807 324.568 557.161 330.911 551.929 336.466 cv
545.429 343.779 li
539.296 347.82 534.407 354.438 528.273 358.623 cv
524.738 361.148 521.717 364.415 517.929 366.436 cv
515.765 367.771 513.568 369.105 511.367 370.404 cv
505.234 374.084 499.024 377.688 492.71 380.936 cv
479.273 385.561 li
475.398 386.436 li
442.367 389.748 li
438.254 390.541 434.288 389.32 430.21 389.248 cv
424.619 388.273 418.825 387.996 413.304 386.842 cv
394.364 384.244 375.953 380.217 359.898 370.404 cv
357.77 369.069 355.616 367.674 353.523 366.123 cv
344.684 359.989 335.825 352.596 328.898 344.154 cv
323.594 338.598 319.21 332.345 314.773 326.248 cv
310.263 321.63 308.746 315.667 305.679 310.435 cv
302.833 302.255 300.184 293.955 298.992 285.091 cv
298.919 284.406 298.845 283.767 298.773 283.154 cv
297.979 279.186 296.661 275.45 296.335 271.373 cv
297.129 267.476 301.392 269.416 304.242 269.091 cv
306.803 269.091 308.894 267.841 311.492 267.841 cv
315.821 268.383 322.356 265.951 324.304 271.435 cv
325.495 276.27 327.637 280.726 330.054 285.091 cv
332.616 289.746 335.481 294.267 337.898 299.029 cv
342.192 306.93 349.734 313.578 355.398 320.685 cv
359.763 325.015 364.672 328.822 368.929 332.935 cv
381.917 343.578 397.392 348.079 412.617 353.31 cv
420.987 355.728 429.869 356.786 438.96 357.435 cv
447.331 357.58 455.083 356.119 462.804 354.748 cv
466.051 355.217 468.397 353.397 471.21 352.748 cv
477.705 352.134 482.859 348.071 488.992 346.123 cv
495.775 342.984 502.209 338.802 508.992 335.591 cv
517.038 329.783 522.856 321.081 530.179 314.154 cv
533.426 308.021 539.356 303.112 541.773 296.654 cv
543.433 292.577 545.981 288.952 547.929 285.091 cv
548.832 283.396 549.54 281.703 550.117 279.935 cv
551.848 276.147 552.654 272.023 555.179 268.56 cv
560.338 266.756 566.421 267.253 572.085 266.748 cv
cp
600.242 241.279 mo
601.585 241.311 602.946 241.705 603.992 242.373 cv
604.281 242.553 604.49 242.781 604.742 242.998 cv
605.273 245.185 li
605.922 246.7 605.113 248.192 604.21 249.31 cv
602.875 250.501 601.332 251.52 599.492 251.123 cv
597.58 250.979 596.185 249.106 595.21 247.591 cv
594.886 246.689 595.977 243.125 596.554 242.404 cv
596.554 242.404 596.549 242.373 596.585 242.373 cv
597.56 241.579 598.898 241.248 600.242 241.279 cv
cp
274.117 237.341 mo
275.725 237.284 277.706 237.444 278.679 237.904 cv
279.797 238.229 281.475 240.605 282.304 242.373 cv
282.738 243.383 282.916 244.197 282.554 244.341 cv
279.867 247.966 li
278.676 249.085 275.894 248.979 274.054 248.654 cv
272.755 248.726 272.297 247.176 271.648 246.31 cv
271.288 245.769 270.891 243.924 270.71 242.373 cv
270.566 241.398 270.482 240.546 270.554 240.185 cv
270.951 239.536 271.958 237.611 272.679 237.466 cv
273.085 237.403 273.581 237.36 274.117 237.341 cv
cp
580.46 226.904 mo
581.832 227.048 583.196 227.476 584.242 228.341 cv
586.154 231.588 585.949 235.784 586.273 239.716 cv
586.238 240.608 586.265 241.481 586.335 242.373 cv
586.336 242.383 586.334 242.394 586.335 242.404 cv
586.7 247.371 588.145 251.917 587.46 257.029 cv
586.919 258.4 585.291 258.976 583.992 259.373 cv
581.25 260.167 578.54 259.11 575.617 259.435 cv
566.814 259.76 558 261.073 549.304 260.279 cv
545.264 260.676 540.559 260.348 536.554 260.998 cv
532.622 262.296 527.865 261.37 523.679 262.091 cv
519.71 261.442 515.809 262.426 511.804 262.029 cv
505.527 261.127 498.461 261.392 492.148 262.185 cv
481.614 261.392 470.779 262.041 459.992 261.716 cv
453.967 260.814 447.2 261.914 440.742 261.841 cv
430.928 261.12 421.182 262.491 411.585 261.841 cv
395.784 261.444 379.522 261.844 363.648 261.591 cv
356.866 261.772 350.839 259.523 343.804 260.498 cv
333.017 259.632 321.558 260.083 311.492 257.341 cv
307.307 257.738 302.636 257.519 298.523 257.591 cv
297.405 257.519 297.057 256.212 296.804 255.31 cv
296.01 250.981 294.17 246.774 293.304 242.373 cv
292.655 239.162 292.525 235.862 293.679 232.435 cv
294.329 231.136 295.621 229.786 296.992 229.498 cv
307.779 229.57 318.836 228.913 329.804 229.31 cv
332.042 228.336 334.548 229.575 336.929 228.998 cv
344.903 227.879 352.745 229.5 360.898 229.248 cv
368.403 227.877 375.082 231.26 382.585 230.935 cv
389.08 228.734 397.284 229.969 404.21 230.185 cv
408.251 230.185 412.381 228.901 416.242 230.091 cv
420.5 230.669 425.112 230.363 429.117 229.498 cv
437.199 229.895 445.17 229 453.179 228.748 cv
455.417 228.351 457.443 229.311 459.679 228.841 cv
466.065 228.192 472.135 228.837 478.304 227.935 cv
488.623 228.657 499.652 227.93 509.898 228.904 cv
513.037 228.254 516.572 228.841 519.71 228.841 cv
534.611 227.615 550.558 227.685 565.71 227.685 cv
570.473 226.964 575.626 227.481 580.46 226.904 cv
cp
455.71 199.56 mo
455.958 199.566 456.146 199.646 456.304 199.748 cv
457.279 200.325 457.316 202.104 458.867 202.248 cv
462.078 204.881 465.332 208.272 468.398 211.591 cv
471.212 214.225 473.375 217.287 475.648 220.029 cv
475.756 220.354 475.867 220.73 475.867 221.091 cv
475.903 221.308 475.876 221.474 475.804 221.654 cv
474.542 222.52 473.053 222.863 471.429 222.935 cv
470.058 222.935 468.56 223.106 467.585 222.06 cv
467.333 221.735 467.021 221.416 466.804 221.091 cv
459.71 221.091 li
459.35 221.957 458.704 222.914 457.585 222.841 cv
456.078 222.626 454.441 222.375 453.429 221.091 cv
453.423 221.084 453.435 221.067 453.429 221.06 cv
453.398 221.06 li
453.267 220.891 453.187 220.701 453.085 220.498 cv
451.895 216.024 450.401 211.498 450.148 206.591 cv
449.535 205.076 448.576 203.585 448.648 201.998 cv
449.766 201.096 450.826 202.543 451.367 203.373 cv
453.964 209.253 460.192 213.686 459.867 220.685 cv
459.831 220.793 459.783 220.952 459.71 221.06 cv
466.804 221.091 li
461.898 214.633 458.602 207.604 454.273 200.966 cv
454.057 200.389 454.403 199.928 454.835 199.748 cv
455.052 199.64 455.213 199.627 455.429 199.591 cv
455.529 199.573 455.625 199.558 455.71 199.56 cv
cp
461.054 195.716 mo
463.147 195.789 464.287 198.476 466.054 199.341 cv
466.452 199.486 466.845 199.567 467.242 199.748 cv
472.329 201.732 476.148 206.462 481.054 209.06 cv
485.745 212.379 491.355 213.69 495.648 218.091 cv
496.983 219.065 498.308 220.153 499.679 221.091 cv
500.69 221.777 501.691 222.373 502.773 222.841 cv
502.449 223.491 501.458 223.245 500.773 223.498 cv
497.562 223.173 494.081 223.44 491.085 222.466 cv
490.04 222.069 489.034 221.597 488.023 221.091 cv
484.884 219.468 481.941 217.434 479.054 215.341 cv
472.994 210.651 468.229 204.186 462.023 199.748 cv
461.879 199.604 461.704 199.512 461.523 199.404 cv
460.658 198.935 459.929 197.888 459.929 196.841 cv
460.001 196.264 460.513 195.861 461.054 195.716 cv
cp
423.929 170.498 mo
423.181 170.57 422.354 170.924 421.867 171.123 cv
421.758 171.736 421.447 172.379 421.085 173.029 cv
420.148 174.688 418.907 176.391 420.71 178.123 cv
422.912 178.628 422.97 175.881 423.835 174.654 cv
423.98 174.077 424.47 173.57 424.867 173.029 cv
425.228 172.596 425.518 172.142 425.554 171.529 cv
425.356 170.645 424.678 170.426 423.929 170.498 cv
cp
445.429 173.029 mo
445.538 173.354 445.708 173.656 445.96 173.873 cv
447.548 175.713 447.568 172.485 449.335 173.279 cv
451.609 173.784 450.017 176.601 451.929 176.998 cv
453.3 176.204 453.842 174.575 454.023 173.06 cv
454.023 173.024 454.023 173.029 454.023 173.029 cv
445.429 173.029 li
cp
449.242 167.185 mo
449.064 167.195 448.9 167.207 448.71 167.248 cv
447.16 167.645 445.713 168.843 445.46 170.466 cv
445.245 171.224 445.141 172.235 445.429 173.029 cv
454.023 172.998 li
454.023 171.266 453.754 169.688 452.492 168.498 cv
451.482 167.771 450.487 167.117 449.242 167.185 cv
cp
427.773 165.623 mo
425.962 165.597 424.204 165.898 422.742 166.873 cv
422.417 167.342 422.331 168.226 422.835 168.623 cv
423.557 169.2 424.747 169.111 425.648 168.966 cv
427.596 169.688 427.671 171.838 428.898 173.029 cv
428.97 173.137 429.071 173.207 429.179 173.279 cv
429.973 173.567 430.842 173.534 431.492 173.029 cv
431.636 172.921 431.758 172.803 431.867 172.623 cv
432.516 170.603 432.142 168.316 430.554 166.873 cv
429.585 165.748 li
428.981 165.685 428.376 165.631 427.773 165.623 cv
cp
437.554 165.56 mo
437.085 165.632 436.682 166.132 436.429 166.529 cv
435.635 168.477 437.499 170.146 438.148 171.841 cv
438.289 172.229 438.36 172.579 438.429 172.998 cv
438.431 173.009 438.427 173.018 438.429 173.029 cv
438.821 174.716 438.935 176.509 439.617 178.123 cv
440.23 178.123 440.893 178.113 441.398 177.716 cv
441.723 176.129 442.6 174.616 442.96 173.029 cv
443.177 172.055 443.18 171.08 442.71 169.998 cv
441.665 168.122 440.224 165.308 437.554 165.56 cv
cp
511.117 160.748 mo
512.291 160.736 513.393 160.928 514.367 161.685 cv
516.496 163.056 519.197 164.522 518.835 167.373 cv
516.491 169.141 513.035 169.544 510.148 168.966 cv
497.052 168.569 484.6 169.755 471.648 169.935 cv
465.992 170.31 li
465.163 169.913 464.99 169.125 465.242 168.404 cv
467.912 168.548 469.534 166.375 472.023 166.123 cv
473.792 165.221 476.132 165.731 478.117 165.154 cv
487.773 163.966 li
494.023 163.716 li
497.739 162.995 501.338 162.104 505.054 161.31 cv
507.016 161.423 509.161 160.767 511.117 160.748 cv
cp
440.617 154.779 mo
441.094 154.772 441.577 154.764 442.054 154.779 cv
444.345 154.85 446.614 155.167 448.71 155.654 cv
449.721 156.015 450.742 156.514 451.679 157.091 cv
452.69 157.669 453.648 158.343 454.585 159.029 cv
456.678 160.147 458.505 162.155 460.273 163.779 cv
461.031 164.356 460.725 165.495 460.617 166.216 cv
459.426 167.587 456.285 167.737 456.898 170.154 cv
457.295 171.056 457.472 172.023 457.617 172.998 cv
483.742 173.029 li
488.288 172.885 492.785 172.849 497.367 173.029 cv
499.315 173.101 501.325 173.224 503.273 173.404 cv
509.492 173.06 li
510.141 173.06 510.837 173.029 511.523 173.029 cv
514.482 172.921 517.507 172.781 520.429 172.998 cv
525.71 172.998 li
520.429 173.029 li
522.269 173.137 524.114 173.452 525.773 174.029 cv
526.314 174.678 527.615 175.42 527.398 176.466 cv
521.265 177.368 513.904 178.212 507.554 176.841 cv
503.442 177.094 499.557 176.694 495.335 177.091 cv
492.233 177.957 488.423 174.825 486.367 178.216 cv
486.186 179.01 486.518 180.166 487.492 180.31 cv
492.976 181.032 498.683 181.426 504.492 181.498 cv
507.306 180.884 510.377 181.373 513.335 181.373 cv
520.371 181.517 528.845 178.937 533.679 185.466 cv
533.824 185.791 533.999 186.079 534.179 186.404 cv
535.442 188.641 536.833 190.859 537.085 193.529 cv
536.87 194.25 536.057 194.685 535.335 194.685 cv
531.656 194.108 528.247 192.587 524.71 191.685 cv
519.479 190.855 514.882 188.466 509.398 188.466 cv
506.512 188.178 503.907 187.198 501.273 186.404 cv
499.325 185.827 497.339 185.325 495.21 185.216 cv
491.422 184.026 487.504 183.142 483.21 182.998 cv
477.33 181.446 470.403 181.878 466.398 176.466 cv
466.074 175.167 466.671 174.041 467.898 173.716 cv
473.31 173.5 478.546 173.209 483.742 173.029 cv
457.617 173.029 li
457.87 174.292 458.087 175.603 458.773 176.685 cv
459.82 177.01 461.669 176.614 461.742 178.31 cv
461.742 181.196 461.346 183.915 460.335 186.404 cv
459.326 188.821 457.849 191.018 455.648 192.966 cv
452.978 195.275 449.306 195.043 446.023 195.873 cv
438.194 197.713 430.957 195.226 425.148 190.716 cv
422.984 189.778 421.534 188.208 420.523 186.404 cv
419.296 184.239 418.629 181.641 417.835 179.404 cv
417.655 177.131 417.999 175.013 418.648 173.029 cv
419.442 170.576 420.676 168.302 421.867 166.029 cv
424.104 162.746 426.93 159.184 430.429 157.091 cv
430.682 156.911 430.922 156.767 431.21 156.623 cv
433.973 155.38 437.276 154.822 440.617 154.779 cv
cp
482.117 144.685 mo
484.075 144.662 486.095 145.097 488.21 146.154 cv
489.523 147.435 li
489.595 149.997 486.185 149.283 484.742 150.654 cv
479.799 152.494 475.045 154.891 470.21 157.091 cv
469.669 157.308 469.163 157.526 468.585 157.779 cv
468.117 157.996 468.052 158.649 468.304 159.154 cv
469.062 160.02 470.165 159.854 471.21 159.998 cv
473.303 158.951 475.484 158.029 477.648 157.091 cv
481.508 155.468 485.391 153.893 489.179 151.873 cv
495.782 149.527 502.89 151.885 508.085 155.998 cv
508.085 156.286 508.463 156.735 508.21 157.06 cv
508.102 157.06 507.975 157.091 507.867 157.091 cv
503.862 157.813 499.941 158.745 496.117 159.935 cv
487.929 160.435 li
484.394 160.255 480.775 160.589 477.492 161.31 cv
473.126 161.563 469.653 163.903 465.648 164.841 cv
463.195 164.048 464.625 160.741 462.929 159.154 cv
462.677 158.396 462.761 157.705 463.085 157.091 cv
463.117 157.091 li
463.333 156.623 463.658 156.207 464.054 155.81 cv
469.127 150.765 475.125 144.77 482.117 144.685 cv
cp
404.054 140.279 mo
406.958 140.434 408.297 144.173 410.929 145.029 cv
415.258 147.338 416.557 152.299 420.273 155.185 cv
420.21 155.998 li
419.814 156.286 419.447 156.694 419.085 157.091 cv
417.354 159.003 415.729 161.481 413.023 160.435 cv
410.966 159.353 408.996 158.029 406.867 157.091 cv
405.424 156.406 403.907 155.918 402.21 155.81 cv
398.026 152.924 393.223 151.46 388.46 149.873 cv
387.739 149.62 388.076 148.832 388.148 148.435 cv
389.411 146.415 391.337 148.32 392.96 148.248 cv
395.125 149.619 397.877 149.728 400.367 150.341 cv
403.758 152.614 407.764 153.261 411.335 155.029 cv
412.057 155.029 412.62 154.445 412.835 153.904 cv
413.016 152.93 412.307 152.212 411.585 151.779 cv
409.565 151.779 408.341 149.928 406.429 149.748 cv
404.229 147.835 401.801 146.559 399.492 144.935 cv
398.915 144.394 398.727 143.325 399.304 142.748 cv
400.134 141.629 401.331 140.539 402.773 140.466 cv
403.014 140.399 403.239 140.335 403.46 140.31 cv
403.669 140.287 403.861 140.269 404.054 140.279 cv
cp
425.179 136.091 mo
426.082 136.236 427.126 136.086 427.523 137.06 cv
426.622 140.993 427.352 145.349 428.398 149.029 cv
427.929 150.472 426.156 151.067 424.929 151.716 cv
422.116 152.222 421.542 148.753 419.304 147.779 cv
416.815 145.29 415.112 142.206 412.117 140.185 cv
411.792 139.608 411.972 138.834 412.117 138.185 cv
413.091 137.067 414.464 136.798 415.835 137.123 cv
417.054 137.935 li
419.219 141.002 420.422 144.838 423.742 146.966 cv
424.463 147.255 425.592 146.993 425.773 146.091 cv
426.17 144.576 424.473 143.975 424.148 142.748 cv
423.751 140.908 422.203 138.578 423.898 136.81 cv
424.295 136.485 424.783 136.236 425.179 136.091 cv
cp
463.179 135.873 mo
464.314 135.813 465.231 136.275 466.273 136.623 cv
466.148 137.591 li
463.948 139.937 461.986 142.374 460.398 144.935 cv
460.11 145.765 460.503 146.536 461.117 147.185 cv
461.586 147.33 462.273 147.712 462.742 147.279 cv
465.701 144.14 467.662 137.208 473.398 138.904 cv
474.12 139.481 475.095 139.805 475.492 140.779 cv
475.745 142.438 473.966 142.286 472.992 142.935 cv
468.879 147.445 463.946 150.601 459.617 154.966 cv
458.39 155.508 457.577 154.388 456.71 153.81 cv
453.175 149.878 456.456 144.784 457.429 140.779 cv
459.017 139.011 459.613 135.61 462.679 135.935 cv
462.851 135.904 463.017 135.881 463.179 135.873 cv
cp
418.21 221.091 mo
421.241 216.906 424.676 212.897 426.804 208.279 cv
427.922 206.259 425.848 205.068 425.523 203.373 cv
424.874 202.795 424.05 202.385 423.148 202.529 cv
421.308 204.729 420.754 207.487 419.492 209.904 cv
417.58 213.8 414.507 217.344 412.054 221.06 cv
418.21 221.091 li
cp
447.023 91.9038 mo
457.253 91.8052 466.841 93.6816 476.21 95.7788 cv
479.999 97.1499 483.704 98.7832 487.492 100.154 cv
492.976 103.221 498.864 105.643 504.492 108.529 cv
508.352 109.936 511.925 112.059 515.46 114.404 cv
516.074 114.801 516.597 115.194 517.21 115.591 cv
525.508 119.416 531.384 128.05 538.96 133.498 cv
539.971 134.219 540.929 134.954 541.867 135.748 cv
541.898 135.748 li
548.303 141.227 553.042 148.106 559.273 154.373 cv
559.742 155.748 li
560.648 157.091 li
564.492 162.748 li
565.754 166.247 567.464 169.565 568.835 173.029 cv
569.305 174.292 569.788 175.542 570.148 176.841 cv
571.772 179.908 573.119 183.157 574.273 186.404 cv
575.897 190.877 577.339 195.382 579.179 199.748 cv
579.613 200.686 579.992 201.627 580.46 202.529 cv
581.507 207.688 584.708 211.982 584.96 217.466 cv
584.6 220.713 581.034 220.226 578.617 221.091 cv
578.184 221.236 577.817 221.401 577.492 221.654 cv
573.667 221.979 569.689 221.925 566.117 222.466 cv
562.184 221.601 558.393 222.936 554.46 222.466 cv
553.96 221.998 li
553.96 221.673 553.903 221.38 553.867 221.091 cv
548.242 221.091 li
548.206 221.416 548.126 221.735 548.054 222.06 cv
546.828 223.828 544.448 223.438 542.679 223.185 cv
541.38 223.113 540.406 222.322 539.179 221.998 cv
533.898 221.591 li
533.465 221.447 533.072 221.276 532.71 221.06 cv
532.648 221.06 li
530.587 219.861 529.141 217.632 526.96 216.56 cv
525.193 216.019 523.416 214.941 522.117 213.498 cv
518.833 212.993 516.331 210.631 513.335 209.404 cv
510.377 207.636 507.147 206.41 504.117 204.966 cv
501.375 202.513 498.138 201.412 495.179 199.716 cv
495.117 199.716 li
494.892 199.585 494.69 199.473 494.492 199.341 cv
490.452 198.548 486.653 197.174 483.117 195.154 cv
479.833 194.757 477.02 193.195 473.773 192.654 cv
472.691 192.654 471.355 192.417 471.21 193.716 cv
471.536 197.18 475.053 196.411 477.398 197.529 cv
479.274 197.709 481.073 198.851 482.804 199.716 cv
488.992 199.748 li
482.804 199.748 li
483.598 200.108 484.354 200.442 485.148 200.623 cv
489.333 201.994 493.504 203.052 497.148 205.685 cv
499.89 206.659 502.004 209.254 504.71 210.373 cv
509.509 213.62 515.817 212.704 519.929 217.466 cv
521.373 219.126 523.114 220.081 524.773 221.091 cv
525.784 221.705 526.778 222.355 527.679 223.185 cv
528.149 224.231 526.899 224.094 526.429 224.31 cv
522.713 223.769 518.773 223.668 514.804 223.56 cv
512.568 222.767 510.371 221.591 507.773 221.591 cv
507.449 221.411 507.103 221.236 506.742 221.091 cv
500.645 217.953 495.211 213.642 489.835 209.06 cv
484.244 208.014 480.115 203.531 475.46 200.248 cv
475.172 200.104 474.906 199.892 474.617 199.748 cv
470.937 197.655 467.622 194.71 463.617 193.123 cv
462.931 192.582 462.092 191.618 462.742 190.716 cv
463.319 189.237 464.124 187.847 464.773 186.404 cv
465.207 185.394 465.566 184.393 465.71 183.31 cv
467.009 181.614 468.542 183.37 469.804 183.623 cv
473.809 184.885 478.134 185.394 482.21 186.404 cv
483.545 186.729 484.88 187.149 486.179 187.654 cv
493.431 189.747 501.557 189.924 508.773 192.341 cv
514.366 193.207 519.489 195.389 525.117 196.435 cv
529.375 197.554 533.706 198.61 538.179 199.404 cv
538.324 199.512 538.503 199.604 538.648 199.748 cv
540.705 201.299 540.922 203.867 541.21 206.248 cv
540.85 207.078 540.101 207.822 539.054 207.498 cv
531.153 205.982 524.385 201.912 516.773 199.748 cv
516.701 199.711 516.6 199.69 516.492 199.654 cv
510.431 197.562 504.219 195.79 498.085 193.841 cv
492.854 192.579 487.375 192.081 482.648 189.591 cv
481.349 189.123 479.672 189.264 478.554 189.841 cv
477.905 190.166 477.585 191.045 478.054 191.623 cv
480.905 194.112 485.06 193.295 488.054 195.279 cv
492.519 196.899 497.116 198.201 501.617 199.748 cv
502.086 199.892 502.528 200.067 502.96 200.248 cv
505.398 200.56 li
507.238 202.869 510.438 201.833 512.71 203.06 cv
516.751 204.431 521.074 204.818 524.429 207.56 cv
529.697 208.534 534.378 210.692 539.429 211.81 cv
542.244 213.831 545.44 215.59 547.929 217.935 cv
548.399 218.801 548.386 220.014 548.242 221.06 cv
553.867 221.091 li
553.506 215.896 552.999 210.683 550.148 206.498 cv
549.247 204.297 548.541 201.984 547.71 199.748 cv
546.809 197.331 545.789 195.001 544.273 192.873 cv
543.624 190.6 542.536 188.46 541.273 186.404 cv
539.938 184.167 538.384 181.963 537.085 179.654 cv
535.035 177.495 532.971 175.296 530.992 173.029 cv
530.987 173.023 530.997 173.003 530.992 172.998 cv
530.988 172.993 530.965 173.003 530.96 172.998 cv
529.131 170.808 527.388 168.612 525.773 166.279 cv
522.346 163.609 519.818 159.978 516.679 157.091 cv
515.489 156.009 514.216 154.979 512.773 154.185 cv
508.083 150.108 502.713 147.439 497.554 144.373 cv
492.865 141.703 487.564 140.843 483.054 138.029 cv
481.287 136.911 479.33 136.258 477.273 135.716 cv
474.603 135.031 471.877 134.448 469.46 133.185 cv
462.823 131.562 455.959 130.354 448.96 129.56 cv
429.054 129.623 li
422.2 130.272 415.7 131.562 409.242 133.185 cv
401.492 134.216 li
399.905 134.649 398.356 135.139 396.804 135.716 cv
431.992 135.716 li
431.919 135.355 431.878 135.015 432.023 134.654 cv
432.6 133.933 433.645 133.998 434.367 133.998 cv
435.233 134.503 436.249 134.99 436.898 135.748 cv
437.074 135.994 437.265 136.252 437.335 136.498 cv
437.444 138.843 435.75 142.62 438.492 143.81 cv
439.539 143.738 440.333 142.931 440.585 142.029 cv
440.742 137.466 li
441.585 135.716 li
442.742 133.404 li
443.644 132.935 445.088 133.213 445.304 134.404 cv
445.376 134.873 445.393 135.284 445.429 135.716 cv
450.679 135.716 li
451.041 135.175 451.364 134.455 452.085 134.31 cv
452.988 134.238 453.694 134.923 454.054 135.716 cv
454.09 135.789 454.117 135.863 454.117 135.935 cv
453.72 140.192 451.966 143.82 450.523 147.716 cv
450.018 148.005 449.944 148.507 449.367 148.435 cv
447.599 143.817 450.838 140.337 450.585 135.935 cv
450.622 135.863 450.643 135.82 450.679 135.748 cv
445.429 135.716 li
445.501 138.819 444.848 141.631 444.054 144.373 cv
442.828 145.888 444.453 148.435 442.179 149.373 cv
439.618 150.274 436.39 150.178 433.648 149.529 cv
432.867 148.654 li
432.181 144.722 432.449 140.519 432.304 136.623 cv
432.196 136.37 432.064 136.036 431.992 135.748 cv
396.804 135.716 li
388.832 138.675 381.633 143.512 374.273 147.841 cv
370.376 150.367 366.735 153.917 363.054 157.091 cv
361.936 158.065 360.829 159.007 359.71 159.873 cv
355.237 163.985 350.335 168.339 346.367 173.029 cv
345.538 174.003 344.718 175.014 343.96 176.06 cv
341.616 178.369 339.216 180.905 338.242 183.935 cv
337.556 184.765 336.944 185.574 336.367 186.404 cv
334.491 189.29 333.252 192.429 331.304 195.279 cv
330.619 196.758 330.001 198.232 329.46 199.748 cv
326.935 206.458 325.491 213.662 322.929 220.373 cv
322.713 220.733 322.473 220.952 322.148 221.06 cv
354.554 221.091 li
354.41 221.02 354.261 220.971 354.117 220.935 cv
353.395 220.43 353.901 219.477 354.117 218.935 cv
361.152 213.271 369.833 211.654 377.554 207.685 cv
382.461 206.495 386.439 202.986 391.273 201.435 cv
392.608 201.002 393.869 200.397 395.023 199.748 cv
398.234 197.908 401 195.513 404.21 193.998 cv
405.871 193.24 404.082 190.524 402.71 191.029 cv
396.686 193.302 391.238 196.97 385.429 199.748 cv
383.553 200.613 381.632 201.447 379.648 202.06 cv
372.504 204.802 365.41 207.686 358.554 211.185 cv
353.071 213.422 348.096 217.556 341.71 216.654 cv
340.917 216.185 340.321 215.354 340.898 214.56 cv
346.526 209.653 353.971 208.615 360.429 205.404 cv
362.486 204.574 367.895 202.273 373.992 199.748 cv
383.373 195.815 394.365 191.277 397.648 190.123 cv
398.586 189.257 403.676 187.631 405.335 186.404 cv
405.516 186.26 405.669 186.137 405.742 186.029 cv
405.417 184.802 402.203 185.61 399.46 186.404 cv
397.729 186.909 396.095 187.382 395.554 187.31 cv
390.467 188.356 365.245 197.571 360.554 199.591 cv
360.374 199.627 360.177 199.676 359.96 199.748 cv
354.26 201.299 348.92 204.245 342.679 204.498 cv
341.814 204.101 340.516 203.522 340.335 202.404 cv
340.227 201.357 340.47 200.505 340.867 199.748 cv
341.228 199.098 341.742 198.544 342.21 197.966 cv
344.917 197.245 347.188 195.399 349.929 194.498 cv
358.444 194.209 376.165 188.894 385.617 186.404 cv
386.483 186.151 387.239 185.991 387.96 185.81 cv
389.187 183.97 404.786 184.142 403.992 180.498 cv
403.74 179.451 373.607 184.096 370.648 184.998 cv
368.412 185.503 366.114 185.971 363.804 186.404 cv
359.331 187.234 354.718 187.846 349.992 188.279 cv
348.729 187.81 347.187 187.977 345.96 187.435 cv
346.069 187.074 346.165 186.692 346.273 186.404 cv
347.067 184.456 348.525 183.677 350.148 181.873 cv
352.06 179.636 395.073 179.944 395.867 176.373 cv
397.31 174.136 353.788 177.36 357.648 173.248 cv
357.72 173.176 357.794 173.101 357.867 173.029 cv
361.222 169.818 367.61 171.051 372.335 171.123 cv
393.804 171.841 li
397.556 171.841 400.184 172.635 404.117 171.841 cv
404.911 171.048 406.247 171.897 406.21 170.31 cv
406.21 168.362 401.231 169.698 398.742 168.435 cv
392.717 168.183 386.748 166.94 380.867 167.373 cv
375.708 167.77 370.891 166.375 365.804 166.123 cv
365.263 165.798 364.171 165.229 364.929 164.435 cv
369.475 159.745 390.848 163.866 394.96 163.685 cv
395.465 163.541 395.771 162.717 396.023 162.248 cv
395.879 161.057 382.715 159.364 378.242 157.091 cv
376.943 156.442 376.395 155.755 377.117 154.998 cv
381.049 151.029 387.95 154.133 394.335 157.091 cv
396.609 158.138 398.825 159.187 400.773 159.873 cv
404.085 161.216 li
406.719 162.912 410.032 163.182 412.773 164.841 cv
414.325 168.016 411.086 170.07 410.617 173.029 cv
410.508 173.57 410.499 174.192 410.679 174.841 cv
410.319 178.774 410.429 182.76 411.367 186.404 cv
412.414 190.336 414.468 193.874 418.148 196.435 cv
420.205 197.518 422.216 198.701 424.273 199.748 cv
426.69 200.975 429.219 202.034 431.96 202.466 cv
434.522 202.322 437.272 202.782 439.617 202.06 cv
440.988 203.106 443.251 201.569 444.117 203.373 cv
444.442 205.934 445.809 208.027 446.71 210.373 cv
445.989 214.197 447.845 217.375 447.773 221.091 cv
447.773 221.488 447.72 221.939 447.648 222.373 cv
447.251 223.563 445.998 223.433 445.023 223.685 cv
443.616 223.685 442.965 222.246 442.46 221.091 cv
442.388 220.875 442.288 220.651 442.179 220.435 cv
441.169 216.647 442.415 212.793 442.992 209.185 cv
442.811 207.814 442.043 206.27 440.492 205.873 cv
439.41 205.692 438.17 206.009 437.773 207.091 cv
437.268 209.184 436.462 212.001 438.085 213.841 cv
438.302 215.682 437.704 217.124 437.523 218.748 cv
437.704 219.469 437.804 220.298 437.804 221.091 cv
437.804 222.606 437.411 224.105 436.148 224.935 cv
435.03 224.935 433.22 225.275 432.679 223.904 cv
431.885 223.074 431.753 222.102 431.898 221.091 cv
432.042 219.973 432.499 218.847 432.679 217.873 cv
433.978 214.806 433.799 211.083 434.773 207.873 cv
434.845 206.898 434.05 206.01 433.148 205.685 cv
431.706 205.541 430.266 205.783 429.617 207.154 cv
427.994 209.318 429.297 212.258 428.648 214.748 cv
427.674 216.588 427.569 218.999 426.992 221.091 cv
426.523 222.715 425.738 224.115 423.898 224.873 cv
421.553 225.125 419.496 224.803 417.367 224.154 cv
416.898 223.757 416.949 222.842 417.273 222.373 cv
417.598 221.94 417.886 221.524 418.21 221.091 cv
412.054 221.091 li
411.766 221.488 411.526 221.877 411.273 222.31 cv
409.578 224.944 406.168 223.17 403.679 223.748 cv
402.85 223.748 403.107 222.638 403.179 222.06 cv
403.324 221.735 403.467 221.416 403.648 221.091 cv
405.236 217.953 408.252 215.901 410.742 213.123 cv
412.618 210.309 414.681 208.112 416.304 205.154 cv
417.422 204.433 418.064 203.128 417.992 201.685 cv
417.992 200.711 417.797 200.907 417.148 200.185 cv
416.679 200.077 416.259 199.892 415.898 199.748 cv
415.429 199.531 415.024 199.423 414.554 199.748 cv
414.446 199.82 414.288 199.947 414.179 200.091 cv
412.339 202.4 410.675 204.9 409.304 207.498 cv
405.877 212.26 401.408 216.654 397.367 221.091 cv
396.826 221.705 396.278 222.264 395.773 222.841 cv
391.913 224.862 386.581 224.467 382.179 223.998 cv
381.421 223.565 381.018 222.683 381.523 221.998 cv
381.993 221.709 382.429 221.38 382.898 221.091 cv
390.799 215.716 397.846 208.263 405.71 202.779 cv
407.02 200.868 408.526 200.411 409.367 199.748 cv
409.429 199.748 li
409.899 199.351 410.167 198.89 410.023 198.06 cv
408.977 196.978 407.715 196.574 407.21 197.404 cv
406.273 198.234 405.302 198.99 404.148 199.748 cv
402.921 200.578 401.548 201.42 399.96 202.466 cv
391.122 209.574 381.014 213.771 371.742 219.904 cv
370.804 220.373 369.789 220.767 368.742 221.091 cv
364.274 222.418 358.947 222.496 354.554 221.091 cv
322.148 221.091 li
321.138 221.488 319.716 220.908 318.742 221.341 cv
314.773 222.135 310.47 221.606 306.429 221.498 cv
304.589 221.461 302.764 221.344 300.96 221.091 cv
299.048 220.839 297.144 220.472 295.304 219.966 cv
294.186 218.523 293.22 217.044 293.617 215.06 cv
293.436 209.54 294.696 204.546 296.21 199.748 cv
297.618 195.31 299.242 190.986 300.179 186.404 cv
300.179 186.332 300.21 186.315 300.21 186.279 cv
301.004 181.589 302.986 177.286 304.898 173.029 cv
305.151 172.452 305.365 171.914 305.617 171.373 cv
308.25 166.466 311.136 161.673 314.492 157.091 cv
316.657 154.133 319.014 151.24 321.648 148.498 cv
324.967 144.637 327.192 139.814 331.304 136.748 cv
331.774 136.423 332.242 136.072 332.71 135.748 cv
328.054 135.748 li
332.71 135.716 li
338.808 131.423 344.63 126.451 351.304 123.529 cv
354.84 121.003 358.536 118.833 362.179 116.56 cv
363.623 115.839 365.107 115.125 366.585 114.404 cv
372.322 111.662 378.178 109.059 384.023 106.498 cv
387.306 104.405 391.343 103.687 394.554 101.341 cv
407.362 96.0381 422.035 95.2515 435.96 92.6538 cv
439.28 93.2314 441.786 91.791 444.96 91.9351 cv
445.649 91.9102 446.341 91.9106 447.023 91.9038 cv
cp
441.71 79.9351 mo
443.262 79.9351 446.046 82.4419 447.273 83.0913 cv
451.097 85.5811 459.451 85.6074 463.96 86.6538 cv
464.177 86.7261 464.179 86.9951 464.179 87.2476 cv
462.989 88.4385 455.957 86.4443 454.585 86.8413 cv
442.427 84.7852 430.087 87.4268 418.398 89.5913 cv
408.26 92.7661 397.295 94.0098 387.554 98.1226 cv
380.05 100.72 373.109 104.743 365.929 108.279 cv
361.528 109.83 357.444 112.059 353.367 114.404 cv
353.335 114.404 li
348.176 117.398 343.127 120.563 337.679 122.873 cv
332.34 126.553 327.661 130.985 323.367 135.748 cv
317.348 142.454 312.127 149.882 307.117 157.091 cv
307.085 157.091 li
305.967 158.679 304.86 160.285 303.742 161.873 cv
300.964 165.3 298.986 169.061 297.398 173.029 cv
295.63 177.358 294.358 181.894 293.023 186.404 cv
292.518 188.027 292.064 189.634 291.523 191.185 cv
291.054 194.107 290.444 196.897 289.867 199.748 cv
288.893 204.221 287.93 208.745 287.46 213.435 cv
286.956 215.96 286.465 218.53 285.96 221.091 cv
285.275 224.808 284.588 228.568 283.867 232.248 cv
282.496 233.113 281.269 231.467 279.898 230.998 cv
278.599 229.627 277.084 227.773 274.992 228.748 cv
273.621 229.072 272.175 229.396 271.273 230.623 cv
270.732 230.767 270.23 230.445 270.085 229.904 cv
270.194 226.91 270.47 223.978 270.867 221.091 cv
271.661 215.427 272.908 209.912 273.773 204.248 cv
274.207 202.769 274.574 201.227 274.898 199.748 cv
275.511 196.97 276.04 194.177 276.617 191.435 cv
278.492 186.404 li
281.117 179.466 li
282.379 177.374 283.503 175.193 284.585 173.029 cv
287.219 167.581 289.569 161.998 293.429 157.091 cv
293.863 156.478 294.331 155.883 294.835 155.341 cv
298.516 148.739 304.237 143.331 308.242 136.873 cv
308.603 136.476 308.949 136.113 309.273 135.716 cv
314.757 129.475 321.571 124.268 326.585 117.81 cv
328.101 116.8 329.581 115.631 331.023 114.404 cv
332.25 113.394 333.426 112.352 334.617 111.341 cv
349.929 99.3726 li
355.088 95.9092 360.645 93.3047 365.804 89.8413 cv
369.99 87.749 374.672 86.8306 378.929 84.8101 cv
380.553 84.4131 382.724 84.2637 384.023 85.3101 cv
387.631 90.2168 392.976 94.7534 399.398 93.3101 cv
403.186 92.1919 407.207 91.2832 410.273 88.2163 cv
411.248 87.2783 414.683 84.2285 416.054 83.9038 cv
417.823 83.7236 420.494 85.7256 422.117 86.1226 cv
427.348 85.7256 429.105 86.5591 433.867 84.4663 cv
436.717 83.0234 439.293 82.1719 441.71 79.9351 cv
cp
427.617 59.5288 mo
428.082 59.4897 428.574 59.5498 429.054 59.6851 cv
429.773 60.4663 li
430.026 61.9458 430.047 64.4683 428.929 65.6226 cv
427.487 66.7412 424.784 66.354 422.835 65.5601 cv
422.186 64.9106 422.427 63.7241 422.679 62.9663 cv
423.793 61.354 425.605 59.6987 427.617 59.5288 cv
cp
410.585 59.2788 mo
412.792 59.2554 418.173 61.3882 418.804 62.9663 cv
418.804 65.3115 418.397 68.1606 420.742 69.2788 cv
422.185 69.748 423.811 67.8213 424.46 69.8413 cv
424.569 70.8516 423.812 71.3867 423.054 71.7476 cv
422.802 71.856 422.526 71.9834 422.273 72.0913 cv
421.01 72.5967 419.766 72.0361 418.648 71.7476 cv
417.89 71.5313 417.256 71.4229 416.679 71.7476 cv
416.21 72 415.817 72.4756 415.492 73.3413 cv
415.095 78.5005 410.61 83.9868 405.523 85.9351 cv
402.709 86.3682 399.063 87.6406 396.429 85.8726 cv
394.481 83.9604 393.758 81.355 394.335 78.6851 cv
394.733 75.7266 397.938 75.2891 400.21 74.7476 cv
401.221 74.6396 402.768 74.4419 403.273 75.5601 cv
404.139 79.2041 396.307 79.4092 400.492 82.8726 cv
403.992 83.125 406.719 80.6436 408.992 78.1538 cv
410.182 76.4224 410.997 74.165 411.429 71.7476 cv
412.151 67.6709 411.748 63.1152 409.835 59.4351 cv
409.999 59.3359 410.271 59.2822 410.585 59.2788 cv
cp
482.429 55.7788 mo
482.617 56.0913 li
482.617 56.4351 li
478.577 59.1772 474.295 61.5503 473.898 66.5288 cv
473.79 68.2246 473.878 69.98 474.023 71.7476 cv
474.528 76.1494 475.837 80.623 477.46 84.1226 cv
478.507 84.9165 479.709 85.8921 481.117 85.2788 cv
481.658 85.0264 482.283 85.0317 482.679 84.3101 cv
482.355 81.9648 481.238 79.9434 480.335 77.7788 cv
480.335 77.1294 481.09 76.9448 481.523 76.8726 cv
484.048 76.6924 485.584 78.7236 487.929 78.9038 cv
488.218 79.1206 488.09 81.54 487.585 83.0913 cv
487.513 84.5347 485.192 84.7856 484.398 85.9038 cv
483.569 86.9502 482.541 87.2788 481.242 87.2788 cv
476.552 86.8818 473.491 83.0264 470.929 79.3101 cv
468.773 71.7476 li
468.554 71.0601 li
467.003 69.5449 464.623 70.6782 462.71 70.0288 cv
461.16 69.4517 459.074 69.3208 458.46 67.3726 cv
458.208 66.1821 457.839 64.4355 459.21 63.9663 cv
460.398 62.9663 li
460.542 62.2451 462.206 62.2383 463.179 62.3101 cv
465.453 62.1299 465.94 65.7817 468.429 65.0601 cv
471.244 65.2769 471.93 60.6377 474.023 59.5913 cv
478.605 55.9478 479.616 57.1499 482.429 55.7788 cv
cp
464.398 37.5288 mo
466.969 37.4658 469.173 37.6689 469.804 38.3726 cv
471.031 39.8159 468.883 39.6924 465.492 39.8726 cv
462.136 40.0532 452.047 43.7241 451.867 55.8101 cv
451.758 63.6392 453.709 68.6089 455.585 71.7476 cv
456.596 73.4434 457.624 74.6152 458.273 75.3726 cv
460.042 77.5015 463.511 81.9189 459.867 80.8726 cv
454.816 79.3936 449.397 75.144 446.367 71.7163 cv
444.924 70.0928 443.97 68.6089 443.898 67.7788 cv
443.826 68.6089 442.746 70.0879 441.085 71.7476 cv
437.659 75.2109 431.785 79.5737 427.96 80.8726 cv
424.389 82.0635 428.469 76.7515 430.273 74.6226 cv
430.844 73.98 431.579 73.0259 432.398 71.7476 cv
432.429 71.7476 li
432.434 71.7397 432.424 71.7246 432.429 71.7163 cv
434.193 68.8281 436.069 64.0869 435.96 55.8101 cv
435.78 43.7241 427.852 40.9907 424.46 40.8101 cv
421.105 40.6299 418.734 40.5034 419.96 39.0601 cv
421.223 37.6533 426.879 37.4707 430.992 38.3726 cv
435.069 39.2383 443.898 46.9976 443.898 46.9976 cv
443.898 46.9976 452.754 39.2383 456.867 38.3726 cv
458.906 37.9219 461.828 37.5918 464.398 37.5288 cv
cp
277.835 285.091 mo
275.779 278.02 274.101 270.85 272.117 263.779 cv
265.679 263.716 li
266.762 271.04 268.325 278.133 270.273 285.06 cv
277.835 285.091 li
cp
549.71 114.404 mo
552.741 117.398 555.704 120.537 559.023 123.279 cv
563.569 126.887 567.256 131.17 570.648 135.716 cv
576.929 135.716 li
574.223 133.047 572.587 129.595 569.304 126.998 cv
565.913 122.452 561.838 118.368 557.617 114.435 cv
549.71 114.404 li
cp
425.023 32.4351 mo
420.189 32.3486 415.892 35.1431 413.429 39.3101 cv
412.708 41.9438 410.94 45.8521 413.429 48.3413 cv
414.295 49.5322 415.683 49.8535 417.054 49.5288 cv
419.039 49.3125 419.561 47.0322 420.679 45.8413 cv
421.473 45.0117 422.696 45.1973 423.742 45.3413 cv
425.654 45.8467 427.712 47.6167 428.398 49.5288 cv
429.3 52.1987 427.188 54.2925 425.492 56.0601 cv
423.977 57.4312 421.476 57.291 419.492 56.9663 cv
412.782 52.9258 405.521 46.7095 396.898 50.4976 cv
393.291 52.2656 388.679 55.9185 388.679 60.2476 cv
390.555 63.3145 393.418 60.1758 395.835 60.2476 cv
399.804 59.8506 403.56 60.5752 406.085 63.4976 cv
406.879 65.7344 405.782 68.0859 404.085 69.5288 cv
401.668 70.6475 399.037 71.2427 396.367 71.7476 cv
393.264 72.2891 390.071 72.7207 387.148 73.6226 cv
382.314 74.5967 378.069 77.0425 373.523 78.8101 cv
365.153 83.3198 355.878 85.5908 348.085 91.4351 cv
342.602 94.9346 337.695 99.8228 332.21 103.466 cv
327.845 107.11 322.96 110.219 318.992 114.404 cv
318.415 114.981 317.872 115.629 317.367 116.279 cv
314.228 120.464 310.79 123.832 306.929 127.404 cv
305.017 130.362 301.371 132.573 299.71 135.748 cv
299.672 135.846 299.585 135.963 299.585 136.029 cv
297.06 140.791 292.88 144.719 290.21 149.373 cv
288.371 151.934 286.657 154.489 284.96 157.123 cv
281.683 162.275 278.702 167.553 276.179 173.029 cv
274.195 177.358 272.435 181.822 270.992 186.404 cv
270.956 186.584 270.876 186.817 270.804 186.998 cv
270.011 191.363 268.439 195.418 267.429 199.748 cv
266.852 202.309 266.451 204.96 266.523 207.81 cv
264.467 210.769 264.67 214.724 264.273 218.404 cv
264.021 219.27 263.797 220.189 263.617 221.091 cv
262.715 225.565 262.62 230.433 262.367 235.123 cv
262.654 237.494 262.79 239.93 262.898 242.373 cv
262.898 242.383 262.898 242.394 262.898 242.404 cv
263.149 249.321 263.042 256.335 265.492 262.279 cv
265.528 262.748 265.607 263.248 265.679 263.716 cv
272.117 263.716 li
271.865 262.742 271.562 261.82 271.273 260.81 cv
270.876 259.115 270.15 256.681 271.773 255.31 cv
274.01 253.939 275.918 259.287 278.335 257.123 cv
279.887 254.958 283.686 252.1 284.335 254.841 cv
285.093 257.944 286.215 261.227 286.648 263.716 cv
286.829 264.727 286.886 265.593 286.742 266.279 cv
286.02 269.093 289.761 276.552 290.085 279.185 cv
291.648 285.091 li
294.085 294.185 li
296.214 301.04 299.591 307.393 301.648 314.248 cv
305.292 324.71 313.517 333.319 319.867 342.591 cv
325.026 350.24 332.693 356.706 339.367 363.561 cv
342.469 365.797 345.514 368.131 348.617 370.404 cv
356.013 375.815 363.641 380.756 372.335 383.029 cv
381.21 386.348 390.626 388.184 399.898 390.529 cv
411.804 393.198 424.682 393.691 437.273 394.811 cv
437.585 395.186 li
433.725 396.664 433.666 403.903 428.398 401.342 cv
423.023 399.573 419.108 397.371 413.804 395.279 cv
411.279 395.459 406.713 393.854 405.523 396.561 cv
404.874 398.111 404.227 399.886 404.804 401.654 cv
405.202 402.447 406.158 402.885 407.023 402.561 cv
407.925 401.189 409.974 402.146 411.273 402.436 cv
411.814 402.76 411.875 403.733 411.585 404.311 cv
407.437 407.124 402.386 404.582 397.804 404.654 cv
391.671 402.706 385 402.242 379.335 399.248 cv
375.547 398.058 372.008 396.274 368.148 395.373 cv
359.814 390.936 351.299 387.166 343.398 381.936 cv
338.059 378.688 332.69 374.806 327.71 370.404 cv
322.155 365.461 317.087 359.85 313.335 353.716 cv
303.451 341.486 295.832 328.333 289.554 314.623 cv
288.04 309.86 284.991 305.604 283.367 300.841 cv
281.13 295.754 279.387 290.467 277.835 285.091 cv
270.273 285.091 li
272.366 292.668 274.928 300.106 277.742 307.466 cv
281.386 313.275 282.569 320.117 285.96 325.998 cv
295.413 341.15 304.733 356.189 316.242 370.404 cv
316.314 370.477 316.362 370.551 316.398 370.623 cv
321.557 377.333 328.808 380.887 334.617 386.623 cv
343.167 392.251 352.191 396.811 361.21 401.248 cv
366.442 403.81 372.015 405.458 377.679 407.154 cv
384.967 410.798 393.833 410.606 401.554 413.061 cv
427.21 413.092 li
423.748 409.556 419.086 406.165 417.21 404.217 cv
417.283 403.17 417.929 403.176 418.867 402.779 cv
422.908 402.779 432.858 408.968 435.96 405.686 cv
436.935 404.783 437.696 402.767 439.21 403.092 cv
441.375 406.808 446.011 405.592 449.367 405.123 cv
450.846 404.979 453.857 403.265 455.335 402.904 cv
455.588 403.265 455.932 403.757 455.679 404.154 cv
452.793 405.958 449.871 409.339 447.742 413.092 cv
445.902 416.374 444.622 419.919 444.585 422.842 cv
445.055 427.063 446.512 430.868 448.46 434.404 cv
450.625 438.372 453.358 441.96 455.992 445.279 cv
456.461 446.001 458.079 446.379 457.429 447.498 cv
455.481 448.147 451.553 444.919 449.929 443.873 cv
445.347 441.563 441.037 435.32 433.929 439.217 cv
432.342 440.118 431.33 440.732 429.742 441.779 cv
428.84 442.32 424.958 445.801 423.804 445.404 cv
427.21 439.436 li
427.644 437.739 428.285 436.063 428.898 434.404 cv
429.873 431.807 430.881 429.259 431.242 426.373 cv
431.639 423.559 432.461 420.187 430.585 417.373 cv
429.864 415.966 428.654 414.534 427.21 413.092 cv
401.554 413.092 li
401.663 413.092 401.753 413.181 401.898 413.217 cv
406.876 413.83 412.641 413.499 417.367 414.654 cv
419.712 416.818 423.282 416.996 424.617 420.279 cv
425.302 421.83 425.434 423.9 424.929 425.561 cv
423.992 428.482 423.3 431.481 422.398 434.404 cv
421.352 437.723 420.046 440.965 417.773 443.779 cv
415.356 446.918 411.799 448.305 408.335 449.279 cv
403.285 450.794 401.465 447.053 397.46 451.311 cv
397.028 452.284 397.614 453.14 398.335 453.717 cv
402.629 455.736 404.003 455.082 409.054 455.154 cv
412.301 455.731 415.975 455.551 419.367 455.623 cv
422.433 454.18 425.914 453.955 428.835 452.404 cv
431.902 451.249 436.545 447.101 440.117 447.498 cv
449.835 452.467 li
459.252 455.101 463.384 454.426 470.492 454.029 cv
473.378 453.668 475.472 451.228 477.023 448.811 cv
477.167 447.691 477.668 445.957 476.585 445.092 cv
475.323 443.648 473.772 445.238 472.148 444.842 cv
466.989 443.723 461.372 443.315 457.835 438.373 cv
456.79 437.146 455.769 435.811 454.867 434.404 cv
451.945 429.822 450.289 424.431 452.273 419.092 cv
453.969 416.169 457.509 416.151 460.648 415.936 cv
464.761 414.744 469.105 413.957 473.398 413.092 cv
480.253 411.648 487.109 410.12 493.242 406.873 cv
501.684 404.636 509.404 400.689 517.304 397.154 cv
524.16 393.113 530.993 389.173 537.523 384.592 cv
543.08 380.623 547.934 375.527 552.804 370.404 cv
556.124 366.904 559.399 363.423 562.898 360.248 cv
566.109 356.063 569.416 351.789 573.023 347.748 cv
578.435 340.496 583.781 333.002 587.46 325.029 cv
590.13 320.447 592.796 315.863 594.96 311.029 cv
599.723 303.056 602.361 294.111 604.742 285.091 cv
598.398 285.091 li
597.712 287.003 597.047 288.96 596.398 290.873 cv
592.286 301.371 588.198 311.829 581.992 321.498 cv
576.76 332.141 569.499 341.889 562.679 351.81 cv
558.061 357.763 551.586 362.257 546.679 367.561 cv
545.85 368.57 545.045 369.502 544.179 370.404 cv
537.614 377.078 529.451 380.79 522.054 385.842 cv
511.339 391.975 500.385 397.541 488.804 401.654 cv
482.13 405.226 474.287 406.016 467.179 408.686 cv
465.412 408.901 463.31 408.991 462.335 407.404 cv
461.975 406.574 461.587 405.447 462.273 404.654 cv
464.438 402.886 468.037 403.201 469.335 399.811 cv
469.588 397.609 467.792 397.118 466.023 396.217 cv
462.776 395.098 459.578 396.923 456.367 397.248 cv
452.651 398.475 449.434 400.212 444.96 398.842 cv
443.553 397.867 442.293 396.891 441.21 395.592 cv
441.304 394.967 li
444.696 395.58 447.983 394.395 451.554 394.467 cv
457.724 394.899 463.147 392.569 469.46 392.967 cv
479.598 392.39 488.835 389.76 497.242 384.998 cv
506.009 381.102 514.56 376.604 522.46 370.436 cv
522.479 370.436 522.497 370.417 522.523 370.404 cv
522.585 370.404 li
527.276 367.481 531.499 363.459 536.117 360.248 cv
545.498 349.46 558.053 340.418 565.304 328.404 cv
573.206 318.338 578.451 307.122 582.96 295.685 cv
584.8 292.33 586.066 288.74 587.148 285.06 cv
588.731 279.802 589.917 274.477 591.898 269.435 cv
592.764 268.822 593.444 266.206 593.804 263.716 cv
594.166 261.696 594.362 259.75 594.398 259.029 cv
594.47 258.055 594.405 257.01 595.054 256.216 cv
596.57 255.495 598.109 257.308 599.804 257.56 cv
601.464 257.777 603.328 256.447 604.554 257.06 cv
605.447 258.381 603.855 261.69 603.367 263.716 cv
603.362 263.737 603.34 263.758 603.335 263.779 cv
603.244 264.073 603.179 264.327 603.179 264.529 cv
602.494 271.745 600.563 278.458 598.398 285.06 cv
604.742 285.091 li
605.067 283.901 605.391 282.72 605.679 281.529 cv
607.05 275.72 607.987 269.732 608.96 263.779 cv
606.148 263.748 li
608.96 263.716 li
609.465 260.614 609.972 257.533 610.585 254.466 cv
611.776 250.606 611.811 246.558 611.992 242.373 cv
612.028 241.038 612.102 239.712 612.21 238.341 cv
611.995 232.543 611.603 226.782 610.992 221.091 cv
610.342 215.211 609.42 209.47 608.085 203.841 cv
607.761 202.471 607.447 201.083 607.085 199.748 cv
605.823 195.166 604.198 190.77 602.429 186.404 cv
600.662 181.93 598.755 177.539 597.023 173.029 cv
596.771 172.344 596.495 171.652 596.242 170.966 cv
593.211 166.709 591.801 161.746 589.492 157.091 cv
589.204 156.442 588.884 155.798 588.523 155.185 cv
586.755 152.299 586.803 148.511 584.242 145.841 cv
583.448 142.522 580.539 139.937 578.554 137.123 cv
577.941 136.69 577.434 136.217 576.929 135.748 cv
570.648 135.716 li
573.715 139.865 576.459 144.214 579.273 148.435 cv
580.572 151.321 582.022 154.205 583.429 157.091 cv
584.548 159.328 585.612 161.559 586.585 163.904 cv
588.461 166.826 590.022 169.89 591.429 173.029 cv
593.269 177.142 594.902 181.354 596.742 185.466 cv
596.85 185.755 596.946 186.079 597.054 186.404 cv
598.425 190.77 599.717 195.238 600.835 199.748 cv
601.954 204.33 602.936 209.043 603.585 213.841 cv
604.019 215.753 604.408 218.313 604.804 221.091 cv
605.779 228.307 606.367 236.623 606.367 236.623 cv
606.367 236.623 603.959 234.692 602.335 234.873 cv
600.64 235.053 596.547 237.291 596.367 236.966 cv
596.439 232.854 596.197 228.507 595.367 224.466 cv
594.898 223.42 594.725 222.282 594.617 221.091 cv
594.401 219.251 594.353 217.33 593.523 215.779 cv
592.116 210.403 590.746 205.015 589.085 199.748 cv
587.678 195.166 586.048 190.697 583.992 186.404 cv
583.776 185.971 583.579 185.587 583.398 185.154 cv
581.994 180.869 579.55 177.025 577.46 173.029 cv
577.457 173.021 577.465 173.006 577.46 172.998 cv
577.358 172.792 577.252 172.612 577.148 172.404 cv
575.417 167.064 572.883 161.962 569.96 157.091 cv
569.564 156.406 569.144 155.714 568.71 155.029 cv
566.293 152.431 564.92 149.482 563.117 146.56 cv
559.797 143.097 557.438 139.247 554.335 135.748 cv
548.117 135.748 li
554.335 135.716 li
553.758 135.103 553.199 134.513 552.585 133.935 cv
548.833 131.59 546.355 127.15 542.242 125.31 cv
537.335 122.315 533.083 117.831 528.429 114.404 cv
526.445 112.961 524.354 111.712 522.117 110.81 cv
514.216 106.589 506.109 102.964 498.46 98.3101 cv
493.77 96.1094 488.94 94.5034 483.96 93.0601 cv
483.383 92.6631 482.992 91.9189 483.46 91.3413 cv
485.3 90.0786 487.683 89.9165 489.523 88.6538 cv
491.363 86.5254 493.912 85.1338 495.21 82.7163 cv
502.137 85.6387 508.787 89.1758 515.46 92.7476 cv
523.903 96.0308 532.034 100.283 539.429 106.091 cv
543.253 108.292 546.536 111.265 549.71 114.404 cv
557.617 114.404 li
554.623 111.662 551.553 108.985 548.523 106.279 cv
544.843 104.475 541.855 100.872 538.21 98.7788 cv
533.809 97.3359 530.177 94.0347 525.992 92.1226 cv
519.895 88.8037 514.012 85.1528 507.554 82.5913 cv
505.642 81.4009 503.373 80.9575 501.46 79.6226 cv
496.842 77.5664 492.659 74.6787 487.679 73.5601 cv
485.082 72.7305 482.239 74.3687 479.929 72.9976 cv
479.785 72.6006 479.684 72.1445 479.648 71.7476 cv
479.251 68.6089 481.415 65.9297 481.992 62.9351 cv
484.589 58.606 490.238 61.3979 493.773 58.8726 cv
495 57.8623 494.886 55.9839 494.742 54.6851 cv
492.325 51.6187 489.403 49.1489 485.398 49.6538 cv
479.265 50.5918 474.223 53.7598 469.46 57.8726 cv
466.683 60.1094 464.193 56.9092 461.523 56.4038 cv
459.214 55.7544 457.646 53.1865 457.429 50.8413 cv
457.429 48.2798 460.188 46.6597 461.992 45.2163 cv
465.888 41.8975 471.376 43.377 475.742 44.7476 cv
477.33 44.459 478.605 42.6689 478.929 41.1538 cv
479.254 39.2056 478.865 37.1162 477.71 35.5288 cv
475.979 34.4824 474.116 33.6035 472.023 33.2788 cv
465.168 32.7378 457.423 31.8154 451.867 35.7476 cv
449.053 37.1187 447.126 40.9111 443.554 40.6226 cv
440.199 37.9531 436.143 37.2393 432.679 34.9663 cv
427.117 32.6538 li
426.409 32.5186 425.713 32.4478 425.023 32.4351 cv
cp
f
654.062 272.641 mo
653.232 274.589 653.954 276.754 653.413 278.774 cv
652.258 284.655 651.645 290.716 649.227 296.091 cv
645.583 310.198 641.074 323.908 635.337 337.184 cv
632.054 343.57 628.447 349.739 624.406 355.8 cv
619.247 364.099 613.222 372.071 607.377 379.973 cv
605.393 383.111 602.146 384.879 599.729 387.621 cv
596.337 394.801 588.725 399.238 582.989 404.47 cv
576.458 412.046 568.088 415.438 560.836 421.462 cv
552.611 428.39 542.545 431.131 533.85 436.759 cv
529.485 439.429 524.579 440.62 520.465 443.614 cv
516.822 444.588 513.754 446.753 510.039 447.475 cv
500.009 450.794 489.042 452.021 478.327 453.68 cv
472.374 455.376 466.493 457.396 459.783 457.396 cv
454.659 457.973 449.175 458.334 444.161 458.622 cv
440.047 458.911 435.863 460.282 431.75 459.02 cv
427.493 457.54 422.549 458.442 417.968 458.622 cv
408.696 458.911 399.459 458.117 391.306 455.159 cv
384.307 453.535 377.849 450.722 370.526 449.747 cv
362.227 445.959 353.136 444.083 344.91 440.006 cv
334.014 435.568 323.227 430.734 313.703 422.833 cv
308.075 418.144 301.4 415.329 295.917 409.917 cv
288.592 404.47 280.439 398.336 275.604 390.363 cv
272.069 387.874 269.796 383.978 267.704 380.55 cv
266.91 378.782 264.564 379.251 264.167 377.303 cv
260.235 370.123 255.22 363.449 251.107 356.342 cv
248.943 354.826 248.943 352.192 247.428 350.244 cv
242.737 341.946 238.083 333.721 235.341 324.701 cv
232.6 319.542 231.481 313.842 228.883 308.683 cv
227.513 303.668 226.214 298.689 225.672 293.35 cv
225.42 291.004 223.472 289.417 222.75 287.252 cv
220.513 277.403 220.188 267.157 218.709 257.019 cv
218.168 252.689 216.87 248.18 217.122 243.49 cv
216.473 237.284 216.545 230.935 217.844 224.874 cv
217.771 215.926 221.704 208.35 222.75 199.763 cv
225.095 190.78 226.719 181.544 231.048 173.391 cv
230.976 170.18 233.538 168.015 233.718 164.84 cv
237.831 156.578 239.923 147.378 244.758 139.333 cv
247.644 131.576 253.85 125.298 256.447 117.397 cv
259.009 111.444 263.951 106.61 267.378 101.054 cv
271.094 97.1216 274.667 92.4316 279.249 89.6895 cv
281.882 87.6689 284.299 85.1797 286.5 82.835 cv
294.618 77.9282 301.292 70.0273 309.625 65.4453 cv
313.486 63.894 316.3 59.8169 320.233 58.5903 cv
325.789 54.73 331.778 52.0605 337.623 49.0659 cv
346.353 45.7827 353.929 39.7578 363.274 38.1343 cv
370.201 36.4385 377.055 34.8149 384.126 33.6968 cv
388.42 32.3979 393.146 31.9287 397.368 30.3774 cv
403.717 29.6558 410.067 28.5376 416.453 27.8159 cv
425.4 26.1924 434.888 26.0479 444.341 25.6514 cv
451.015 26.1924 457.618 26.0479 464.148 26.9141 cv
475.981 28.9346 li
479.877 28.1406 483.341 29.5117 486.949 29.728 cv
498.458 30.9546 509.173 34.2378 519.275 39.0361 cv
525.047 42.2471 531.18 44.5923 537.133 47.5508 cv
549.544 51.916 560.44 60.1055 570.974 69.0527 cv
575.232 73.4907 579.994 77.5313 584.684 81.2471 cv
593.92 90.2666 602.795 99.2861 611.454 108.559 cv
614.485 112.888 617.731 117.145 620.365 121.655 cv
625.2 128.438 630.395 135.364 633.75 142.868 cv
641.074 155.748 645.115 170.035 648.903 184.358 cv
656.046 202.866 655.974 224.08 656.371 244.861 cv
654.856 253.808 654.386 263.225 654.062 272.641 cv
662.973 226.425 mo
662 221.158 662.107 215.349 661.421 210.118 cv
659.113 191.357 655.144 173.318 648.145 156.542 cv
647.171 152.537 645.331 148.966 643.058 145.574 cv
641.94 141.786 639.523 138.647 637.611 135.256 cv
637.105 133.993 li
628.085 121.979 622.674 108.45 611.743 97.4102 cv
600.198 85.7212 588.833 72.1919 575.16 63.2446 cv
566.356 55.4517 556.94 49.3906 547.271 43.7622 cv
541.932 41.3452 537.061 38.2065 531.866 35.4282 cv
526.634 33.0112 521.151 31.0991 515.703 29.0063 cv
506.576 25.0381 495.788 25.0381 486.444 21.5742 cv
480.13 20.853 473.708 20.7085 467.502 19.8066 cv
457.654 19.1572 447.732 18.7603 438.171 19.0127 cv
430.812 17.6421 422.947 18.2915 416.165 20.3838 cv
411.655 20.4561 407.542 21.7549 403.104 22.0073 cv
395.6 21.7549 389.575 24.9658 382.576 25.7593 cv
380.05 26.3369 378.138 28.2852 375.468 28.1768 cv
369.913 30.7744 363.779 31.6763 357.826 33.2637 cv
353.064 33.9854 349.276 37.124 344.694 38.3506 cv
341.699 41.8862 336.937 41.3452 333.798 44.5562 cv
321.315 49.9316 310.528 59.6367 298.117 65.2646 cv
288.051 73.8877 276.038 80.2373 268.389 91.4214 cv
264.457 95.1733 261.931 99.7554 258.323 103.616 cv
255.076 107.404 253.958 111.914 250.963 115.774 cv
248.871 121.655 243.82 126.309 241.944 132.226 cv
240.176 134.174 240.284 136.879 238.264 138.755 cv
236.496 143.337 233.826 147.522 231.806 151.96 cv
231.012 155.748 228.487 158.707 227.765 162.423 cv
225.276 167.185 223.255 172.2 222.317 177.647 cv
219.972 180.895 219.467 184.827 218.601 188.688 cv
216.4 199.331 212.721 209.504 212.071 220.688 cv
209.798 229.239 211.747 237.934 211.169 246.881 cv
209.582 249.623 211.747 252.365 210.845 255.323 cv
212.54 260.085 212.144 265.642 212.792 270.801 cv
213.514 271.955 li
214.633 276.537 215.21 281.263 216.076 286.026 cv
217.302 294.396 220.261 302.081 222.606 310.054 cv
226.646 319.001 228.739 328.742 232.6 337.761 cv
235.45 342.92 237.217 348.404 240.753 353.311 cv
245.335 362.728 251.938 371.458 257.205 380.73 cv
264.204 389.173 272.177 397.471 280.222 405.047 cv
291.118 416.23 303.276 424.385 315.832 431.708 cv
326.258 439.032 337.911 443.146 349.131 448.701 cv
356.058 451.118 362.84 453.86 369.84 456.024 cv
376.045 456.854 380.952 460.787 387.374 461.147 cv
392.172 461.147 395.78 463.854 400.434 463.854 cv
417.283 465.622 434.78 466.523 451.773 464.684 cv
460.107 463.781 468.585 463.313 476.667 461.941 cv
491.675 460.318 505.637 456.205 519.058 450.794 cv
526.166 446.392 534.067 443.65 541.788 440.728 cv
554.09 434.198 566.826 428.317 577.973 418.828 cv
584.251 414.86 589.735 409.376 595.869 404.722 cv
602.11 396.424 610.263 389.101 616.866 380.73 cv
617.371 378.782 618.561 377.086 619.715 375.318 cv
625.272 368.86 629.457 361.789 634.364 355.007 cv
636.636 350.1 640.822 345.987 641.615 340.431 cv
643.635 336.318 651.752 313.77 654.315 307.059 cv
656.407 297.065 659.582 287.974 660.628 277.583 cv
661.206 267.734 663.442 258.318 662.901 248.252 cv
662.396 241 663.37 233.749 662.973 226.425 cv
cp
f
483.776 232.017 mo
484.497 233.46 483.126 233.424 483.378 234.939 cv
483.559 236.094 483.992 237.934 482.584 238.475 cv
479.843 239.052 480.637 234.615 477.714 235.805 cv
473.637 236.563 li
473.313 241.542 473.494 248.288 472.772 253.123 cv
472.917 255.143 475.406 254.205 475.658 256.225 cv
475.658 257.271 475.622 258.606 474.54 258.679 cv
473.205 258.787 472.338 259.184 471.365 258.534 cv
468.875 259.256 465.665 259.689 463.067 258.462 cv
462.273 257.813 462.165 256.694 462.49 255.829 cv
463.536 254.385 465.809 254.71 465.881 252.762 cv
465.809 247.675 467.108 241.217 465.881 236.491 cv
464.979 235.192 462.454 235.336 461.587 235.661 cv
459.567 236.058 460.542 240.171 458.629 239.702 cv
457.583 238.331 li
457.186 232.414 li
457.835 231.837 li
465.339 231.837 473.313 232.342 480.565 231.44 cv
481.611 231.512 482.982 231.115 483.776 232.017 cv
f
554.162 233.063 mo
554.162 235.156 554.595 237.573 553.837 239.449 cv
553.007 240.063 551.781 239.521 550.699 239.521 cv
550.085 239.089 551.204 237.177 550.771 236.708 cv
549.977 235.336 548.606 234.218 547.09 234.291 cv
546.225 234.435 542.978 236.203 542.87 237.104 cv
542.978 242.877 552.394 241.723 554.811 246.196 cv
557.012 250.201 556.002 253.303 553.512 256.045 cv
550.266 259.076 544.168 259.076 540.38 257.236 cv
538.107 257.164 535.762 259.725 533.886 257.488 cv
536.051 254.097 li
537.422 252.004 536.989 250.886 538.901 249.263 cv
539.659 249.335 li
540.668 253.231 541.535 254.999 545.72 255.107 cv
548.498 255.18 550.266 254.674 550.663 253.303 cv
551.312 252.401 550.843 251.283 550.663 250.381 cv
547.92 246.521 539.37 247.062 537.422 242.625 cv
536.556 239.485 536.267 235.336 539.009 233.063 cv
542.401 230.827 549.688 229.781 553.548 231.945 cv
554.162 233.063 li
f
369.192 232.306 mo
370.238 234.146 369.841 236.924 369.588 239.017 cv
369.192 240.135 367.821 240.063 366.775 239.883 cv
365.006 239.341 366.053 237.141 364.177 236.924 cv
362.734 236.6 360.822 236.419 359.704 237.538 cv
358.946 238.259 358.729 240.856 358.874 241.831 cv
359.595 243.129 362.517 242.444 363.6 242.949 cv
365.295 244.537 364.682 244.5 364.177 246.81 cv
363.78 249.01 361.291 246.81 359.451 247.207 cv
358.296 248.577 358.657 253.375 359.378 254.747 cv
362.265 255.541 366.125 254.35 367.497 253.195 cv
368.903 252.005 369.228 250.201 370.708 249.732 cv
371.609 249.732 372.655 250.129 372.727 251.103 cv
371.753 253.34 372.403 256.839 370.057 258.354 cv
363.924 260.844 356.059 258.246 349.277 258.896 cv
348.086 258.499 348.231 257.38 348.411 256.406 cv
353.318 251.896 351.37 242.769 351.549 236.636 cv
351.37 235.012 348.772 233.677 349.637 232.126 cv
350.467 231.657 li
354.724 231.332 360.569 232.234 364.827 231.657 cv
366.377 231.584 367.965 231.657 369.192 232.306 cv
f
443.114 233.352 mo
443.257 234.218 443.257 235.12 442.789 235.841 cv
441.598 236.238 440.299 236.888 439.433 238.114 cv
439.974 242.84 439.542 247.963 439.469 252.545 cv
440.372 253.772 442.428 253.447 442.752 255.215 cv
443.438 256.767 443.114 257.993 441.995 258.715 cv
439.722 259.761 435.285 258.498 432.651 258.643 cv
431.099 259.436 429.115 258.967 427.528 258.318 cv
426.445 257.452 426.374 256.767 427.023 255.468 cv
427.816 253.447 430.594 254.674 431.316 252.473 cv
433.011 248.433 431.64 241.542 432.217 237.104 cv
431.64 235.264 429.332 236.815 428.141 235.264 cv
427.564 234.65 426.301 232.053 427.311 232.053 cv
432.038 232.053 436.763 231.332 441.815 231.873 cv
442.5 232.053 442.897 232.774 443.114 233.352 cv
f
321.891 232.738 mo
322.036 233.785 321.386 233.82 320.34 234.146 cv
319.691 234.073 319.15 234.542 318.825 234.939 cv
319.15 238.15 320.196 242.335 322.289 244.824 cv
323.515 245.149 324.309 243.85 324.778 243.057 cv
331.2 233.785 li
328.71 232.522 330.045 231.042 330.045 231.042 cv
332.715 230.646 337.044 230.393 339.065 231.042 cv
339.714 231.367 342.167 230.357 341.518 232.27 cv
341.013 233.929 338.957 233.532 337.875 235.119 cv
332.967 242.083 328.313 250.813 324.381 257.271 cv
323.083 257.163 321.386 257.596 320.99 256.225 cv
320.881 253.555 li
312.62 235.661 li
311.97 234.939 310.744 235.444 310.022 234.867 cv
308.976 233.965 309.156 233.712 309.409 232.414 cv
310.527 230.898 312.692 231.367 314.315 230.79 cv
316.949 231.115 320.773 229.816 321.891 232.738 cv
f
511.374 248.107 mo
510.219 249.082 505.89 248.937 504.23 248.829 cv
502.174 248.36 506.214 243.381 505.637 242.046 cv
505.999 240.784 505.782 238.619 507.333 238.294 cv
508.704 238.294 508.488 240.603 508.884 242.046 cv
509.498 243.381 511.663 246.736 511.374 248.107 cv
522.125 253.375 mo
518.409 246.52 514.152 239.99 511.482 232.738 cv
511.013 231.764 510.147 230.646 508.993 230.646 cv
507.875 230.79 505.241 231.295 504.916 232.486 cv
503.725 240.459 498.891 246.917 494.995 253.771 cv
493.66 254.746 492.505 256.117 491.062 256.73 cv
490.485 257.307 490.773 257.885 491.207 258.354 cv
494.381 258.101 499.432 258.354 502.788 258.209 cv
503.184 258.029 503.906 257.813 503.761 257.163 cv
503.617 256.441 502.967 256.189 502.462 255.792 cv
502.066 255.395 502.318 254.782 502.462 254.421 cv
504.158 250.38 507.081 251.499 509.894 251.823 cv
511.77 252.473 514.765 251.102 515.198 254.565 cv
515.342 255.576 513.683 254.818 513.034 255.143 cv
512.204 255.54 511.554 256.333 511.807 257.379 cv
511.807 258.426 512.781 258.39 513.754 258.498 cv
517.291 257.993 520.393 258.065 524.506 257.885 cv
526.166 257.849 522.955 254.565 522.125 253.375 cv
cp
f
516.424 138.684 mo
516.208 140.055 511.049 136.988 510.111 135.762 cv
509.606 135.292 513.539 132.551 513.683 132.045 cv
515.559 130.783 515.811 129.845 517.832 128.871 cv
518.157 129.195 li
518.012 131.36 516.93 135.617 516.424 138.684 cv
524.651 125.19 mo
524.109 123.495 523.387 123.639 521.006 123.567 cv
517.58 124.541 514.548 126.309 512.276 129.448 cv
508.416 132.262 504.591 135.545 500.262 137.241 cv
498.819 138.287 497.231 137.674 495.68 138.395 cv
495.536 138.864 495.68 139.333 495.932 139.658 cv
497.448 140.379 498.819 141.534 500.514 141.931 cv
502.354 142.652 503.184 145.863 505.601 144.096 cv
505.493 142.977 504.375 141.678 505.313 140.632 cv
509.534 139.333 511.265 141.426 514.333 143.843 cv
514.946 144.564 515.125 145.214 514.512 146.188 cv
513.141 146.513 511.59 147.09 510.4 146.152 cv
510.075 146.152 509.75 146.549 509.75 146.946 cv
509.823 149.219 513.791 151.672 515.089 152.971 cv
516.136 154.991 519.456 156.939 521.583 157.372 cv
522.233 157.12 522.81 156.398 522.703 155.677 cv
521.259 151.636 520.069 154.883 521.909 150.95 cv
522.558 149.724 524.109 131.973 524.831 130.855 cv
524.434 127.463 524.651 125.19 524.651 125.19 cv
cp
f
457.583 99.5757 mo
457.439 102.245 457.042 104.987 456.609 107.657 cv
456.464 108.198 455.887 108.595 455.346 108.523 cv
454.011 108.378 452.208 108.378 452.568 102.714 cv
450.006 99.8643 446.507 101.343 446.399 104.338 cv
446.11 112.997 444.776 114.259 445.677 120.14 cv
446.94 121.655 446.94 123.82 448.888 124.975 cv
449.286 125.768 448.636 126.67 447.842 126.814 cv
445.569 127.211 443.801 125.84 441.636 125.768 cv
438.895 125.516 436.044 126.31 433.555 125.443 cv
432.761 125.047 433.086 124.072 433.411 123.531 cv
439.04 119.815 437.848 112.456 438.318 106.358 cv
438.246 105.384 437.741 104.41 436.802 104.013 cv
432.076 102.029 433.014 105.564 430.813 106.034 cv
430.344 106.502 429.298 106.502 428.829 106.034 cv
427.206 104.915 428.251 102.895 428.251 101.343 cv
428.649 100.153 428.504 98.313 430.02 98.1323 cv
436.153 97.4111 442.683 98.71 448.708 97.7354 cv
451.775 98.2046 455.815 96.8335 457.583 99.5757 cv
f
489.582 106.863 mo
491.025 107.368 492.432 108.162 493.442 109.353 cv
493.118 112.491 489.004 110.651 487.778 113.068 cv
485.938 118.949 479.12 125.696 484.062 132.154 cv
484.207 132.803 483.881 133.453 483.232 133.597 cv
480.743 133.705 476.991 130.386 474.898 129.268 cv
472.698 128.763 470.136 128.871 468.765 126.85 cv
468.981 124.433 472.156 125.083 473.708 123.711 cv
477.315 122.16 477.604 117.434 478.867 114.367 cv
479.299 112.094 480.996 110.038 480.49 107.585 cv
479.444 106.322 476.882 105.672 478 103.508 cv
479.047 101.632 481.139 103.328 482.655 103.147 cv
483.99 104.843 488.067 105.889 489.582 106.863 cv
f
557.553 158.418 mo
560.547 161.233 561.882 164.949 563.831 168.304 cv
564.155 169.675 565.381 171.118 564.335 172.597 cv
563.29 174.041 561.593 174.257 559.862 174.257 cv
559.068 173.86 559.321 172.813 559.501 172.2 cv
560.8 167.763 558.923 165.237 555.388 165.021 cv
554.703 167.33 550.915 166.284 551.96 169.098 cv
552.791 170.216 554.234 171.695 553.836 173.247 cv
554.017 174.906 552.322 175.736 551.095 176.35 cv
550.048 176.313 li
548.786 174.509 546.982 173.066 546.585 171.046 cv
546.26 170.649 545.611 170.324 545.142 170.721 cv
544.42 172.2 541.787 173.066 542.544 175.159 cv
544.493 177.035 544.348 179.813 546.765 181.364 cv
547.884 181.689 548.786 180.895 549.976 180.895 cv
551.672 181.617 554.342 180.57 555.46 182.158 cv
555.676 183.926 553.621 183.781 552.574 184.358 cv
549.869 185.333 546.765 186.704 543.952 185.405 cv
540.92 182.735 540.885 178.947 538.035 176.313 cv
537.89 175.339 li
535.797 173.247 534.03 170.974 531.432 169.928 cv
530.71 169.531 530.891 168.484 531.144 167.907 cv
532.407 165.021 534.679 167.979 536.7 167.33 cv
540.885 165.165 545.214 163.614 549.002 160.583 cv
550.589 160.331 551.745 158.815 552.61 157.589 cv
552.394 156.146 551.817 154.703 552.322 153.26 cv
552.971 152.827 553.836 152.285 554.486 152.935 cv
556.182 154.45 556.434 156.615 557.553 158.418 cv
f
319.043 166.752 mo
319.512 169.241 316.59 170.829 314.966 172.524 cv
313.74 174.869 313.307 179.199 314.75 181.688 cv
316.122 183.889 317.889 186.703 320.631 186.956 cv
326.006 186.378 li
326.583 185.007 328.027 184.177 327.882 182.446 cv
327.486 178.008 323.445 182.987 322.399 180.822 cv
322.218 178.333 323.553 174.725 325.357 173.138 cv
327.991 172.632 330.444 174.364 332.645 175.988 cv
333.583 176.385 335.207 176.204 335.458 177.684 cv
335.458 179.199 li
334.629 182.59 334.34 186.45 332.645 189.589 cv
330.372 192.403 328.099 193.341 324.419 194.82 cv
322.254 195.687 319.584 196.336 317.564 195.506 cv
314.57 192.692 309.519 191.249 308.689 186.667 cv
305.154 180.461 308.472 171.117 312.117 166.03 cv
314.029 164.984 317.889 163.469 319.043 166.752 cv
f
358.15 352.336 mo
356.563 352.661 354.181 349.667 353.135 348.368 cv
352.63 347.899 352.486 347.177 352.739 346.456 cv
354.687 345.229 358.583 341.477 360.856 341.333 cv
361.18 341.729 li
361.037 344.399 358.727 349.739 358.15 352.336 cv
367.495 337.509 mo
367.097 336.643 366.124 335.524 365.004 335.668 cv
359.917 337.833 355.408 341.225 349.997 342.776 cv
347.832 343.895 345.739 345.337 343.177 345.734 cv
340.977 346.456 339.137 345.337 337.044 345.229 cv
336.467 345.482 336.25 346.059 336.142 346.636 cv
339.606 349.198 342.528 353.058 345.487 356.125 cv
346.858 354.898 345.956 352.661 347.291 351.398 cv
348.806 350.749 350.393 351.687 351.945 352.12 cv
354.687 353.635 357.898 356.449 357.826 359.913 cv
357.573 360.635 355.661 360.31 355.011 360.454 cv
354.831 361.248 353.568 361.176 354.542 362.149 cv
359.702 365.145 li
361.866 366.516 363.128 369.438 365.546 370.087 cv
366.52 369.906 366.268 368.607 366.196 367.814 cv
360.82 357.568 369.118 348.08 367.495 337.509 cv
cp
f
517.182 352.698 mo
515.667 351.183 514.657 345.482 514.91 343.39 cv
515.306 342.74 517.002 344.292 517.471 344.508 cv
522.522 346.781 li
522.882 347.034 523.857 347.286 523.929 347.611 cv
522.341 349.559 519.671 353.419 517.182 352.698 cv
538.36 344.544 mo
534.211 343.462 536.484 345.374 532.372 344.22 cv
529.34 343.39 519.888 339.529 516.93 338.591 cv
515.054 337.87 512.781 335.994 510.796 337.689 cv
509.75 340.828 511.771 343.317 511.446 346.637 cv
512.745 351.219 514.946 359.408 513.394 361.032 cv
511.446 363.052 510.255 364.784 511.771 366.696 cv
513.213 367.201 513.755 365.902 514.837 365.253 cv
517.146 363.377 520.105 362.259 521.909 359.697 cv
521.583 358.146 519.564 359.192 518.842 358.001 cv
518.012 355.729 521.404 354.863 522.522 353.311 cv
524.398 352.445 525.372 349.92 527.609 349.92 cv
530.098 350.75 527.464 352.59 527.717 354.141 cv
527.862 354.357 528.186 354.863 528.619 354.754 cv
532.372 352.986 535.257 348.874 538.721 346.457 cv
538.901 345.807 538.901 345.013 538.36 344.544 cv
cp
f
336.938 303.271 mo
337.119 304.714 li
335.496 309.224 333.114 318.027 332.826 323.006 cv
333.186 323.728 335.784 320.985 336.325 320.661 cv
339.175 319.542 341.015 316.404 343.901 315.61 cv
345.597 316.187 345.958 316.981 347.041 318.424 cv
347.906 320.264 350.251 321.959 349.458 324.232 cv
347.509 325.928 346.788 322.393 344.767 323.006 cv
340.834 323.835 337.696 326.469 334.233 328.562 cv
332.285 331.16 329.398 331.953 327.125 334.046 cv
326.079 333.577 324.058 334.226 323.987 332.53 cv
324.311 326.469 327.739 319.939 327.198 313.625 cv
326.512 312.76 320.451 318.135 319.729 318.532 cv
316.59 320.697 318.106 320.517 317.131 324.232 cv
316.266 324.557 315.364 323.583 314.714 323.006 cv
313.92 321.346 313.596 319.398 312.622 317.774 cv
311.756 316.909 310.529 316.079 310.926 314.636 cv
315.039 315.033 315.436 314.924 318.971 313.553 cv
321.641 311.641 331.887 304.534 331.959 303.416 cv
332.14 302.405 330.661 301.647 331.238 300.709 cv
331.959 299.735 333.331 299.952 334.233 300.457 cv
335.423 301.034 336.469 302.081 336.938 303.271 cv
f
548.606 306.41 mo
549.328 307.06 550.158 307.926 549.508 308.828 cv
546.514 309.874 543.123 309.874 540.489 311.894 cv
539.443 312.868 537.71 313.842 537.567 315.357 cv
538.541 317.198 540.921 319.326 542.797 319.182 cv
545.288 318.136 541.896 314.419 545.431 314.419 cv
548.029 314.492 548.895 314.853 550.158 316.873 cv
550.338 317.27 550.735 317.919 550.338 318.388 cv
549.292 319.29 547.271 318.316 546.802 320.156 cv
546.73 321.058 546.911 323.006 547.885 323.656 cv
548.787 324.954 550.375 325.279 551.817 324.954 cv
553.657 324.449 554.415 322.465 555.461 321.166 cv
556.724 318.497 553.765 316.801 552.323 314.961 cv
552.214 313.915 552.864 312.94 553.837 312.507 cv
557.374 313.265 559.538 315.863 562.749 317.234 cv
563.001 318.28 562.424 319.254 561.956 320.084 cv
557.048 325.964 553.801 331.304 547.993 336.535 cv
547.379 336.932 546.766 337.87 546.044 337.474 cv
544.494 335.994 547.993 333.469 547.019 332.17 cv
544.926 329.32 539.334 323.547 534.825 321.779 cv
532.227 321.058 531.794 322.176 530.279 324.016 cv
529.376 324.738 528.294 325.063 527.321 324.666 cv
526.274 324.161 526.31 323.15 526.635 322.285 cv
527.609 319.687 530.784 317.991 532.155 315.682 cv
534.716 311.172 537.783 308.467 540.921 304.101 cv
543.88 302.189 545.937 305.688 548.606 306.41 cv
f
389.358 349.92 mo
396.033 352.157 402.562 354.646 409.417 356.594 cv
410.355 356.991 411.33 357.712 411.907 358.542 cv
412.303 360.959 410.355 362.655 409.814 364.82 cv
409.165 365.397 408.263 365.289 407.614 364.82 cv
405.845 362.979 406.17 358.47 402.382 359.336 cv
399.712 360.058 399.496 363.882 398.305 365.902 cv
397.511 369.149 395.058 371.855 395.13 375.318 cv
395.96 377.267 397.223 378.024 398.702 379.468 cv
398.991 380.117 398.45 380.839 397.8 381.091 cv
395.78 381.235 394.481 379.647 392.641 379.323 cv
389.358 378.097 385.389 378.277 382.395 376.257 cv
382.034 375.859 382.395 375.391 382.395 374.958 cv
383.766 374.309 385.317 374.164 386.688 373.442 cv
389.754 369.799 389.971 365.072 392.172 361.032 cv
392.569 359.48 394.157 358.29 393.687 356.594 cv
392.569 355.62 391.27 355.223 389.827 354.971 cv
387.806 356.27 386.688 358.542 384.812 359.805 cv
384.199 359.661 383.296 359.588 383.044 358.759 cv
382.9 355.223 384.271 352.337 385.894 349.487 cv
387.084 349.198 388.276 349.595 389.358 349.92 cv
f
443.98 361.177 mo
443.727 362.114 444.304 362.872 445.062 363.377 cv
445.82 363.847 447.191 363.99 447.046 365.217 cv
447.443 370.917 447.443 376.076 444.161 380.658 cv
442.573 382.354 440.372 382.679 438.244 381.885 cv
432.976 378.746 436.656 373.335 435.465 368.355 cv
435.646 366.516 434.635 364.063 436.404 362.691 cv
436.909 362.259 437.81 362.187 437.991 361.393 cv
437.774 360.96 437.774 360.347 437.161 360.094 cv
434.094 359.625 430.234 360.924 427.167 360.058 cv
426.446 359.877 425.616 360.274 425.364 361.068 cv
424.787 361.898 425.616 362.619 426.301 362.872 cv
427.528 362.836 428.141 363.954 428.611 364.893 cv
430.487 371.747 426.987 378.782 430.595 385.096 cv
433.806 387.838 440.95 388.019 445.062 387.152 cv
453.685 382.968 449.284 372.686 452.314 365.145 cv
453.396 364.352 455.272 364.604 455.706 363.847 cv
456.174 363.017 456.715 362.078 456.102 361.032 cv
453.215 360.022 449.463 360.671 446.542 360.599 cv
445.567 360.744 444.485 360.238 443.98 361.177 cv
f
484.423 365.469 mo
483.629 366.299 481.97 367.129 480.923 366.695 cv
479.805 365.758 475.836 358.542 477.893 357.532 cv
480.563 356.955 483.702 357.423 485.145 360.238 cv
485.758 362.042 485.073 364.098 484.423 365.469 cv
503.364 366.84 mo
502.571 366.118 501.488 365.722 500.37 366.046 cv
498.854 366.443 498.602 368.066 498.206 369.257 cv
497.627 370.953 495.715 370.556 494.165 370.809 cv
492.866 370.376 488.68 367.778 489.438 366.516 cv
491.133 363.918 492.866 359.913 490.051 356.449 cv
487.381 350.821 479.986 352.192 475.657 353.96 cv
472.337 356.197 468.405 356.918 465.085 359.011 cv
464.761 359.913 465.23 360.887 465.843 361.536 cv
467.07 362.655 468.765 361.031 470.172 361.14 cv
471.94 362.727 472.589 364.892 473.708 366.84 cv
475.007 370.304 476.45 373.694 477.28 377.411 cv
477.569 379.503 475.548 381.776 477.424 383.22 cv
479.445 382.173 481.753 381.668 483.955 381.019 cv
486.263 379.647 482.222 374.452 482.62 372.612 cv
482.944 371.963 483.557 371.639 484.279 371.818 cv
485.831 372.865 491.098 375.534 492.902 375.932 cv
498.277 375.932 501.488 376.04 503.906 370.628 cv
503.906 369.365 504.627 367.814 503.364 366.84 cv
cp
f
364.429 42.2827 mo
364.501 45.999 366.955 47.9473 365.836 51.2661 cv
365.042 52.2041 365.223 52.5288 363.924 52.5288 cv
363.383 52.3125 362.481 52.6733 362.228 51.8794 cv
362.012 50.292 360.316 48.5605 358.837 48.019 cv
357.141 47.9111 351.622 50.2559 350.503 52.2764 cv
349.926 53.5752 350.178 55.0186 351.153 56.1729 cv
355.806 60.8989 361.868 56.3174 366.955 55.7397 cv
369.011 55.9922 370.887 57.1831 372.655 58.5898 cv
375.721 61.9453 377.49 66.7075 375.938 71.2173 cv
373.485 75.9795 369.011 81.4634 362.986 80.8862 cv
360.822 81.5356 359.125 78.7939 357.43 80.4893 cv
357.358 81.7881 357.754 83.3037 356.383 83.8086 cv
355.337 84.0249 354.111 83.9531 353.317 83.1592 cv
352.018 81.2832 353.642 79.2988 353.137 77.2783 cv
352.812 75.0776 351.008 73.7788 353.75 72.1553 cv
357.069 71.7588 360.28 76.4487 363.094 75.4746 cv
365.728 74.6084 367.099 73.9233 368.145 71.0732 cv
368.614 69.7744 368.867 68.2588 367.964 67.0322 cv
367.171 66.0581 366.052 65.4087 364.682 65.4087 cv
361.291 65.7334 359.198 69.125 355.337 68.4756 cv
351.694 68.0786 348.23 66.8521 346.066 63.4243 cv
344.297 60.502 342.458 56.9668 343.792 53.3228 cv
344.911 50.1118 347.725 47.2979 350.9 45.9268 cv
353.137 45.0967 356.095 44.2671 358.44 44.7002 cv
361.074 44.123 359.992 39.7212 363.708 41.417 cv
364.429 42.2827 li
f
542.184 55.5239 mo
543.483 56.7871 543.555 59.4565 545.9 59.709 cv
547.09 59.7813 548.895 59.3125 549.219 60.8999 cv
548.065 63.4971 545.106 64.3633 543.266 66.3115 cv
540.489 68.5122 li
539.839 68.7285 539.262 68.1152 539.118 67.6104 cv
537.566 64.291 540.705 63.894 538.72 60.8999 cv
537.747 59.5288 536.737 57.689 534.932 57.3643 cv
533.706 57.292 532.696 58.23 532.119 59.2041 cv
529.954 63.3169 533.165 66.3838 534.139 69.8472 cv
535.726 71.7954 536.375 74.1401 537.025 76.4492 cv
538 79.9487 536.628 83.0518 534.139 85.2524 cv
530.422 88.0664 526.634 88.7881 521.873 87.3447 cv
519.635 86.0459 517.038 85.2524 515.198 83.1597 cv
512.636 79.0469 li
511.084 78.6143 509.101 78.9746 507.946 77.5679 cv
507.477 76.7017 508.09 75.7275 508.595 75.0063 cv
515.451 67.4297 li
515.919 66.9609 516.965 67.0332 517.542 67.3574 cv
518.336 67.7544 518.409 68.7285 518.662 69.4502 cv
518.481 71.687 515.992 72.9858 516.424 75.5112 cv
516.1 78.4697 519.203 80.1655 521.259 81.5361 cv
522.594 82.1855 524.794 82.2578 526.166 81.6084 cv
527.933 80.562 528.835 78.542 528.078 76.6299 cv
527.861 72.8413 523.28 70.8936 522.702 67.3574 cv
522.125 64.1465 520.934 60.0337 523.28 57.292 cv
526.418 52.6016 532.046 51.6279 537.206 52.2773 cv
539.118 52.7822 540.885 53.9004 542.184 55.5239 cv
f
320.125 66.2388 mo
320.594 69.1973 317.6 70.6401 319.874 73.3101 cv
322.435 77.8921 328.063 81.6802 330.155 86.334 cv
331.526 88.1021 332.5 90.3027 334.665 91.2407 cv
337.01 92.6118 339.716 88.9316 340.69 92.2148 cv
339.716 94.6318 336.108 95.895 334.413 97.5542 cv
331.923 99.3223 329.037 101.775 327.594 104.409 cv
326.944 104.986 325.898 105.456 325.176 104.842 cv
323.228 101.992 327.125 98.6367 325.682 95.498 cv
324.924 93.3335 322.687 91.71 321.533 89.6895 cv
318.575 84.7109 314.065 79.876 308.977 77.062 cv
307.209 76.1602 304.72 78.7217 303.674 76.7012 cv
303.747 75.1499 305.297 73.9595 306.524 73.1655 cv
309.952 70.4961 313.848 68.728 317.059 65.4092 cv
318.033 64.9399 319.801 64.9399 320.125 66.2388 cv
f
561.089 79.6602 mo
563.326 81.6084 563.434 84.3506 563.038 87.2368 cv
562.64 90.1592 559.827 91.8184 557.157 92.4678 cv
554.342 92.4678 550.879 92.4678 549.581 89.4014 cv
548.606 87.0923 549.328 84.1699 550.879 82.1499 cv
552.178 80.7788 553.441 79.1914 555.136 78.542 cv
557.336 78.4697 559.393 78.542 561.089 79.6602 cv
f
291.731 91.71 mo
292.308 92.6118 291.984 93.8022 291.623 94.7041 cv
290.757 95.6782 289.783 96.7969 288.412 96.2197 cv
287.438 95.8228 285.85 93.8384 284.876 94.8848 cv
284.155 95.5342 281.954 99.9355 282.531 100.657 cv
283.578 101.487 285.886 102.642 287.257 102.569 cv
291.514 101.992 297.323 96.9053 302.23 98.5283 cv
304.899 98.5283 313.053 100.08 313.053 108.486 cv
313.017 110.976 313.198 113.79 311.971 116.026 cv
310.13 119.49 307.064 123.747 302.879 124.577 cv
302.085 124.396 301.04 124.324 300.209 124.649 cv
299.091 125.839 299.741 128.04 298.117 128.834 cv
295.05 129.7 294.509 125.948 293.138 124.252 cv
292.164 121.979 291.514 120.825 291.082 118.335 cv
291.19 117.758 291.767 117.722 292.236 117.542 cv
297.503 115.449 296.854 123.098 304.971 117.073 cv
306.342 116.063 306.595 114.331 306.595 112.563 cv
305.369 110.615 306.27 107.043 301.04 108.053 cv
295.808 109.027 291.912 111.444 287.077 112.382 cv
283.469 112.635 280.294 110.795 277.877 108.125 cv
276.362 105.059 275.64 100.621 277.408 97.4102 cv
279.032 95.3174 282.928 87.2363 284.804 88.3545 cv
287.51 89.2563 289.71 89.8696 291.731 91.71 cv
f
265.322 117.614 mo
266.296 119.49 264.276 120.861 264.673 122.881 cv
265.502 126.742 268.786 130.133 272.574 131.107 cv
278.851 135.112 283.831 139.477 290.432 142.76 cv
291.01 143.157 291.01 143.987 290.866 144.528 cv
287.943 147.775 284.191 146.801 280.222 146.873 cv
273.873 146.981 267.09 147.198 261.39 149.291 cv
263.302 150.914 264.745 153.259 267.487 153.728 cv
269.76 156.47 272.899 157.769 276.29 157.119 cv
277.805 157.047 278.202 154.377 279.898 155.099 cv
280.944 155.568 281.269 156.795 280.944 157.841 cv
277.877 162.675 276.29 168.087 273.368 172.994 cv
272.971 173.896 271.924 174.437 271.203 173.643 cv
269.58 172.2 271.275 170.324 270.806 168.484 cv
270.878 164.515 266.946 162.603 264.276 160.511 cv
259.622 157.372 254.354 154.702 248.474 155.027 cv
246.49 154.847 245.587 157.841 243.423 157.047 cv
241.872 156.073 243.243 154.197 243.675 153.006 cv
245.587 149.543 247.139 146.693 251.432 145.791 cv
257.674 144.023 265.07 142.436 271.997 142.147 cv
273.223 142.075 273.945 141.39 274.667 140.523 cv
272.069 138.106 269.11 136.014 266.044 134.21 cv
264.096 133.02 262.905 132.117 260.632 131.721 cv
259.441 132.334 258.396 133.777 256.844 132.911 cv
256.123 132.334 255.076 131.865 254.932 130.891 cv
254.751 129.772 256.05 129.267 256.267 128.329 cv
258.467 124.36 258.973 119.707 262.833 116.82 cv
263.807 116.748 264.601 117 265.322 117.614 cv
f
239.779 180.714 mo
241.078 182.59 245.01 181.292 244.397 184.358 cv
243.242 185.981 239.166 184.466 237.542 185.043 cv
235.377 186.487 234.151 188.94 234.367 192.079 cv
234.476 193.306 235.089 195.29 236.099 195.795 cv
237.975 196.192 241.872 198.032 243.17 195.867 cv
243.242 194.315 242.954 189.481 243.603 189.012 cv
245.227 188.579 245.407 189.518 246.958 189.409 cv
248.798 189.265 251.288 189.409 250.855 190.131 cv
248.943 193.558 248.943 195.542 247.066 197.418 cv
247.066 197.887 247.463 198.068 247.788 198.14 cv
251.648 197.815 255.689 200.341 259.225 200.737 cv
259.946 198.248 260.019 193.774 260.56 191.141 cv
261.065 186.992 253.958 185.404 255.4 181.292 cv
256.122 180.065 257.493 180.173 258.647 180.462 cv
261.461 181.688 263.699 181.797 265.611 184.214 cv
268.353 187.894 266.224 195.001 264.672 198.537 cv
262.58 202.866 262.183 215.602 261.461 216.576 cv
260.812 217.045 259.766 217.225 259.044 216.756 cv
255.906 214.411 258.611 208.314 251.432 207.881 cv
245.335 207.484 239.707 205.067 233.573 203.696 cv
229.966 203.371 230.832 209.396 227.043 207.809 cv
224.626 204.49 230.398 185.368 231.842 180.281 cv
232.419 179.56 232.455 179.596 233.249 179.343 cv
235.738 179.019 237.506 180.57 239.779 180.714 cv
f
227.368 236.167 mo
232.671 237.609 239.057 236.636 244.613 237.357 cv
248.004 237.357 252.189 238.151 254.209 235.12 cv
254.534 234.291 254.859 232.775 255.905 232.522 cv
256.771 232.451 258.07 232.126 258.792 232.848 cv
259.188 233.677 li
258.9 238.728 258.467 243.563 259.621 248.397 cv
259.693 249.768 259.766 251.211 258.395 251.896 cv
255.147 252.51 253.813 247.134 250.818 246.557 cv
245.371 245.042 238.913 245.763 232.888 245.619 cv
229.171 245.366 227.043 248.072 224.698 250.814 cv
224.157 251.211 221.739 251.031 221.631 249.046 cv
221.415 244.5 220.224 241.578 221.271 236.527 cv
221.595 234.94 221.487 232.631 223.327 232.054 cv
225.6 232.126 225.347 235.337 227.368 236.167 cv
f
258.36 267.734 mo
259.55 267.987 261.426 267.482 261.896 268.961 cv
261.318 271.703 262.617 273.146 262.942 275.563 cv
264.06 280.47 268.606 293.927 268.606 295.767 cv
268.281 296.669 267.452 297.643 266.585 297.968 cv
262.22 298.292 264.637 294.107 260.127 295.082 cv
255.438 296.38 244.758 299.519 239.599 299.591 cv
238.77 299.808 237.651 299.988 237.579 300.89 cv
237.507 302.008 237.904 303.92 236.46 304.317 cv
234.765 304.426 233.791 302.622 232.889 301.503 cv
231.121 296.994 226.936 292.953 228.451 287.649 cv
228.957 286.603 230.002 286.603 230.977 286.531 cv
233.538 286.675 233.142 290.788 235.883 290.283 cv
238.625 289.562 243.207 289.237 246.202 288.948 cv
249.737 286.675 259.659 289.417 258.937 284.438 cv
256.953 270.224 252.551 273.543 247.969 268.564 cv
246.599 267.049 249.485 267.265 250.206 266.616 cv
253.273 266.147 255.618 267.41 258.36 267.734 cv
f
619.139 274.481 mo
624.478 278.197 631.297 278.088 637.719 279.207 cv
640.172 279.459 642.842 281.985 645.006 279.929 cv
645.728 278.702 646.162 277.15 647.497 276.357 cv
648.723 276.212 649.914 277.006 650.166 278.125 cv
649.661 281.372 647.821 283.933 647.316 287 cv
645.151 291.257 643.708 295.947 643.456 301.034 cv
643.059 302.008 642.481 303.271 641.291 303.596 cv
638.007 303.92 635.194 303.199 632.271 302.622 cv
631.225 302.152 629.962 299.916 631.153 299.88 cv
638.621 299.808 642.265 290.03 641.652 288.84 cv
641.111 287.721 634.544 287.469 631.983 286.639 cv
630.107 286.026 633.101 292.231 629.89 293.35 cv
627.148 293.818 628.772 292.88 626.03 293.133 cv
625.127 292.736 624.334 292.015 624.009 291.041 cv
623.685 289.922 623.937 288.624 624.875 287.83 cv
625.38 287.505 625.958 287.18 626.102 286.531 cv
626.426 285.34 624.875 284.835 623.757 284.51 cv
620.726 284.222 615.892 280.181 614.016 282.995 cv
613.15 286.783 611.057 291.654 616.542 297.39 cv
616.938 297.823 616.433 298.617 615.784 298.87 cv
614.052 298.617 li
607.522 294.107 li
606.404 292.628 607.053 290.463 607.377 288.948 cv
608.496 284.33 610.047 280.073 611.563 275.635 cv
612.392 273.795 612.862 271.703 614.629 270.404 cv
617.876 270.26 616.65 273.507 619.139 274.481 cv
f
603.265 312.399 mo
603.446 314.889 li
607.451 319.074 612.212 322.393 617.372 324.233 cv
621.088 327.299 625.273 329.392 629.458 331.484 cv
630.613 332.206 631.478 333.396 630.901 334.84 cv
626.968 339.386 619.464 337.582 613.981 337.582 cv
613.332 337.365 610.553 336.716 609.868 336.896 cv
609.074 337.87 611.239 340.829 611.563 341.73 cv
613.656 345.916 616.073 348.802 617.95 353.095 cv
618.093 354.033 617.372 354.61 616.975 355.224 cv
612.934 355.657 609.976 352.41 606.404 351.075 cv
604.204 350.209 603.122 348.622 601.101 347.9 cv
597.06 346.565 591.72 341.226 588.041 344.04 cv
586.706 345.086 585.479 344.22 584.072 343.246 cv
584.252 340.107 586.273 337.293 587.716 334.479 cv
589.231 333.649 588.618 330.186 591.107 331.232 cv
593.668 332.351 590.638 335.994 593.561 336.391 cv
596.23 337.582 606.765 342.561 608.894 345.05 cv
609.94 345.519 600.126 332.351 600.054 329.211 cv
600.126 328.021 617.985 330.438 618.166 329.536 cv
617.95 328.201 607.703 323.944 606.729 323.367 cv
603.987 323.295 601.065 319.038 597.385 324.955 cv
596.879 325.784 595.04 325.099 594.643 323.98 cv
594.895 322.753 595.942 321.888 596.23 320.697 cv
598.106 317.63 597.205 313.013 600.993 311.028 cv
601.966 310.92 602.724 311.569 603.265 312.399 cv
f
577.468 358.867 mo
578.695 362.223 583.276 363.161 585.91 365.902 cv
590.348 368.789 592.945 375.68 598.682 375.68 cv
600.774 375.607 603.335 374.345 604.454 376.185 cv
605.428 379.144 601.893 379.323 600.341 380.694 cv
598.249 383.364 595.506 385.709 593.487 388.091 cv
592.874 388.523 592.043 388.343 591.466 387.946 cv
590.528 386.575 592.729 384.627 591.899 383.184 cv
590.708 381.02 585.549 377.159 583.205 375.969 cv
579.344 373.046 577.865 369.583 573.283 367.706 cv
570.613 366.985 568.16 370.81 566.103 367.851 cv
565.995 364.063 570.144 362.331 571.587 359.12 cv
573.283 357.749 574.004 355.548 575.844 354.43 cv
578.225 354.683 576.819 357.497 577.468 358.867 cv
f
311.9 369.077 mo
312.153 373.01 315.436 375.933 318.899 377.123 cv
319.26 377.988 318.611 378.891 317.781 379.144 cv
316.013 379.937 313.848 379.793 311.828 380.009 cv
309.952 381.705 309.808 381.092 307.499 381.633 cv
306.597 381.957 305.55 381.633 305.226 380.73 cv
305.226 379.793 li
306.741 378.565 307.751 377.952 308.329 375.824 cv
308.545 372.36 305.37 369.475 302.484 367.599 cv
301.041 367.129 299.778 367.31 298.334 368.031 cv
296.458 369.511 297.614 371.387 298.155 373.551 cv
299.345 376.689 299.597 379.215 299.886 382.679 cv
299.886 386.972 299.092 390.832 295.954 393.719 cv
293.392 395.162 290.722 396.785 287.403 395.812 cv
284.589 395.884 282.822 393.25 280.801 391.554 cv
278.961 388.56 276.869 385.817 275.642 382.679 cv
275.714 380.658 277.987 380.117 279.286 379.144 cv
284.264 377.845 li
286.682 379.685 282.965 380.911 282.822 382.679 cv
282.569 385.276 283.542 387.441 285.708 388.956 cv
287.656 389.605 289.496 389.281 291.192 388.343 cv
292.634 387.261 291.841 385.493 291.913 383.978 cv
291.192 378.097 287.187 372.938 288.774 366.624 cv
289.423 364.459 290.542 362.223 292.743 360.924 cv
298.443 358.831 304.577 361.177 308.942 364.965 cv
310.385 366.155 311.25 367.599 311.9 369.077 cv
f
518.554 404.866 mo
518.049 406.562 515.055 407.031 516.426 409.015 cv
517.797 412.082 517.508 415.617 519.889 418.287 cv
521.116 421.606 522.415 428.101 525.625 430.373 cv
527.394 432.394 529.522 429.94 531.939 430.409 cv
532.805 431.059 533.31 432.104 533.202 433.224 cv
532.481 435.821 529.45 434.919 527.574 435.966 cv
522.09 437.985 515.452 440.655 510.148 443.001 cv
508.597 443.542 508.453 446.283 506.324 445.237 cv
503.979 443.001 504.124 439.356 502.067 436.795 cv
501.922 436.073 501.814 435.027 502.644 434.595 cv
503.979 434.125 504.628 435.568 505.783 435.821 cv
507.371 436.001 507.514 438.274 509.319 437.553 cv
510.509 436.073 515.488 434.45 515.488 434.45 cv
512.962 426.874 li
512.241 426.152 511.267 425.899 510.292 426.152 cv
508.706 427.379 509.426 429.615 507.839 430.662 cv
506.83 430.843 506.288 429.724 505.963 429.038 cv
504.592 426.477 504.16 425.395 504.592 422.328 cv
506.288 420.38 508.2 423.05 510.22 422.544 cv
511.123 421.895 510.618 420.704 510.329 419.875 cv
507.659 417.891 508.453 410.386 503.474 412.479 cv
501.454 413.272 498.026 414.174 497.376 416.664 cv
496.583 418.106 496.835 420.524 494.815 420.921 cv
493.986 421.065 493.12 420.813 492.867 420.019 cv
492.542 418.432 493.516 417.385 493.625 415.942 cv
493.625 414.463 492.145 412.046 494.093 411.324 cv
499.252 409.159 505.061 408.33 510.184 406.165 cv
512.06 405.119 515.777 402.413 517.977 403.387 cv
518.554 404.866 li
f
623.721 196.985 mo
622.855 197.057 622.675 196.011 622.386 195.434 cv
621.16 186.847 li
623.433 185.26 631.659 187.894 634.978 187.821 cv
637.647 187.749 625.814 195.362 623.721 196.985 cv
645.26 185.873 mo
644.611 185.08 643.817 183.925 642.663 183.925 cv
639.271 185.224 636.205 183.312 632.741 183.384 cv
631.478 182.987 618.562 182.482 613.764 180.245 cv
609.398 178.188 608.352 174.689 608.352 174.689 cv
607.956 173.246 605.358 172.38 604.888 173.787 cv
604.311 175.411 604.636 178.261 605.61 180.354 cv
607.053 183.456 607.378 185.621 608.605 188.471 cv
608.821 189.409 609.759 189.733 610.589 189.517 cv
611.563 189.409 611.274 185.837 611.058 184.971 cv
611.455 184.178 613.331 185.548 614.161 185.296 cv
615.82 185.151 616.217 185.693 617.444 186.631 cv
618.417 188.904 618.887 192.548 619.464 194.784 cv
619.537 196.588 620.186 198.248 620.005 200.052 cv
619.608 200.917 617.263 202.613 616.217 202.361 cv
614.414 201.964 614.233 199.186 612.393 199.186 cv
611.274 199.475 611.491 200.773 611.382 201.748 cv
612.285 203.84 611.959 212.715 612.934 215.06 cv
613.403 215.926 614.052 217.297 615.351 216.756 cv
619.211 214.23 615.387 214.014 619.031 210.947 cv
622.927 207.7 637.07 195.397 639.776 193.811 cv
641.075 193.161 643.636 190.239 644.682 189.12 cv
645.332 188.218 645.657 186.919 645.26 185.873 cv
cp
f
581.436 114.511 mo
579.091 114.439 576.89 111.517 575.844 109.821 cv
577.035 108.198 583.493 105.022 585.188 104.157 cv
587.028 103.58 582.879 113.537 581.436 114.511 cv
596.3 98.4927 mo
596.047 97.1216 594.388 97.0493 593.162 96.9775 cv
584.466 99.3945 576.709 104.157 568.087 106.899 cv
565.454 106.899 562.639 107.368 560.367 106.069 cv
559.32 105.925 557.877 105.022 556.903 106.069 cv
556.579 107.224 556.975 108.27 557.552 109.136 cv
560.944 111.228 563.073 116.893 566.932 116.893 cv
568.556 116.893 566.319 114.331 569.314 112.924 cv
573.283 111.048 576.709 116.315 578.838 119.273 cv
579.199 120.572 578.911 122.052 578.261 123.17 cv
577.756 124.144 576.494 123.314 575.375 123.17 cv
574.329 123.242 573.499 122.052 572.777 123.242 cv
572.597 123.495 572.561 125.118 572.706 125.263 cv
575.591 126.633 577.467 129.592 579.307 132.117 cv
580.425 133.164 581.436 135.869 582.663 135.003 cv
584.935 133.416 583.457 132.117 583.745 130.421 cv
584.358 126.633 587.75 121.619 589.409 116.243 cv
590.816 110.506 595.398 104.373 596.3 98.4927 cv
cp
f
558.997 406.454 mo
557.374 406.166 551.746 399.203 550.447 398.481 cv
550.049 398.192 549.472 398.337 549.255 397.76 cv
549.328 396.966 li
550.771 395.595 556.002 390.22 557.265 394.332 cv
557.842 395.884 559.827 403.713 560.151 405.336 cv
559.971 405.913 559.574 406.382 558.997 406.454 cv
565.78 410.604 mo
564.011 403.82 561.992 397.146 560.873 390.147 cv
560.548 387.333 559.827 384.194 560.332 381.344 cv
561.27 379.504 563.074 377.953 563.291 375.788 cv
563.001 374.994 561.992 374.525 561.053 374.67 cv
558.96 376.942 556.399 378.313 553.729 379.504 cv
552.502 381.597 551.204 380.479 550.411 382.932 cv
550.879 384.23 552.502 384.05 553.801 384.23 cv
555.064 384.447 554.487 385.89 554.667 386.792 cv
552.828 390.327 549.04 392.384 545.792 394.151 cv
544.747 394.296 543.953 393.502 543.483 392.709 cv
541.788 390.761 542.906 390.472 542.69 388.451 cv
542.437 387.874 541.788 387.729 541.174 387.802 cv
538.072 390.544 534.139 391.807 531.217 394.909 cv
530.496 395.595 529.125 395.848 529.305 397.146 cv
529.702 398.192 530.026 399.419 531.073 400.141 cv
531.974 400.537 533.057 400.573 533.886 400.141 cv
540.237 396.857 544.205 405.949 549.689 408.872 cv
553.729 409.918 559.105 416.664 561.703 416.376 cv
563.832 416.159 565.31 415.365 566.79 413.923 cv
567.403 412.624 566.176 411.649 565.78 410.604 cv
cp
f
268.209 339.06 mo
265.72 338.988 261.824 339.24 259.334 339.313 cv
258.793 338.988 265.468 332.782 265.612 332.313 cv
267.38 330.438 268.534 334.334 268.534 334.334 cv
268.534 334.334 269.4 337.689 270.482 338.338 cv
270.735 338.879 268.787 339.168 268.209 339.06 cv
289.82 342.343 mo
288.052 338.735 285.78 331.736 283.759 331.88 cv
280.729 332.061 283.687 336.896 281.125 338.411 cv
280.007 339.132 278.383 339.457 277.012 338.952 cv
274.018 337.509 274.09 336.246 272.178 332.277 cv
271.312 330.545 269.184 328.562 270.879 326.577 cv
272.178 325.422 272.755 323.005 274.848 323.005 cv
275.713 323.186 275.713 324.124 276.039 324.809 cv
276.543 325.747 277.012 327.371 278.528 326.793 cv
279.105 326.649 279.899 326.144 279.899 325.422 cv
279.43 321.634 276.435 319 275.317 315.429 cv
273.694 313.517 274.271 309.656 270.952 309.404 cv
268.931 310.306 270.338 313.012 269.761 314.815 cv
267.271 318.026 265.323 321.49 262.257 324.557 cv
259.442 327.768 257.098 331.556 253.814 334.478 cv
250.567 339.782 li
250.351 340.972 248.728 343.461 250.423 343.642 cv
260.2 344.688 268.137 344.219 277.012 344.039 cv
280.548 344.147 285.058 343.064 287.656 346.059 cv
288.702 346.781 288.918 348.224 290.073 348.621 cv
291.011 348.981 291.913 349.018 292.634 348.151 cv
292.815 345.915 290.867 344.219 289.82 342.343 cv
cp
f
593.775 157.625 mo
591.863 154.089 590.997 151.311 591.069 149.183 cv
591.141 147.054 592.981 144.673 593.269 142.797 cv
594.316 140.199 596.841 138.07 599.006 136.23 cv
601.17 134.391 603.768 133.02 606.834 132.154 cv
609.613 131.974 612.355 130.711 614.627 130.855 cv
616.901 130.999 618.993 131.577 620.905 132.551 cv
622.889 133.561 623.972 135.256 625.812 136.736 cv
631.259 143.735 632.053 151.492 629.095 153.043 cv
628.229 153.62 li
624.982 155.135 li
623.719 156.001 622.781 156.073 622.276 156.362 cv
621.771 156.651 621.375 156.867 621.158 156.903 cv
620.761 157.012 620.436 157.012 620.184 156.903 cv
619.895 156.831 619.714 156.651 619.678 156.398 cv
619.606 156.037 620.003 155.316 620.797 154.233 cv
621.194 153.692 621.482 153.295 621.735 152.971 cv
622.817 151.383 623.972 151.059 624.369 149.724 cv
624.765 148.389 624.441 145.936 624.188 144.709 cv
623.719 142.184 621.988 140.055 619.354 139.081 cv
616.72 138.106 613.618 138.864 610.045 139.911 cv
606.005 141.065 603.479 142.292 601.496 144.673 cv
599.475 147.054 598.537 150.445 599.583 153.332 cv
599.799 154.522 600.161 155.28 600.702 155.677 cv
601.026 157.625 606.077 163.361 607.051 163.108 cv
608.422 163.975 606.042 165.526 606.042 165.526 cv
605.427 165.706 596.336 162.676 593.775 157.625 cv
f
373.196 445.237 mo
372.51 445.021 371.716 444.588 371.463 444.155 cv
371.211 443.723 371.175 443.253 371.391 442.712 cv
371.644 441.918 374.458 441.702 374.602 441.666 cv
375.36 441.449 376.371 439.898 377.597 436.976 cv
377.849 436.398 379.582 430.698 380.267 428.425 cv
380.375 428.209 380.988 424.637 381.168 424.168 cv
382.107 421.57 381.313 419.875 380.736 418.396 cv
380.123 416.952 379.04 415.87 376.731 415.04 cv
374.278 414.175 373.268 414.499 371.68 415.148 cv
370.057 415.834 368.83 416.483 368.037 418.721 cv
367.82 419.262 366.196 421.643 366.052 422.075 cv
361.651 430.302 li
360.568 433.945 359.667 436.254 360.063 436.903 cv
360.244 437.156 360.496 437.444 360.821 437.806 cv
361.542 438.6 362.588 439.898 362.372 440.512 cv
362.156 441.017 361.903 441.341 361.542 441.485 cv
361.181 441.63 360.712 441.594 360.135 441.377 cv
350.611 437.265 li
349.998 437.012 349.6 436.724 349.348 436.326 cv
349.095 435.93 349.059 435.496 349.276 434.955 cv
349.493 434.342 350.106 434.018 351.152 433.945 cv
351.152 433.945 353.894 434.378 354.182 434.162 cv
354.471 433.981 360.244 422.869 360.244 422.869 cv
360.316 422.617 363.093 416.916 363.418 415.979 cv
364.537 412.876 366.485 410.892 369.191 410.098 cv
371.897 409.304 374.747 409.412 378.968 410.964 cv
383.838 412.731 386.689 414.354 388.384 416.88 cv
390.08 419.406 390.584 427.884 389.575 429.977 cv
389.142 430.951 388.601 433.332 388.348 433.837 cv
387.013 440.764 li
386.869 440.98 386.544 442.965 386.436 443.217 cv
386.328 443.47 385.859 445.058 385.895 445.418 cv
385.967 445.743 386.941 446.861 386.941 446.861 cv
387.735 447.583 387.988 448.269 387.771 448.918 cv
387.59 449.387 387.302 449.711 386.869 449.892 cv
386.436 450.072 385.967 450.036 385.426 449.855 cv
373.196 445.237 li
f
672.679 258.715 mo
671.272 271.667 669.143 285.016 666.149 297.21 cv
665.175 306.663 659.403 313.337 657.851 322.537 cv
655.579 327.876 654.821 334.803 651.465 339.746 cv
647.533 347.322 643.889 353.636 640.425 361.284 cv
635.519 370.665 615.351 403.099 596.013 415.618 cv
588.509 420.669 581.257 426.044 574.114 431.997 cv
564.662 437.77 li
560.043 438.491 557.049 443.037 552.972 445.094 cv
549.942 447.114 546.442 448.016 543.196 449.567 cv
533.418 454.69 523.677 459.886 512.926 462.735 cv
504.844 466.127 495.825 467.281 487.78 470.781 cv
477.208 472.404 466.71 474.064 455.958 475.183 cv
444.956 475.002 434.06 477.455 423.453 475.472 cv
417.211 473.884 409.887 474.208 403.393 473.956 cv
400.435 474.208 398.342 472.585 395.636 472.261 cv
388.313 470.962 381.566 468.364 373.917 467.786 cv
365.042 466.091 356.925 462.735 348.447 460.246 cv
346.643 459.092 344.514 459.092 342.566 458.262 cv
334.124 453.139 324.671 450.217 316.482 444.589 cv
314.822 443.867 li
308.4 438.563 301.473 434.559 294.655 430.266 cv
287.079 424.168 278.78 419.37 271.457 412.371 cv
266.55 408.294 262.906 402.919 258.649 398.301 cv
255.113 395.522 252.66 391.843 249.376 388.704 cv
243.388 382.102 240.213 374.056 234.332 367.273 cv
229.534 360.924 227.441 353.528 223.617 346.781 cv
221.488 341.478 218.494 336.607 216.618 331.231 cv
213.335 322.753 211.711 313.662 207.959 305.436 cv
206.588 299.591 204.568 293.963 203.918 287.758 cv
202.692 278.666 200.311 269.646 201.465 259.941 cv
200.744 254.494 200.239 248.216 201.068 242.841 cv
200.239 240.748 201.212 238.475 201.465 236.419 cv
200.635 231.945 202.583 227.543 201.393 223.178 cv
201.393 215.349 204.063 209 203.81 201.026 cv
204.712 196.048 205.867 191.033 206.264 185.802 cv
207.743 182.951 208.212 179.704 209.691 176.854 cv
210.124 171.406 212.793 166.933 214.092 161.882 cv
216.113 155.857 218.71 150.084 222.066 144.601 cv
225.385 138.54 228.163 132.189 230.616 125.66 cv
235.415 119.238 238.481 112.058 244.434 105.961 cv
247.428 100.369 252.083 95.2461 256.304 90.1948 cv
258.107 85.2163 263.23 82.4385 266.73 78.4697 cv
274.126 71.0376 282.208 65.1929 290.758 60.4668 cv
296.097 57.292 301.004 53.0708 306.452 50.1484 cv
307.354 48.6694 309.122 48.7412 310.348 47.7676 cv
319.295 42.1753 328.17 36.1504 337.839 32.1455 cv
349.926 25.3989 363.239 22.0078 376.334 17.6782 cv
381.061 16.7041 385.788 15.6221 390.261 13.9263 cv
394.482 13.6738 398.09 11.978 401.987 11.1484 cv
406.063 10.1021 410.537 10.1021 414.433 8.73096 cv
423.38 7.35986 432.112 9.5249 441.203 9.38037 cv
444.883 9.70508 448.13 8.62256 451.882 9.05566 cv
454.083 9.2002 456.356 9.12793 458.376 8.73096 cv
465.484 8.55078 471.87 9.92139 478.507 11.0762 cv
481.682 12.0864 484.857 12.8076 488.176 13.5293 cv
492.506 13.6738 495.933 16.1992 500.155 16.8486 cv
504.375 18.3999 509.102 18.7246 513.431 20.1318 cv
524.001 24.4971 534.897 28.249 545.215 33.3721 cv
552.792 38.9282 561.595 41.3457 568.883 47.623 cv
575.016 51.375 580.933 55.7407 586.814 60.25 cv
589.844 62.1982 592.044 65.5898 594.859 67.8989 cv
598.611 71.7231 602.616 75.2227 606.332 78.9385 cv
609.759 81.897 612.285 85.541 615.892 88.2466 cv
618.815 91.8184 621.376 95.5347 624.479 99.1421 cv
630.865 107.765 637.106 116.388 642.049 125.587 cv
646.883 131.36 649.877 137.89 652.836 144.384 cv
656.156 154.233 661.207 163.433 663.407 173.751 cv
665.608 182.374 669.251 190.347 670.948 199.223 cv
672.426 206.402 673.003 213.979 673.545 221.446 cv
674.447 227.543 674.952 234.543 673.978 240.748 cv
674.123 246.773 674.302 253.267 672.679 258.715 cv
678.957 220.111 mo
677.225 210.768 677.225 200.774 673.87 192.079 cv
671.344 177.396 666.041 163.794 661.207 150.121 cv
658.717 145.033 657.021 139.622 653.377 135.112 cv
651.538 131.504 649.264 128.113 647.677 124.505 cv
643.889 119.49 642.193 113.609 638.477 108.703 cv
633.787 103.688 630.504 97.8076 626.174 92.6484 cv
622.134 86.8398 616.505 82.1133 612.393 76.3047 cv
608.424 74.4287 607.198 69.7026 603.265 67.5381 cv
601.75 64.5073 598.034 63.894 596.411 60.8276 cv
591.503 56.6426 587.138 51.4834 581.907 47.6953 cv
574.186 41.0928 564.445 39.3252 556.833 32.4702 cv
550.411 29.2231 li
544.783 25.0381 538.073 23.3428 532.047 20.0596 cv
526.888 17.4619 521.548 15.4775 516.425 13.0605 cv
512.168 11.8335 508.2 9.74121 503.69 9.01953 cv
502.463 9.01953 501.669 7.90137 500.443 8.04541 cv
490.052 8.15381 481.358 4.18506 471.617 2.88623 cv
462.814 2.66992 454.191 1.11865 445.569 0 cv
441.708 .469238 437.848 -.252441 434.131 .541504 cv
427.132 1.04639 420.025 1.19092 413.279 2.16504 cv
403.105 3.93262 392.534 4.7627 383.514 9.0918 cv
373.485 12.4829 363.383 15.9468 353.461 19.5903 cv
351.369 20.853 349.06 21.5747 346.643 22.0801 cv
340.582 23.7031 335.748 27.9604 329.686 29.4038 cv
323.336 33.2642 316.157 34.8877 310.529 40.3711 cv
304.071 43.041 298.19 46.9736 292.49 51.5557 cv
285.815 54.5498 279.899 59.7813 274.09 64.688 cv
268.209 71.5425 260.958 76.7017 255.077 83.2319 cv
253.093 86.2988 250.351 89.1846 248.583 92.3237 cv
245.588 95.8955 242.774 99.4307 240.177 103.147 cv
236.497 106.683 234.152 110.94 231.554 115.053 cv
228.668 120.934 224.627 126.237 221.633 132.045 cv
220.37 136.339 218.097 140.199 216.582 144.384 cv
213.587 149.291 211.819 154.702 209.727 160.006 cv
208.031 165.887 205.47 171.37 204.243 177.396 cv
203.594 179.524 201.898 181.147 202.403 183.637 cv
200.635 188.146 200.311 193.306 199.409 198.14 cv
199.156 206.005 196.342 212.968 196.342 220.869 cv
196.342 227.472 195.873 234.326 195.801 240.748 cv
196.089 251.896 195.801 263.225 197.172 274.192 cv
198.038 278.955 197.821 283.861 199.409 288.299 cv
202.62 300.709 205.037 313.337 209.727 325.099 cv
212.072 333.829 216.329 341.694 219.468 350.101 cv
222.066 354.61 225.818 358.542 227.478 363.449 cv
230.833 368.789 233.105 374.741 237.615 379.504 cv
238.265 381.199 240.574 382.246 240.754 384.194 cv
243.244 386.899 245.011 390.146 247.176 393.214 cv
250.351 396.28 252.587 399.96 255.834 402.954 cv
256.556 405.696 259.767 407.14 260.958 409.557 cv
263.627 412.046 267.091 413.814 268.895 417.133 cv
273.765 419.081 276.616 423.916 280.945 427.055 cv
291.587 436.291 303.025 443.867 314.966 450.397 cv
320.342 452.562 325.285 455.953 330.588 458.298 cv
337.624 461.87 345.019 464.504 352.126 467.715 cv
358.548 468.364 364.033 471.755 370.634 471.61 cv
373.124 471.755 375.072 473.198 377.669 473.198 cv
386.437 475.146 395.059 477.384 403.899 479.079 cv
417.933 479.584 432.617 482.001 446.615 479.656 cv
465.808 480.053 483.63 476.842 500.875 472.332 cv
508.813 469.338 517.219 467.39 525.264 464.504 cv
534.79 459.272 545.179 456.313 554.596 450.902 cv
557.085 449.855 559.178 447.979 561.776 447.258 cv
568.703 443.867 574.656 437.986 581.33 433.873 cv
590.782 427.921 599.874 420.669 608.497 413.272 cv
616 404.866 623.83 396.172 629.566 386.828 cv
636.637 378.133 642.987 369.005 647.75 359.192 cv
648.723 358.471 648.976 357.172 649.553 356.198 cv
649.841 353.708 651.212 351.688 652.259 349.523 cv
654.604 342.271 659.114 335.922 661.603 328.67 cv
663.443 324.702 664.417 320.372 665.391 316.007 cv
668.133 308.358 670.731 300.709 672.499 292.628 cv
674.879 278.125 678.055 263.874 679.498 248.866 cv
681.266 239.558 679.246 229.708 678.957 220.111 cv
cp
f
645.439 245.655 mo
641.001 251.752 632.884 250.525 626.499 249.804 cv
624.514 248.83 622.168 247.314 621.412 244.861 cv
621.159 243.707 620.618 240.099 621.375 239.053 cv
624.225 237.357 628.266 238.042 631.549 238.475 cv
634.399 238.836 644.645 237.032 645.872 238.367 cv
645.764 239.666 645.872 244.32 645.439 245.655 cv
652.005 224.152 mo
649.372 220.184 648.975 226.173 647.928 227.616 cv
645.115 228.662 641.759 229.492 638.729 229.312 cv
632.776 227.904 628.338 230.754 622.277 229.348 cv
621.231 228.734 619.21 230.033 618.706 228.59 cv
617.984 227.363 616.938 225.848 615.386 226.064 cv
614.954 226.209 614.556 226.497 614.556 227.111 cv
615.674 231.765 615.278 238.691 615.71 243.815 cv
615.639 246.99 621.88 255.468 623.865 256.947 cv
627.148 259.328 631.152 259.437 635.625 259.437 cv
639.558 259.437 642.914 256.442 646.088 253.7 cv
649.372 249.19 li
650.093 247.964 649.84 246.376 650.743 245.222 cv
651.248 242.119 652.114 238.295 652.114 234.362 cv
652.114 231.296 652.835 227.146 652.005 224.152 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (lainux) ()%%Title: (Uppsala_University_logo.eps)%%CreationDate: 10/09/09 22:15%%Canvassize: 16383%AI9_DataStream%Gb!R&k?8hHegUIPJF5]+R4NIjfE;?\QtTt`(i1`g"q4%)&i4mk+6VA($<<YHh.hXlp3o6P1IA+EY\M_2<NE/sW3kGcGE8m'9)Dtr%q%Zo=o.-8t[gb:bW-5=?fQmDMlp`L.72J.\VGVFe_h%(_QDi0MU(V-ACYuk>1g@ZR:A_KQm8hufm7qj_?i?nMar`J.iCP8Dd<pC\%s.->U2f>7.L%;Bl?%76>f%Za^7PCqp70O'!mCMl^pj@;\p2\XKXQFZK`a\n8\if@H?dLBRkMk=KmIT(<o,'N*hX/%mj"<O"YNbpU%Ze'ht!$j#o=Zs:I$Ndi,=,OGcBI`qfCtE]LqP%Yl#%(V([>b%]jlbe)A%1'(oH)bhmgB2a:Aa^\d<Y"$Jo%Qf)]#*p;Mr&&]6W-c%\AU*Z.cEj(RP1kjNF%h<W[h+VG:iVle,XmC;[*0,<%W%#)F*c^g\gBBq=c?]p%GZ@CNgj;0uo?aN7)aEGOkMnJ0WSu'SSdIalg.r%B'6PofE7eG=-oBt[-sI0KHS[VrnKbt.J07tIr^5rNQusY#@u83IRB@$jrHG`XP&'_T4XuOH?69N?CS&Mm5'?=7<ctMA"-::r]2[k%fWkKM.UXrKR<DoCGiDb1eQd$?<IXK]fHk\h7maLEL8@*!4Pi<2<X##eolfNgc<l#;_;Pon9$mtCn&kYJAse%Nf5-:(!'O?nr-f?V%G]:M%I!G])D)E@HG8g+S)0t:r$BRo]f'"uafMl5fGFJQS=8qG->q5>>fC@=qnC)OMZW`Wj\rM8_*M;UX51Oe)>-DFODIlsQ$W(Kp%-e>RSXCYQ-]'RmgZ&\-Z*>e]`CY-O/Y)B^W)h)7uC)(MaX4X^]`@'1ceu@9kBt\CefXbD0kOgmF@>Ge-L5/:[Vq=m2fC`AL5Hu!L%#sY[1c:Q<GTAbau'C4S8n.Xt:0u7^H:AB[\E(9VZ4Y`P<B:KQ_ik4e7QK"ER9ZAE?O0rq5pka.YFY&aBK9.mL)2jG"r8a/+F,$8p%B@qHNKNt[BXMOq@(=!FTYpWjDSi&am'uRdg$g/m=R'FMFEIR\>^MnA/rqOTs@gRTn/Y!o3ngZD[0OB$P*)Y,a68%LmXr5-t=N=U(%2i/?B3CAjh1L*$ppFOpSCWM!-#A5D5'5**&H.Mm-kD,[3Ms22Da#N%dpka-4G.E4#Crnbt3?EaN>LKaO'hN6J3E$:6K&d<MVMo_R%Nj6mi1>WR_\KZ'3$p3%'UN>nZStGU=L7C8fWL;A.EPjrhko\BXcgBL7=-25&F-ab.:]!iAP4!bp_q%!\8P]"]=^p&k#D>WW&mP7c%OK_?%jga)![o?@]ro%4MMQ6HLC&GpLbPtCuiBR>qs2u-NP=thgr6MhI\,Vfp3=c(4*'(GPrft\)`;e$\.M_sMs5ea@6ES6Rra5Z6%[DfoZ^\gmtrinT+[DPdH=8je$nR%ZUAlK5G?IKq1>hQ5YC9CE2S/V<,`P3,qITP>t[9Tn<>?%Nel;#m[?,0380<<a*Wk2j;+9*8S%PZh/3.^XbUh$TIqDu*Ne@iK6D/[1OM5l^MW?GUVsY$TXm4KVpCX0*W#Q6#<6qfZ_b!fo\.ebD6)#5G2f=fkZ&-g8OF&HQ2T%DE][%*F%"JBO:18KjZSH!c3e$WL,B>$%8)40?^=pFm,ek4W-4;6ARcJ*on=1.:E^50%2VD2pR@pc+!c\ADg/>\Uj-A_@Z^`g#?,\g8J-#%UEskLr?2YUP[=X3K$P88RUr&1KAK9."g&2n;Q0`CWWr0X]S(N?9G%uW7fZ[0bAhA2o/N)B"11n@RYV(4&QT>1W?Ii5VAbM&,n@!p%9JJ1"dX;ICC-2Q*%3WUb\[nR>TJm%Z;D$qO=.gnC>I@A4).M.S(QAprec>lABLfC_3Qg5?Xr1+E_-KJL#ojRYOk+Kr>R;q-0@n%t%@B:B-Kp439VOe(:<'m^$[Xp[PU.P4)R&NWF7=*LbAYqSaL^MItB1Sdt"?g5O3!Z6qQ1<))+j)5i4nI;IFmG4=M7*[*Sf+[YpIh$p%'EA?42od]5QH)Bq,u"H#MsnSe28Z,Kl\)W7Wrh1/)eq\h^gFrGQ*H:C@7tN-Te=Y+BWYm>]I'`?.L58oh?\"[)TnM9@h#DkerV-b%dL>^PifeZiT&j:GDeVrlR:&^XZs=R6#e>^kUI$c913O6W8A.\)1`f6iM79Ki0gVL5S1?f=oZet&0Q+EREDXn&M\>=uO!/ZBOpU@)%+aK_:jNO)jSFF21fL0ja__i]]0Lolq1764a-r6cXBPlZ7)`Z:R;1t1CYU2u-BL["mX?>GQrYdn'Q4?+?98l0kWe?ii_]UD)#gP*P%I"B>"h[Ef]!3RnG&4t?h2ae%(#N?hdh>tABccZf.J_-@$d?C[lA&8=?!aKU#G'ZKWCFfVh!Y$l73-C'Qj[u7X8'FQh6upR@aFIG&%ljkBOd2PV[<&l3-aoV[D!t<j%6GW/LYt"Mr&3B$iAuLY'KV's7Ek![2N$TB8)<>^-HS4h0dL&;fptQGJKZ)mcB2"F/,L+;M)Z)q&%_k$l9['<G/^^=.W<N8At#\d=//]dklm&7Z&0B:al/Q<Ir]>bP?ok=:=jA92e+oFYn.Yn8T@g_MJ.fBn/`>5Sed$[nOj"[n_FOm>%%l>e4"cQ(Np3b'*PX,'oQ2F-*C2+SY9,cu,P3*2gc6"*cVken?h22$a!P;J'2>)@1u\00YUI0tYj26#16k8$Vm>apVT!QrK#0KYF(%Lc*<%,kVVW[YT"11/K&l-+tEXOt%_Q&B+pW6W?U@:09$Qe\bYXQIuUS)Bqad0[>c#(^k@*aCEEp80P4C;U_[;:F(^2HBfbF7JJS_%LS,rHO>H80XqUY;cin2iKkjY&9ZbLQLinqtA5c&lW_1A\376aBd;i_FR'N,<:mX]j+Q-8i3W8WQ58om!N%n3r.gTu=+ld:n,f/-5%,RSWqIh9khfd:4.6Fm8I++f8mcX>QWkoD&YlW)LEJekDsC;b#pl;4/r$u'5B)A0sP<J%P,EEHi+>U@NXRECgP>Lu3]5sMrB(HaUX%SjCq3=\+8scAPm_jU,<<4b[rb^-`i9E"2([NHHntBt!F5g]m@1o*a"Sb><s>1!3c&PJMC'elZOq`"OC`'i,e5/2aGZj,a@K_%fL@%*jmD40f#<)76hiiG^NC9*^O,2OO[Z)M[T#`\Ko!//t=NZ8DdbsqiIon[dsp94]jIJ^D2[iO*r26KMOnB&`Sp(,Eb^&cur<B&mbi6%bfA/KWmh0lQWa=W0BkJr/=:X8D%;-gWjF]V3gIgY_(kTib5e(q".%(E.2<F]R'@f_!ema?K/Kc9:U\Fl1pl+Nef7A[CtZ.ZJa!G3%_\O0e(;e*'FALa5@=i?)VD5Bta;uJm7Ut_Jp*i9r=r=O,1@5od2:Zdb.D*_`8]lcC>7o;anGfdQkBe"=Gt^Gb(8e<K"6G-T'XAN<%gIldK<RRRPL5>VlFI&$V%b%snAQg1n_a'VAD5&&AH'h[P/X(*bO<,oR/7B'`k=JRA]OJpjb#-/M^R'&WMRZ#g+c22gZ4L35$Zq\X%dSH!K)f]%]qJI]c4H!+(2NG#HZ)4`tWr\-DALPI8*gNXOX/lV!3s[pl_cXGnTOLP0qa:@KI)5b\V%6drr$,aXYdPf8>i/;YZ+h[b%7#<YL$Eh4R,L\5S%!<V*ImIAAJL1?l1rB268($4oS6(tuBFUdNaXYKoCuJ7=R\P!nZ`/1U"O@A8Ra?%JY@[-g2.-DkdeBY:UsDQF%^J7[Zlkif;2qDbTZVl'O,Q"Mk@Me['2)&6h]N3I]6Ja8/6:.\7",$ra);mjPk/9@fI`o28?/Ik@r7eE3ir0SY/1E<q$76(=o+"AB%[ZmS3/h+<q`ELo`"tn@ac6VC;CloQN"0f2RFuF]]Cq!$_=k\k6^JWlsHS=*'hc6X[WYANDRpGk1_CI*/X@\iljV=ZMWo;"Icu)>/%k>OHH\Xlf&p+/gijJ!`mX--.D\R1ZVY#8h8OfTh1l:Zd;>?Ok@Ys1UC1O)TX7P7h,9GdVkr<9-"$0^0M+0fe<gS)/6QZ1H3Ci6Zk%aOV\3=H%C2_M"Q((7-=)YfH2n>=*d<MLChaGK];UWC\Uo4Y"e$@6Q9L-V_#_6,Kn1W\-"WI[<p/\mBJH8mS-u30KsCT@DpmRZ-,p%%pJa@!M>rp&BciK0)p*JV9;b:`n*cYQ?gH[=0`:8(b9Z\Qc";EB6c(2[P6:b)r_^0o[B4@M<]b9!Gb)iei)i4+^p(+^fF9sj;?$C%8&ua[r&Dj72@=4D_MII_T:b?O0bgu&Lr([\l(7"SPff<$0'"0Z_:!@tpf:,aLq<6TKYA\a6C];`=4o*&TTJ:%b8?BQ3;sSqYV"hs%lVd;H:I^IP\\\hl/f?Ng^"+5F)D\<bHFHAO8J[N9Y6X*(r10o1NoK;d7Q<0I]okTY+ZZkt^5!m,Vp=h?$=fbR@YsTmO6]AQJF+9+%@PU9nPfe$"[$_Mb;5;1Wp++2/0KqmhU*(i2)@=JV>#p=\mnno5l;2@jksdChZLmIF>!uUgpE^6eYuG%8QGn;KSn2D&X>+N8b#.\V%G/4P+CWFN1(Gd`jLCu`Xm2,;QFD9W34Zt(M4U,,)fNLb@=h]]ZPON(=g6$l$p6S1;T4pW)D'3:M]Q+b\j'C*k4J(%b/@ES]242s*%>Rm`jZ,M$Xj%UN,%U'jbEi:,enqu'iOS0."5W4(F@_.lgiKC*.<+@WeKRJldeFXuY81VPPU:;:8h>HJBQ(iZ=iuu(pMQ?Wc/.f4g%Ga>eb-60"`dXDLDVi4OENY&B.dg3u>$q&%L=o)'e7E?8$_3'+?=P)41P1#A+<BVAI\hG7*H'a+l&ll2;C_9>;bqQ,0dV'V_VhdoE%q?p!Y][%cHEP)Cm&I=9kdHE,9UhjK=TKOMETQ+,SpeahVrCbS55k?8Q,^+=][Nauc3F-mXK#7aVE$RquYo*3O;);;JI;Y("$GN8P%^PKtrN.!?7.!Fdd*Q,1e1+FR>$k]Ho,Xk6sP:YaOch#$RE+J="XT>1JD&Ff>3_/BHiO&se_soG[>@G]XHER_Zb$!j>):rM(;jGd(%B>)E62]S$%b<1OOC>=^%>pEP#3?#f"/1gn-F&O56;AG=#_tP]m<(0@*R^"1%=Oi*7@/2RP@^<]4a6r%BNa54/Ac&e`Ua&BJR<rpK%-D/B+8QqCm3'DV?#06'.-p2iaY32-Q]ssf4%H6!)=oRr?+nd>EeG`bY8%WFneVc0P4toQK>N29'<uG*"r<^s6hUjdFeY&;,_)AH7%_b3d-pu;u;'t,--J!GEhQKuo,/U?.GlH!G]fg=jWp?%0hV'U#)]Z'aO*;aC'?g]!$P,l^a&pnlaiTlNZ2(&d'4m!+K=&n+j-:pZb%#"Bo`/]inciCd/'bGiW4'h=+VQD5I"PrZ3$@S6<^`V>Xe>3=WbX=(YR@E%`k39DB'`k1l'YW"[>i_okX\UR+u%IGjb.bb<baOGG'%g]5J_X^8%QIT&Fec>-WBihGelV#T'[a6sE_rl*di++0Dp!=,kFGsZB<Q`8pkr!$j>'O+KUfalW-I:YMm;6QZ,W7c;`ZXnJ^_qued%LNX-A")DUQWnF9=))XKWi*,mtemLP'[I@+TWn@N3/YBn(o"SlY)P9OY3`nbp&\m'el3dls2RIWQ,WIj:_-UYh0cQUSe!Pr$#MW,J%]ulF6gR>PsTD<HKq:%Qdo62Vu2;=5)+qDjie<$R;GkNsPj4n+6;`bm>7St$F3'KY^i?UNa5D0JGNXr6lStQB@ashlLUIn<t8qgmX%4f[#,`V"9UHA[sMn7X3R[9C#L,L68`9'lH4Yn-bmV]ClaGV-jK_MU'J$X0Kb25aK`btoZq!%AZI*$OlCAr8#.>SJ8lVIgaeP17A@%_5khBM!no)%SRC1N%h+)oI]qV,8d^,s%dJ;honO!hGe*E3=.as4HCHXYo!t(01>O7\OQH`@ND4giRN)QcrPF&J4-fY(`.60N6!]Q%528=3#U1Wm:Q?Hi$otbh%$/.03i$1gnfj*R;?Q7F$Mi3:d=CP&/Cfl2C)(RPp"DnDI<-1:,B8W$Q]b&3SjtGS>g^%F[B+(B.:Gb.%Ql]7`EW,]B$_dk%mSad[j/od*KIY=fN@EhKEWOdY\O<Jh)O#.3l31hZj1pjq%SL?nP-@@F0J$abVTKgO+7<.ZCo.sil[m^o1Hs>F%j];Q4Sne@VHd[qGHBOWf"-:EBn_rHX/5p9DcmSpC+ls>0lRM3jWT@g4#iGD];CfouT`o:?/)keOO4\QOaHt3IgTIf!AW9l*BKb1o%j0BH&Z\9Epf?:%p!IV"Chd$0#1*+DI%IT9+@GrTH3mnoXckrk-Z*c.Wg[Q9NRSQ0<4eXcqI7en^^Z3B.s0D>7[,osL;@E?T=0Aeu%>P&rV`a;%!'U6GJ%3[1Mle`jXQ.ChS@OPqI:\Mjn(oq)F69Q*kA=,9C8kJm2V);555f,RGF@jDGnb?,2=e,GBEf!tHD>ebU1.&.H%jSuIF'XC07PM_&EPk4TpotPQB:Ss#S7!lt@)"iEt$-W:Y,B\k(;P2gA`=oTo4F(X5b9L=#bI7E&Sp'%WX\6_]%0]g=il/A<IGX_g%.*l'&42KApRV,WSk%(d3Q#InlIJZ\$@FLF(L9Em^7RA"4Z@?R=$HSaA0)&O1X8uFQ$`o_HH&LCjFb$t-:n83)%OdGAPSAc)n2beO%\0%$X5s$P%Mq?\QY[7!7Du0APOPE#9HTW1!.q%a*ElEX]*mNQjfEdb,F8ee,>Tt+)X?h[Z@J^W1#02X-"0sapcZ62fHGluk=ZKr7%Sn+kAXb^mGMKMmp7DSII=("&NY>Rn1H<MmcY6!p?osOr\Y0b0J4/:fEpX^faM2\k#)Yqmuit*9LFsfq2eW]0EV7^[H?;uUu<..K^%2KHScp1Zu*Y)@s(C3-a[j1'b)0OO5SGbh7a[iuT-W$?-gBh.geL*qc"60kPC6drOhCsu"7b8].,Cj.soD3"c&57%-XHI*hgj%3Tl%f?;Sj5I0`220;7[=J";UlSRPmq`YU-[!mr<FD_pGdOY$%91\1JWQ"M;<^2&0%Lr7s@Pf/s!F?.[n'XsB%k/WB<*q-YrSX?W[(Xpb%^6BEPTcW8*1#I;A_aMFr@93X2)JlhXoHC=Ehf`UL07+VIm/*@aHX+:dYQJm*T`$0R-J=_UFl(9^feQ(?;<>Afj<1BE4Z`8@0'/>L%X6EhO^7Aog=N:0laYpWs&P>ZW[QLa\n+$19hm[VhbMA)+@6aN,l's>K3D]+1)75^k4Mnf/Sttu_UkPuXr\&)qmP''S^K'#AR!.8M%M64ghp2g,&T6]>Ya[ri5p<"hqo_\Kh%CI9^QoLQsUaOI\nad\^g?u?*??]Vgg:@%M?2LLeY<Os,bre3qaNr=2q7#"$HsK9[?#0FS%G@(40>e8J^X81P"%<Up$1g5,!YDpini3&-5)m)RW:ZYp/qi?6CP6O_*n(TK7h!(.8k&0)>O)BD*DgTi5'R0`H5!QeZ`d,0pCqL5Z%Z-dp>=.Yn`]<9`drsV98AV6[<\]+4(:;5/%lTXCE[+io5\)Bh`n"Q1AZ2T6n(rt.!Fjsk'ooC@J6q8_NHN/,_5jdVEi8K0,n(#GL%oAb7snbVa")`L%+F)N=Q2@O$mo5`</IdFfDoFr]6DKL2c\'N<_J%E>U93Q7iNF.aK4!;J*\&Vh(LUR0PMQb(AT0+r:S()*>Th[I@%]FN2%OH)X&\$D/L(gVTBmr%@foA&]p8pd]6h_"\e?d6i&Jr"3T4nlZDj@b8fQY(\,=#tVSH%i5R.SB[gV\CR5+5^[mpkA`0Da8s$%\\W4!i--lFQZM^d&Fe^%q!es1r.^r\o1&^%J,*Blha-N&k8a/DQRf=cI%STK!-J!/P6@u^;]LUkj2Q-RGUJ9!*oCK42Yt9#H@*U+%s5a#_jDfR:40Eg9aO,`FVg[b]\2\oCU^Ek.KW=MdVI&WOrtEAu;5>n>Eri=hE<rW;l]V/T1kWOaD\3qJc9M7(r*]Q/IFjF+pc^qB%YF"Df4C/&Vep4oRlSUui/7[4NVpkEje&;Id&(J1=G^R6k1g=3TbEmAQ1Yu(.kl$-MN_eiq[CXt>2*0Rf^kF/_4/hXFe\<$KDmD!]%G8'8LJ:kD$J>=.\otM2&X`gb5!AVpfgSa1>(<jjgbQ$7@h)s-/OOO\["6';2plHgWG^dK_'3bAi0qkIR,1HH3)`Q*f/;-6,<W>!4%qW_FU=WORBLFF.>G7+mMqrL$mao6^1\CtemEJ-@`==bs_rnI5M@/2GWjo5irgAU^=J$Cp2&$nRrq=40.].B8O+#NPbccsINaqA>j%hZ'tL(%4u+#L2D'/@5085<Tt+:lDL=>(^GYd!WKUa<LJnRfD>liJS%#b8`@B^E;oj%p>bU.fO'n"lc?+DPp1kVVM?D@))N<a6upM%1:-s<rrr7k"Q)fJX`N6mGFAHN%004's(N$NR_?]]fL+]9iJn5bbaf#)A>-.kASTFt/4I\(07ckncF0qH]qCYa^WnLB^*6t(\$_M`%bsiS<mB:+D*R60\q4B,AODf9L*6!8_X00N&]35Tp$m*Ml^?P_i"RP!<30%*.96YIY;gDG6@]GF=?]?\PZrP?@nt::&q"BmFhm&&Y%^XLco/`9,o\%JcAGqYOPRkK'Wk0dihJ)"a]S%ZK'>Ukp4WLZFmri$&rG5JD.^ZQVtPcBcE9V^4`hr$["m8hSu9LVRqnueHHBQbKg%T,ZTmZh*rV'PIluJm7G2W5[.gmhNi<DkhSKF7[(?UXad0!(#K@"(4@MjguT!9[1qS5i"o-GLLGOmddj^U>*<b^qXH_HJ`F/RNGY@%,NBK(C$K;N9f2pd^o@D8#1iGI:d^.2AC1.QRK(_5="h=2pXj9:4?c"'re[AWT9f0iXo#TII5?B.I[--0<EHc0q-P(bG7j+cBlosk%0QgaWJs1%3o\JhC1"*;rr$ZZ@+Y(;Z4.]+on)hf3]s^Ecr<2QN?Q62a"Pq+b\*&KA7;="N`H+K<&Ye?9H/-oCTiV/-hY$s(2iZui%lSaL$Jk^cnSf_1]Hk-cAf\0?5U2??ZkshHa8d^Y`3s")KhDMF0jm%.ijfcBe0cr'LinI&P33O5h&>F_J:Z^F/g[h`sK<o0f$^cRE%rIboUkc5u6p0Z(i.n62Dkm_O&+(#'7kb%k_kk6&%l"7hE\(>=Y2*L[B8FO"C\SL'pdq6=9f^=G7X$Q;i[=)`[O"Gs\h5+t['EK28%]NQAT0La\"k>$0#39dH1o]P/.D4e#B.arP)N/=YL,drf=jkAI[`n_k[/ad>ZoM(OYgh7e7M&UfoLdXV;d9mZeq5r\@X>o.\a[kX!%HR.2?,e2u&>]I0qaPuL&@Z+G"7b7Y"P@CBL)oJN(f1qH\E+.]>X`MOP90s0)q?cA[o`?b#m3^BkqH*9rjtE+T?2iuYI'!L*;5`<o%Lph4*%>t-.DBk5g<sf!ALE<H`Wa5[p%bpIG9c1><%\Gi%(MK?D=Qcj>mbAUWJJWJ.$E/pY>2@rQF&VciYhi_9OAi"-kM(KL.>@*C%[^p0$KfVBDrmGnHV98\%Vd^IO/dKl,/$O:XT[#-fS7I_2[<fg(kKoC1f'0p)aB@bI,B\pjc+f^n.BmoP2il%KWE!-HqhFP[,ZM?l%[sGF+Pu?dJ7<R&BouWCg^$\8JY1[Oc&hpa0C;ErW)\mn>>5rn#L.maiA4%Be]?,RjL%ahLHU*:&b1*E-h:jVI9Vcqp"*a/oJ<%+i%D'jg![2Z661cTp>eQ6OJ'Y\u%#`e`0i^km)[<Vk3%(r:Gr71_ef;%B,L&>:]3^h?>CT%-s;6lK'589J1bt$+=%3GF<lb!,nga!=C%d_C5/GC.Y6ToefnlsrF02A>c^29OA0oaW_Ngr^&TlWrYuH.fhGnSAD%j:Uj3!?(F.Q`4Fib,c:_b;DAq##!@R>aN?="#X`gf<9'J%%8PKFO_T:]7;[;$los:8)Z;jAZm%*gN<k^oXcZ[>5eor9;nYZpk-=[/8<Gl6Q0WN9el7h/#3cLb8e8VVDL,%']"c(nL=0(2]7Ul-%A&.S1nJ;JXLN_j16qe_s(-*#D^(P5fJFL,>3nW!poht,Yd^@=8mcnBD*`gS)55o;/B`h#ZHgH%D?e!;%WlM-TctL1LD8CJD?\(Ka%>JF'X%oqou:2^Rs4OC"@Blpq#*:I#b^eFpM6`@:<+u7[8KZr4;[=_r*8utc(:PGLf:tZY$KBi`7c;6S.FfZMqRc@V]=_lnqn7N(E%ZZZ&sq:0AZ0g"'!0.9,tl!shg<jNT#VK=-#N9N_6'"O0F2=Il-0!r;oEr!PE,TBHK3-'<MQpMsVO#8$4@M0`.2at<ABu4;KgR!E<%jJ?4gh0Wf>K5qZC`-=mW<mRO>*&cSJcF/cqc.ba<YmgX=SXB?7D'`lpPH>UV--pK95'XVPhJirH4?Idg#Kk_<ho<V7`5<7-/GNPT%KV2%U$pmOcoqcSH]c*$SR$&<RM![Q/M0(Kqj:H7uP'R=P$\%bsMFHZCn`T*->2?*s=4"4S'UljQ*UqE:h'Ra*aYp5ZcXqD$AW+@Z%P/'A)\KR_r@I!gD^;1K@!SUP$Wi:EG790s+qYjQGiHZZZR0&)P\pVjg6?)E&6eZlp?MBG9Pj1%n\3%E"Yl>"M<C]iXqq?i4<1c#H%C*%o5rV66E/;Ncn^7USdZeOH6`/$66@Z9oAcZ1<_&!e>\Q;=Nm]8g$0iW<Sm9C(_9HYMO,VPKHB%[ND=*dTkrdu4g0<d!lI-gr!;%Gcu%5kuDK5h!M#1REoZ.g+VPsh0Z.RXaRW!VAAfp[AfG>guhpNC2*Y2_plQ^2g9$4i=R.0r)K7jH<WP#>!=pL9s#fKRSm>$R&Aof%WTq>JUT8MJ!4^aHZ#TDW?*?6!@st[i^3s,Z=`<&%FlgnuWpEtLX1:QpZbCT]?@G'8\@LdGf:AHC?]4UN2re_TF7i8,IB-_&WNVT=%DUl_3h%HLHZ_*P`.uU$.]R;;E\ic[\^@0>K`qh1PG<;Aih(LJ'nubkG:3[[@A6l+i44AYcTAD#@mo15$aR?S/?0Qfg^7Da0p$J`&%1iZ]cg/G9+Fg_bBchlVhF8HhY?durF??Nt(>^_JOFPHe'Y3u9;`X_iTp2E5tL^`S[C-D!%(ZG\u0K%bPWeF4GTZ?>_0s.Q1qLdo;%rik4hjb&hO6-Y2\`n\O6r1M'K\PcKE%q5d7Y2<Bm_Q<]]i@o/P9)Zrb>/Hr`9]>cB>YZ40Vm8JWmF33ljq8MSHY%89pSN0VMr:Yn%%8.+U4?"'BYPu91Hq/ej/`(;tfCT+mq7H@j&;OQT?e+/4Z$&rLJjGB>+"@0`:er(\Hp4"eq1JO.bel>"5Md.#&dGJq>-0eXNubT3%riRUX\cWdb?XC,"kPAV5^,ouBlbj7dH2FQV(?RP.^W-e`eD76LIo$t.]W/:cB:\eeK,PQ`Q2:6Gc`o9sY'8b>Sk<WCEJ*B\b4bD\%@DZ9ORCVJYk#&uhVb3NJlgZM9]%Dep:\D[9HZSHP#.7fZL$2e9mE1,"oO;Aq18o?$s)c85DI#EU6Sn\LWU*u0R;mlA$Jjs;5@+/#%k*&6O7L)(YloZU)](pGR/LLsQ\Y,Io2S1dodT?XgHRi0EGKo5Um%>`X)t+FF4hTME=G[t2-,4G&<R0aPSQH"jn'AY;gu$mIZ%JY8%X6mhk:Ua!OcST=<&2Vp$jm6")9Ghk]iU"V:TB4]k^M_gX`XN81)2Go>0)*(,+Sa)U^)qc+L`c9Ykl1=%mDEE"T\k+8:GaKbQi=P0%*&"ue:E$UC>^uVA+b%e5c%XGS\Qb%%$DYtP>JF7@"9^eJ;dU'#I3,aMh:iDqbspm`l_T/b0(gsDdEMKA+)`ga^m0-4eiM3hr`o@`%.gCEB(F,C2ST8[_d\,=LqYX*5csio"s)A5J?1A/R;1sJP02>ft=EPI&ZeHi7YM(T>\hUt-*'s$m\UHBUK7<9kILMooiH4>_cItc*%"bnW%Mo&D8`SQ+=)[<FZ70i3BDCgT0=$IG;1Yk'n']+8261p5drI#Ru8)_#(>^"A]b@;MkksOs6qel8CpLtEJebZ(_VgQrS>q5%[%ih'6kONA<:qc=kLT>*7\4t+$E9>-"VF6dS9HTVu9'NUm@4B8?(f'mCDK\<nM=a#3o`TMY[1VNDL.TKX,doOLQqS$H/SpIHPe*B$Z%qDULMp$TGkc(hIHT+[ahhXBi\SE\$Xh,D&N$N!Ihk$,]DlhYRArG=1Gl/&W(<VpSYp8N-.9pM/H>E6PP^,##Vj\#POleQ:8Ebdhs%l%f)@lA)R4Of'8?p+)&.B020>K[r6.f2_.[<W(<uErGadK"_fro^FYMjPSeZXeg^6kJ(BrDFmKGqXUPto$hd@T3cn0[QZWN\8;Yo%^+Wf=eD9$YqTkRoLG;RDkM"Y^Z<^8C=S)HphO?]D`jbrDI".O\]fR83[.*b;h:__UiC;VO:1rtj;m)d3I[ZnLkJdG`>%RHl;rn1T%p'IEfq>-pLomNtYqt0:=lMP,M_phJ.g4qD-^:(8Uq/rt$[pFPiq!dQoI'4fkf%lnMh^#n"SY*r&cS`&h>dL)90t"Oc?Cb9&IJu:8%I.d[?b3QYm;tH=`Dtr]:rQjcYb2,#.6K_-&2d9X)563SgRl$^$Ep:ARc%.s&r^P0CGtGb7Gf.gk*nP9F^quSt!dCOVQCFFZD/S`c%76!B8m@XemT@$O6Isb[;k@XGZ;c)ofLG]jMOp@P\s&_i4<2is#UP(q8)=WemqYP&Xf[-9-5>h^AShcK7h;7R)G_>9p>m,n)G%U_U%Dc^u+mH60T^BY!$:1f.BrNuA\0^.?)G;K5k0Zs:UdmJW;#_J2m?K28J/hW:lSZ^j#+g)4a9>3d1T\rOrmr4IIBHqLn[)TS?e\o"]%7?TVYg*<Lek[!leAa:O&fA1Y5<E5C%etD!dRokKa\%>?,Nb4^lhG:(1IC(ntTjHpLqPb$f(-#r&>5nH0&ResY]fa&/Bm1)UqVbWn%mCupnN5Vg<n_6R+!QPGgiaY=^KPr8&KRTc&r&Mhoa6u8Uc<XHSgl9Vp!-GW^r]5Q',oSXmi@Ca[B!$S*1Yr+iOYE,Xp&I4A20H1p%]8i.um_Tcelg%c/^^!D"hqf-"X?bn-GCO-<0jQGU!?`m7bsHtFO;L<EL4JX3RmCn*rC5ZN+>A??mF,S?q$o:6gEMVIr/qIf2Zcq]%Use;Il8!cA4ulq:^%eB)Q,+8@/FU=_7QPsF%f56@o@m+9p>b;%.g0KU+-#kqg^<oDVf/)R3>f,Pb6NW*clYRml^o=cqgL7?=kVDF%qkOC:)%'LqSXh&?H`iH]gjN]^^ZPNcB;I/OXuqXH.BBR/B'4>l_L*!Q90OY_NVT&]3o4plaGPeFMrdu=oP@f5?\8H*ZO_tc>[cQ*%r7FoV^3@'"0(aAkDXY7P7Th9DDI":U;W/eP^5O/#_4YQcm^CJphMW'%a]uB<3&Q-XrSINM;[[@q7eP<U?rXmN*_HK%Bf<+irE0;<%/2XD]G;Q@F0m^,&)HILR-BoW][]XAaOG*/V0LY(ro=4QJCo[f-BmomD&#$t#-]a"L?`WeUP-jj/O(ag]Pe<7/=g`LBTsONsJEoNV%f_$2c*TaoQo_tHkI$`-$7*1G"=".Q0Qa`:V6`cR,MC4<$I6)7+d8C<)."2FN83uSZg1X/%W/7lYH>"t67Go@^?N$&fRJ'.OHuhNl%:NF!$+(L!nQR&r)[/T.!7[=0\T6=+DD-#&jNV;#p>WkA-%C-j=[!9&#QDstnPUd0Q^/*&/nCCN#mfW&<;sDB?q3;/9jA)W:8fsW5%-68'>0TuXfVVqES/!t"u#pFZo2OA1MLK8AU8XFl(3hEA",peW$g"fnC.ikct+_t_Cr/NVD6@7_A=VAsi5=sb4RfLIFP'0NXKdGI"%(_`#`6"jH`r*gu=\F(K?C^k;'qlitg+5uId&!.b3K/R%rh<uVXf==5?JK8YZlpO#,0t?e'8,N9dfc.e*k2"hlQ0`?%I,#!'I!G!g%GP_A!_RAgKcM$d$ehBG->h6O$:e9T4%*Omti^EiU9.:X@5uJg5+Apm6,b,9PHO5N#Ohm2aLfI<;o4qhqT:EAI]b#DO%*?gqg*H\<%$uO>BHG^2R&Cf@o*T$0,`('l]J/^D;#Z@fZ'Mp"]!0>,$/GFL8637/LpMO)_5B2,kX.KmM;4bseoNKSM'f*`a6C*!Qeu*rb5,aYg%.U^>U5e)C<97!ZqaX@,%X8Gkn0/CmeDX\"aH<FB5dHqNP&gGL="'MfnOn!Lp(L_9IA*V+D$sr\dkgIL"K-s)YdUEMj-dSYWPA%`*%77d((<=BQMEf)Z+A3]qa];4NH_^*UJI+Ick9)a&]oW_1DNtC/mq5?-^:LA0sKU>0Y$%73E&>RDXLskOomN3Z(@M7'TUKi"tM1Hqk%CB-FfnX;-X#NTJFdL\=5nS#3@2Pp/BVK<[N\O$L1>-,R*VjS-:-g`XC-[AL&O<km`h<SBL%I.A/Ca_`^qIp$/Z5;&B,LH8OV^Zr7%qj!pGU\0VqJt?C;\TCI$M^Z9$"Mj=EN"XN^UELsI=IADUFU>K-@`KNb%sbT7gLFYl[kPQ25/.-)3^64!]6(1`;_eX;Z1fV"pq@B/%F5O-6ep%pQ<m&949Om>W<pWKt=!h!?NbuLi8ZT45.4R!Ta#CN#YTl.22#a(+oeSK2;D2,!R!h4H&(AjdH8"4Fa)i*R+WO+2L@tjD%,G2?;/gZfXC57B6OWt3GjM2/?R^D=C]Z6@L7%AbKLrt8DR4H5OkFP(GN0.eO_b7A4#RU"?"=.1F.Cr`Sh1C^P/:#]7lH5&I8D'=g%^84d4(ZAnN>i%])P@u31rornb/M;34rJWDW:+*CB9)W!BDOkVoc/*/ka=!;kffBHlfR"plK+;`=`nMo5D(.`<!sa(!0lj3ClbS>b%B<KP+&fp6'>Oo"gEC/67^^hf)TsJ0\/Fe1`R([_brq&RBR=EK[0lhuQ%2:pFY`ql!%.#?Va:/:^bXM4]p(7Sq-.W^qhg$<r:GV)Y%RcL`c$.RXi;84qn\1D)*@;Yd^*;_ofUfW%:(QR\KTnbKjJU)9PYVq0[ZFGsP\hN2J5\FTI>cP"pc.VWpf[o(L>-V8tlT"TdW#)-8%a3nF(j6ZZQ??1aNrFF?2l+0\`R)\cL2NB\SkX%BE^?k/P0hU?VQ][:QiU"nNFJ5lgK86B&@i1'2!5S7Pd2`[iP.381@Y)hA!/iUb%V(6+4FI%b,1K_68PrU7mO=G%`(i'klXs?Z`7$$Oo,G1n$ScUEMI'!5;2*o@q5#)mt.@s,!Ou'=D6noEdeC$d[>"X`$-Ru!_DMjXD%E,mP`hnOu=V,'Eh#3Gt_]Q4"9mMf_#nlCIIr^9aZ?sSN@]tr!?R>H/2`j3OHPBI/I.uBK13e!RP=b;K-/XB9EhZ?7)#us8)V$oVc%KnWHmbL=NV#36^3Hmh*h]\pD)k!.2G;p,]d:G=SBIqlr*\W4k+b7u@f6^OB1f9\3K@Lc[i"s&&oj6+dcB@*Jd$P&@fQ_$JZc5%B_%LFt`B/m"E6%UFAb>pNWnj;bc'%(]\P1-'I@)0Bu3@feZ4l1HJ%B`^;:ko"TZ.,6dBFQjZb_B'Yd6PhqJS=F$])J<obSq0\_"PWc0%'M(fXhW&gN5mOmNDWWb99*ME20i-@A^Dh,91jc#7n8pe:=n:W:^>lcbP@d2@WB\S's.n=W`al<M$pg-I*a_NPb@AkZ/D.e,F4o_X%*5jLuOWN3")%9D`k2UtG=:.Ut.<?=H*AV=]S#j/&%^:*>CsR&,<'qW/@GXd@%.[nD14+(iFu2+FBXk%<RdT%3Rt8\!iKKA@"U:fP%))l"UPMP6-D5(@b^gsp:Ne2q\,p4OG?T72;%Wk(B.kdBCp&:&DKo]Vmcape(hQa%MI.EZKa,DdS0n#XB`$+(2k!JMjls%h_@ZotP%.Ae;M05CpT@,J[>\!J,>a.f96_1BM#r\2IMG$G*rBKK6j:3'fn>S\0I<Ck=9]BlA`'>ro$V8'Sao/XFpmDK[X_)#/Acmh%5D8!FK%0`e'a;`ZN4%mVG5JbPH_e,$V]K?h7COiQ'GJ(MK[&:&X*F(1;h+dBkp3]h%ML9g`JO6"NL@6+d3Pqb":28EuF$=h1^+[]%'8@25K%((U8rS\B_O^%H9]*ZNLX\DJ0k^aN;J0lEDB0,Klh8KIR--Sb5_Mom+D\@]4)S&'s'AT@G?6G"\l?G\cJ[*$A[]5bEt1osf_-0W&=%/"M3S@&i"</(D<iP3hccVmm2urP@\ghI;G*I3LEJmo:3XN\npj-iK;XhV1f2fob"_mS,EP8+$l0MWKeje6F)`l-gOtCshDq8P:Ki%5qYXl,\KNaXh[L$(k>T,)Rf/%Ys^_Ik-M@/HCEYpD?*L9nJ'fu$'Tn`YffE9K/2I"6&O_J@li@@&Xa>po\m/Z>)$=kLs2O@ko#ZD%;F$,R]445,fSr:0oNCp2J5;LX,."!29ojcrm:1m,N46hd^hn>l3)2jgI+Nn[2`L`c@NmT,l&P+EBZ!>N@^60n5GK82%^&f=7d=[_%H,E$\'&rhFQpE+e1FD8bDQHNrSF)QZk$)2eq<FlW_<8hE(sB+0PK6>N3*"F'$tO?73"!,RR@k$a/ah\9=<hHM6X*b3rfCAQ^V&uG%3k@"!I4TD\+XpW7:gVssB,P2TW:"4[YEth^kNfY-9]<em6n#Suq'B$,9$VTZ%n<.YM]>rVZMF,+=fgh-"5iQ-M0q9H%l5=Z5'B-F%..85s4s)EV'_J3miPmpPRQ2I-^^8Ntjhm3S*h*6:jho'O&N'$*i2HHjdF1p4qere9E&$f%`Qfg#&!u6,!>EP0$`m"j8Df*liF72>%KP_`gUl;lN(WdJoV\;nh1Qdf$$n'eq=jBG/SWXhLpJ8h*Y=Bb#nKd22IaUsqBAVUdINm)/0[P(<)"f\&N]m-bml/:ZJKHGj:/_7(%dIYY8pJ]a!Ah+Bjf[:FQ6;6V!rY(pg23EirUL%hcK3i_EQHV>qE\*=^\#q>Q810C!j+-S)Yi3Re7,A,ArM6],2Xcq-)1rBN]`8_+%q5t\)-[@p>rbYhqa/lPPn1/)T]aZRG<SuOLEJ@,K(`&DH1o8Y@l9Ii(f1BMK?N$:"7OiL<\W#%=582+/<N")5A>D,\&!k[kad/%r%rJW$]"8QDohC:8lRTT;ufSn>HYCR1p`:<$eLd=pFRQBdY,CH93lMPZE)m7Hs=GUd5/WgC,.*!['$A\?-^_8li8WJl>QaAB/9naN:%DOEL"DE,COe5Ws!4,C%$s-?WofVl[*;rNo!@i>5$d%=H/60/!d.>^jZ!trMb&O'rj>tjU=C7&re_oM$1*m>0\`m2FS+s4^W\`niU%1-F@S69#pt=tF7=_FZc!J6@>L0tQ9k)3UI6+D%@)5]ehP4bsBj-b_GjQCOf97i,^i^Fk#h[;Y`EPKd"/ZG4rcZ$*hSV=p_I$Iqc5%j4E!YoA`DZA*N't>5RKG"lHbLU#oUfIXY;3e)o5ZCMXY^\2Osp5)W!U45:,(@U[+`m3Khb\!aR\j'_X3PQJ;->.qR>8p39lbW<Y2%q:(W;41\HS@8L_D0@g&nPjC:N_sUN#*Ybg.:)js$e\4i%`EEO[fL:tZN_M)ZBK-0SY+#%gN@)9r"e!\.)0X"d8qu/D]hqHC<2o>7%3)1;)n)Go8LUEaGa_o^Ea_nFcnt=a0B"n(np>*bj3-m]#,RsT1"hf\<B8M7m*8B1.XbTu#Q=!`:^PU_3hA4^8RHj$:,uTg"-!F7C%\[Yhgd,WPh]=6n&:71X,&N)t)053%.TiTXfg^cMf)ms&SXl_rpO/SB'J5`o+T!cXD29*3!/,`K-I:o^GJZ92>:RZaX_t.1^G*?1d%4`[gr<#P!K\KR_eI4m`&3?,8p.jtMV,9B&#Q[4MDJ9-,P\jS/jIL5b_AN["T&>Xl$%:hqSL81!,GH$RNIp@/GBb,MsIb\qpC_tG-%MY%CN9fHf,B"2Zg3'Y3>_G)ML/hWJCrr"P2ACJN:"Cq4<b\Xl#>e2XF+,ALg:-<5TE].2+/^`A=$"_T)FZ&Xt+[]nk`B!VE2"E?R%FE.17!F7^ZCq@,]]#`1<"L@:Oi[j'__G)5D/hY`CH`rXUVFu3\eHE5Cic=;#B1F>39c'_7C%WjB9c"%4oZbD9B@Fi%?`l)IH(#nG%/oLVs:IC,,:"S:Q^cR6?aJMV=/LQr\2\a8$cDKpr$K%[<l"mq.0fE8p?(?\8Rs6hs>R-Kt4je)W\.3Nmc_cWT/a5>!5B\qj>V9=3%HQ>>?/hVQ']JD="Cq@,]\u:&q5FX88)55fj-B_)i+d6[CflV5EF=HtSNUHjbbh"o:!(QAm],tEiA5!Q(MVpY[DN8Oi:RS$_>8NL;%Y:^<\<9n"hqs%(]MemVVGdD7C83JLmo>Gi/(`(dqT[r]J'G@aDj+6J#.?c1$FM$=)oFqNCTC1@VOADJ`:N6UgdNhKnSsifm2jDE!%p5!2OSmO[9<C4nal]fIq5`6pqF>lV5>5U7%iV-Sg1WbEejt9fRI*AfZSFr>_PYA5rM0,0B$(cT0=^6&-k(Gq4!QN,RDTQkB?'^<+%a5O6!8W5'p>]c;Y=/hX3c(3(,)s/,Z@T5nU3*hu0S+BJF\U*)$=J!LOlDI=tYChla_:2NKa3Ndlh90mU"6e2q3uX_^2rM9!_=Y8c%cLXgSO`'+1hd!#e_rO0)=gQNf1"J`&OmOHLrh>XIjb>@MOo>)Da"N:,0)j['8c(Z<Y#ZP$6A=W;W0>>oL,ta`BrI5SVkF;7Cd*<i%b'X:H*uDrR$DCc=?O*/Q%+ig=.PKj/;*X)]+S?A0h+=$OK26YfB7gk5;f6!(-J!LH-k:4Ah7L(:/Y2jBJCn#42jB#_D"D.L>,IMB%!Ss#sb2:I_#V%XcpR5PZTXD3>4[BNgd7]o4GiFQmW)&1(h,A46S(J1)W%06]Z$Fnq9OnuppUa4h/fGXuq=oDY>]ZXns-DZ,G,qU7%iUSuBm]l&(7Id=_MVaOVj@)0C#"_U$(ikBJD6Lpm7#&6:"#Ek2ZJenEh"gc2nTWcJ`.i\!gl6c$oe8>[V-)c"a5&!r+)=L_\g_Ot%qddDiD^'Hu8U&r!4fd4:HhZVJA[uJpkSrpoh"SD8+2]"E_d1j&Rc>QVM'R8$iu6%rC\G^#`q8qS>hE<T`7i6'9l.lnK+f0GI%3H2%mF@i=m.OlFF2e(d)pO7e7g/H?J](aY736PCpVd@2PPeasi6e"/4!>9dR(a&qh]B\_YMid7T*m/(Cj8-e>Usd^>Om\`6=rK;,c9m&%`7G?3Z%6U_I2QJHh"JOp,WbAV@ir\tE92AB0Qi[,VX%!qG9>YE`'hqQ8PJ!3_Yo&o0RB$9R"mF*3?tr!22s&K@9>+a6juF&V-4k3%9/7E?(Q!kiS\#^sa0fseOSG]-fQYp<)qkr]_?RM==a+[!A'm@V7gpMM=0]T`;/DW6o,@cj(K0];*<3UjRkC\Q9Nf\o-/(fQ)l=f^%cY5DB55-P'qXmJ9GV[OF=m^;he,lQ3IG(hXEeW5VqSefT\#mqfH,odPZ!&U5<i_M6*Zj?(H'O8bn/MX.7$f+lYarKl?cM3FjU.BF%G+!Buh5Af`+=W$8iKi?X*[N,kR1G40%o_kg9F`Fd-0P8MVsAQ'`'K[bQcc596$!4DLFnl>(*3$[g,4()DICh1Q<:&s]$q2-/ts0<%)<VP-mh9aAVWSUkdlMD3e^u-0^_e6i_u#e9STBoM]ZBJdiL+#LAcBAVTbqT&pTOPW9B)W5p6uS:8V8q]#*nqs3JX6P'+q<^*F<V2%%-m24/h`.nqM>CcB]L%?9`Y6B'1nRlIB+GsmsSY.ERn<RIC5]H7q:MFlNoGZDoEQaP&]f+c[C"%V8e?Nj0W+GZ,n;@]3OD4ZZkf<%kJu"mo49MdYFoH_O<g_LrQ,BZB0`6m2:PKjUr4UE@hUn,F]h@"=;?k4Ar%]QcUEnfAQZORRoq@Z_]>jO8H=[_H#iPYZp?&r`AuRE%o[Jm4kGW$?C;V%E*!B0,1h6;,1X`V%d\:u,=t3p#S9RSR8NE]VameqpN=CfH@_6RMqI2I(?Y4[4=#P'k@k6m=AP*AshA\D9\&N:D%l;&fIl,V?XG'RJ1=6%?AIV_a:]oB8YEEh!]^=R\LaE$q>kgh"c6AmjS=nBT:H7dcPngU[lnZg0/OW1DCc'iKCn#+JlX+\%2hBq>/%B*\`T$jP;scckos6C-s'6HD2YIb@_+aGqs?G-)1d)'X0Q@!hBI(S^UoU*kE!SY@*Z9-eS)KC;LUS4N>uqORe=Fbe8I)J$L7U9P?,%rqr+n[:\EF%Ph/H6'1rg.?0Gs(map$WLT+F>U?9LNjX>04H$bXZ^$@Z_c\^gpW)R#PQ@q+G&9ia"#'Zp#%Ic(pW5TjD3>ab-]'Q&%Z*V/diI:+>kEf&O!41ef7Se,eO<Bk*oosCF8EsYlg2Wu05[=98ZN-cdQ]qRh32&B"(1;Fu8)M&5Lfo6?;G$L7qp3)*XjB$dl7p:J%blS;*8P0J#?]J,13l\^-0An(9O9M![;E.\ifrnq2qIUJISqatDDl=W.7_Y*?Hs>1:lVbI,W5@UKjVrRlgE\E5@iou613cF(P`Ku#%LV!S*KM2.#U2Z=2PV;]YjG@0bQhC@#0eVPq726B4IH)dXW2%g8WPJnMqG#u*:jB2$6o);"p26i!me$r`/Xk<K_J.cWHi;Bf68:K$%,MhZ%TutHYI\XUr.XJ:*H;l<?'-HdO^P!=7\,%Da)f"#PrA%7@f_>6=T*u#oY/\')01.)<"RbsC9Wk11Y,>XH][nfbCAmm.NcqU5%qQ52kh#J(/Y@%-Zi_QK_J$35G18Vb9I"ZkFdSHAZ]F-cZSZM'GM9/6gX)G(drR)E$mIEs/?GH,:rJ#\%<T:]@l)np@.HmJoontmh%jko>^p3h<%aEc*\Y?uT/[/(HGf.VP>-#fT*XF'oo'5(f1;Fe=M07H8WhWbofSRLT+rVDSk"`O'tkEJG2:D*?tV$jV77!FW:Y@$W[%NFtS^QSe]TId%*?_\oGKhs2*$hs.i(YO=VU,MqaQN^.k7gUR"SV=N=h;Xu+$oh40_*o]At1#Cn%^5m41]SH8drJ&Y\LqhOpI>^)\%[-_i,qP@EeSF\rD]mf4TqFr:eD:&*;>[]D^qPEX>7o'_UHEU]PXaXd8a#Cp[NO8TX`dX>9GH9Uhmc,8M94rKr6iXiK_d(.sOYGhO%ldqJ>&\?N=b8;/h?9aL`@W1oY,qEhW1FJ=)L:l+kc-3`p"9/9fme*&;hWs*HrNbOuNdIt%f1X,qd7:h#Dn%T)1&(O(Sdb)Dl5.#R%3Ol+HFO!h=XaV^;3?.6i^B?PDb^_l/2WDE!km*dU@S.m%l^*hWB+2XZp7/&2q.s:rp:Ypmq3@`3lPC1=ICK'4F*]NbY?s=Zj>$pb%#Mn^4DA[[]M.>E.Q_"cSCZP$Roh3'M0?,%Pl!D+],D^3(8_iWueV4t1?GGu%7W7rmc)r)H?GCUD0Hc90o=]V;b!B-%\5c\u;\/ap%$HT:bqG2K,hCGGK\kaX'qgm*Hm:%EJF8E`ME8"bhNZ$$4_n.kr6>Smd&e'&J@.l2UTele<!p'Q;h9cm(Qk;56J%>&,[8NGT.-g]t%XK8edm<#^QH"ul`o;T)p=FI)s4YY'V[FBWW/[aISF$!+:?/2r[rAHgHgKU$pf0>V!07I$(ZR9*mC5&S:ao5Q:iH6GJYYOol>h`%u%qtHRU57\k0RO>7bGd[/+lpQ9XqfVK!l1+Rk]6*OcG.kRCIskU.>53MSr]YWg?@)Y;Fm7XmY>[EKTBgUkfr=4ZZX#%/ZOcL@^?sgL%/\+LZoBUm<?hTWV$a!U1Za"g=[J51I?qRI>4YOL`2)^`2ZE^R^^O3.6gGA4aAc(]\U!n;B=R!I]XNu%PQ4InQi_q&MErF>8d[G6%%M+]TmBlD/FR=3oUhLD%]XupI=$7)l/P[D#YmFAr$bPUt?o%L3q"XMtM3*5qI3?D>LWc@TK3X^+OB<u.i:45:\>Den#ch-U;EH^kX%iV[rOH2h+u*1q%sSGRT;]4SSA%]gs03>@eDC2:fFJ+jo'@]A4TY4&MeFWS:"-"@#>B2C0MSM39.KC&39n/R=fU,aCVXVH>#^@hlm%@De\[!TCCCA*[plce2p0[ocjTNLNgW9AA-QZ@e4-^J;N`Q?TF&LJ+e\[S_6]5MoJUJ"52cR;/"FV(H:pg/V;5r]6+tk*Ki+Kt$pV%cL.jHojdY^Y#'O_PZ1nXf%06;+'0n^5HSVN4*Sk?WUXU)Fo3e^LfhLETJ5!O:\r)qFHO/"Z@->FS0=_>)@Q0N0XfYhT;tWWPMY$c%q%"0U;Eo6L@rn'Pl*DHqr2a6Y>ja&UIVdkZ^>GRJ!8Moe5aRbe:[c,/n3OI$j#t2A_gt=UlCI[J(jp;;p<.fU"<OYgmQS\sLC5q;%FaJVLiKYulj]mA;DuV6BHB2).rG96O.Tf^a.`"5H0Oa37h6HY_r2F\n2a7XUhk-4Eb0?uEDs@&('$r;<5V2MO5Kp#L=1Yf>)ZE_"%[INPLc4U!hh;3Um<67j38f./sd_X%h%Sshjdo1,">4p85V'ni2(1nRUHTilp/\;BT2W$#tZU'`WOi[Zi4Nr9C<ChT&YnYesXtW>+%8t\\^1t2E-FS`^]Xe-MeAc)A\4EJug\!*dr6.#)>V,i%Zmrus%?bcU4a\,i_]6f]>s17PMQr_sE6VHo!;n#g)[];1:f5?XCna6-O%UMiE>[C==$`9c4/6K;6se*]rs_W3>P^MRG@hhmYnU0U!9lV@C`^O6lGs'.PXW9p&iJEH%l]AJE!n]4hd3]l68\_MFNq%hJeW':Bp%\SJC&J=,l&5b+4Xb^'gWI:C2Q5/=W<+#cjKf+!m#[C=0G;66.AgsR]$ro4AJ5bJAuG[G8&Uub+0%84"TfcLbDb=*\-H2)[8`MY##%\l[nH[&M@"AY+#4-N(4e=i*"m:CQM+IAfBel@Xb`P]!j5^4H6%emW0(*nqc=7/o;R]o3E:JGcqj"R1?m"*JnWTnLj'+Y7'W*_)Ii%Q9:8D"&QT0j*HudgcQYAI&];)\*E8L&%`^@3pZLm:A*dKq$nt*f8:-UgT(^l3!\N&mG!.3LP\IU5+Qn*IIE4nHn5ZQFDi:]*>ZV_%B;,Z2]DH3U:=d9ZL$6LWFHQ1Cg<%p:0G;rS6cKfhWt0RDCJeZFqW5^&hD.Hpp`=qffu;9([#;D_j$-pC3,`V6^&+[T%&coNRp*Eh%On#u;[af(?VgZ=<P\aSE#J2\Eok50<m\Sg[8N>Os)&Hu1DB[QUBaZR/)n"Zf#l8lO[3D]d-uJlb'W"US9=W'?7fmlXbdX4?`NcH>%L;i07f>RsI'PNAs]K^<22^J\lEJ7`?lFgdQFD%m@/^1B\dmF7[)BW4;PPs\CFZH(/QaZ[K%\:`G^T$n!7DmF.b^R8-dP\J.07+7u%Xb<sg.Gr^G1:ih@UmX_SA@jW]1ne"n-g<>u2YEonX#GK",T%gL#medS1o6..;!X]t.(JhF!2I2V]0,YG&:&-5EZu-D'^2$Yk2umT%)B20i'WcHa"[li_lr7pq"sQ@'i$@$[/F7X1f_JjDrd>]Y"6Ps>S_<S!oM!3sd??hIp8/&Yi:c@WM%7JO)MVG-s+J$,7nTad"DACY%aO!6J5&oe<04c3%MeE?"=6kbVIc,@jaq8]BkMsoC"OAM#8TLV@BU/1IPrQ3!N+JF^k6d.PK=HQ']^g&u.\/'NqdIpaQk.VV!dCR5%p,kdH4LuN3M]c#[-=Q%hF;aEh.n.Yq<I/T58aIW,6aR5n.[-3?A+ch?SiCnu=GV,4TZ^1<HetYmR*0/Kpf*Z5#K[k-qgDapFK+WV%:2[_Rn?g(*(4>,:(H-R3^.7I"Up6.e/S'rj87SW),g]Xo3aW0@fOu8>OB(lI1tLPQJAt'I7ZbVZS44-N`PTDI(53rb7\6'L?%!>>%B\ach%Mg:P0;+H6@Ud`_b,d9b2=b2\fp<19O=DPF`+\4reQDH$Ek:1dLol1s?5uriPM=^eh(4CZo%Jd01u7&'9@A.j0CZYoe*>Q:%dZZb1f=/*hB*mI=V_6laYHqHVd?gcq,..ShHg*!%I'LWXC9qnC0>@C&iXs!IoIFXo?ZU_DV;,2d5?I$q.bn/=5PGW7"h:d"l0n$i%?F8b)ZIA$J!mGe6_1+`>Ha1<X[AC[6`b]cl5,bXZ&%'Kgdgc+\\)]d#BA_U5jb"f.HglYsSk-uXCQ!XU&9lmZjhQMaaP4<q,j.T-%%p'H$6pCYL"qNnu8>JoT`p"384Po.jEs:piRZ:*-Bq9j48<(k$=j.]bE%$N<@9TUM<5O*M@=USKnFKVU(;)W'j%J3dPQC>f50Qj%%Jg>gXSApJ8+#-"A-pM/!X`#_t;WG[,ebdqQC&Pr8nN3u@^qTI7q5:s%-ec9BE4)^q$a0KmrQ#NY6*p(.q;aTkp!(&0QeLl`g6<`H%MfUaWOL4j1(iEN%^7LI<Z\IF5Z4S@YRj3f'/.;4Ik-QC)r8q6]Dt\Aki7k(XGH4@q5I>QW(YlaQ9gb9)mL8AI/E>2ll>_OOUu:E]%8Hb!D/f"3LLJM&3g>'^I\q&r-:5@Bo+8qSTY;sJooAC.7JLL<T'165F.QoOUkJek\RnA`8iO_,u&XuCR9[R'X-4lY=O%]j?()NJ:%5O1>aEQk/FG>-&35Gc\Eccsa4kOJPVQ!_hMc]uYbWd<C1CY(Ymk*P5FHF<J6gInm'bHL&$jceutY%-%O\*^e>Sd$s"g)c;+#s&k'%Xl)rfB]neHlKq42Qb34'1\5mo;>[1pX9[`mUkKTVSMf3Qq[<\Kde_FJWJ/6.maUgF,<YhuX#RNZ[X'^:HuND]>#>bde/GT=itO`)%.us%"hlN/_+'*jAg\+]S\Vgd3Y-6ZGQX:7fDXP'kF_BmTf4)GlbrFJC>^]Q7-*+Br7f:lQK=gS!DH-1[(;JHe.DlRCT2.&2rR_20%^Re6GY;E+rINS+?rR=GB5DE=Uq_>MJpq/eude\&C[<,Vp;2#c0_FSD72BCd'?^ca.7iJ]e=3QkLCDS1L?9,bI.D6orf]+HtFZUY&%m`a-A-LpR2l,Q5ds3tbAjm4OFlEXS]1>=7(%0J."Uu$6(5+j1ik3#h-K@Rqk-H$?Jq-\8(+Cr1kjj/7d(jPQKmDl)OYTH]\&`t7%%(*%UHF"*d'IK[^JY5?B(#9`LM,gH%sP`XWi$7eNq>hc.p.C,VZ5-?N#XqUC&G^%,"*5IaObUU[17954cCZf!uq,p"GTYe_ir]K@]%JR;Ss`b5ad`<EfWZqDp['NFH97n#->dJWn(O+grk#HN;QH$3ei!(kVei]\f8(-O;3DsUhY0#dLM.u`?FW=n.3e$[_@q=NM?T@F0n%n$W(ih"o/3[;re`VR"i3\ikQ82U$9(]RC(:pL\n8TK(V6\G9B?S[ilC>MsFZkqgncJFXB%'_nE/au=_RA+g^(8fr6@RonC6H]s^?%^I%b\["tS7RR7PgoN%XRniVC0Qr6]h/YF-3M";%iVgCcL!T.G3qHTEp*3KR&s.OA(,q3G,e&;_d(_ef(0a#:6*i8*kPaf]ACNcS@%(H0"GLmcqpQskjWq9$haVb78gB,2f6T=g%RNB_)+?_C.Ok*8h_*[S^H:JM^[95jb>RbVF^0@3a7d,;WOo:EBK[lO+eX?K7DATBD:%ECu;T]cs(lIp?;cU7E&RL:9@dSbW?h3S]gF:Z;HuS-n!Om.6m'&\JIJ\HI1RD"K9NW]6?YP-:9@VYRs#QoBA:2LA4/DF7M)=JV?V%<uru?1IQ$?W[p+2%!!t1lN#1K>4X9Z_)o#T"1RiSG]]-.F=q0H^b3lR[63jDd[\9moP!'7?l."I>ELP(Wj<XKJK:_8pHnW)16kR0%YA\7#rM]F!A3VPFkYBaq"htGA3Gk'+?(@N/Qb>!mk6&bfLihm_"g-\5eb^*[h>9h[E*QVeEs'VFJnun?]m*T=ddQ"-Sb/X%Ja6VJ%o>)";."Q/P6=L<p]\e'1o/B!Tj5G@%?4af73IWV0=3.ZZZ@9(6b.8/t[gbYnX;APl-!mhj5f%#%^QBq;m5]`L>[a?&mI#`t6?+<)%"F?>7qM*Y^C]FVXeN`HZ?I4)%6RVq,*bJJ-YST,ifKM2Y>0=&mQF80N0H\(SDW?T*Vaj9,[>T`0(E#8i?>$T(Hl(`OQK%[jeg2h:%/1chfKE#[GE@]?PdjQQKF`<O'FW.)r@,TN[AR(s-dlS*[UM4!b04a#/1u;PFbSA.b@XJKg]U[>;<f1!kOqJU)lllR"[#8CJjePUl%P0%^uk0%6H'mAN!'OYaa0%:<.oJqPK5MCf<]<Gmpp?GCkmo;aJ8rJ-]]F3^YEfl&WD^c?ZV9Q$)7I&q@WElTa8`upZJAt(=pek]*%nS##-$YA+-"Jeeq0\S@jTjSu]MaF*Jk-c:?m/YpfJt]MglCe]pW7:>pE`PkI)32g,@>JT-D-Wg`MK'?XVifG/6d&ro`1?Vl26s)i%V99,QjS"0%^Y.`D1V$ZI,M;@r7Lrp'q?T!?&j:n2kp+h9ee^N'4m=3D5fka9YfA_TNJlG5"IiqBh]_>X+2J_4bK(jn8KYd?pn@-.%,M9Ong`c#U+2PtWf):B.-[c,e<kn)7p7NY_g:j+$?KF\XErX.(Pom-&</Z6)]ZQ:9Oad*b`N,<;BGJ^qN:Eq9s&m[]cP:C4l$BCQ%(Yh9u'adcXdd4Z\@KlA7d_('Gm5P#YG&h>hs&7i?r3Y:mW]>@L1uX4HV>E3^q<hVaWbjfN6@L"=Om>oUe#PXgp)_tj7d$EA.MeQs%m%<^snuMROjnJRrJ4I/)lL8TjpT:CR+`:adX-d3++$soGH?jDEj-<*;f6P#SlSZ;KdrMA8kc8k'nG%C_BstO3Q7qX6HN$k@kl(,,%jJVS[^#&'iWV#rBIi&.9Ms\f<8Q->""I!!0QVLquepY'q?]F5-fbhoEX3#KgN>GGlJ0ug"O$>3RF]sD`5<7K4rpoR2h0Nr_X^mhb%?P=oEs)UfH%0)t"SU6"h(>jYRC@M*KV\C`7[PU&V?Yi[$0=kZI5\3AgG>6P?0</n'h%`pa2(^<*9Z,,I2f_T^)Z5*a&,c2.?[bAi%hg$GrOMC^rjR7'CcT0giMlrp=q%ZUU.ZWQO?_C*51%bC$l5!CSEq6fD'QjXrWHM,n*%8(bSZ^UAU),Zp^/T0bV#s7<e1urjlIpPj%2lr`fCO0<0MMg\f:]Oe5\sq<YU91rX#YK1Tk,#n$:"Q>$k.#/41Q!k((s4N41*'JuW0dbuA2m!clJsh'W2m@hhp:O6<&4$5>pKjB%V?9an?pM-`k^XT-;Mq>h5kc&?(W"XZQDLX-6S#a&MiY6>l5D^f1!EZ1NGJb*?lGn/ND-eeo@NU'aAHa]7R@r61N+/X0fCdEVubNQ%$sB#fD%O*YhK"LNAKVW@U8)0,\#<C]U'Zp\fGYNmMT0<aTak%V,1fk46Ao>V=rs$IEY)"r/@XU:L,M#<^_RY.-<7jKbtU#h#?V_K%W$1k'"_aV1>o>>T.+)9&bqsBA>D74>!`oJc!-m,T'n\CO9Go5AR]8j5l3J<X;-XcB<OALbJlMA>TE'.O_oc1adFJ^/"jj-V:]LW,%=^7U#jWS(j/AO^jbRg(c7FcoX!6T^>1JCn-U-o6JWTZ%7@hGuW3ctlp(lhsBS'tW?kSQpb$qj8/L04OLe/VS#Cuui`@L4S6&Xq\Z%4k\%"[\BaO;[Z\@LkSH;5dh/EWW:bPSYZ=N\.T"MX(?>iE=br"X:gSl!d=c??r_=4i&2B"6OBD'<""N8TFtO3<>s1[?'e.tTN3%-%JKdJ_9[duh!T8lq5f-mG1fZ"JmL$6MPefroOf1=BeUF1,jq\`::*069dWY`r8Bi9,DKC7=0YV!NZo7Is,1TM?1c2"R+E8f+1r'k8%$S88jRYgu&#&kd5*D78P)p:_7FhMI=N6B*O4#Z'H_#==]'3>t&)E>a@@H8/oW<N*i^r-Pj^cB>W^pY$&#\c`X'UTSRYH$8,fPmgO%j`TBkAD3J>K)sLPaJUOJ/O1D658Aj,UJcrF!mYp-`!ERsPSi1uPshUF,.V0NBjiTKB1D8.bG5aNbFfJ[F;o4u=ohNP&j_=-/7PVd%869lI5^q<mj\\-B8C+Mt$;#.IMRI(_OX&KlL/L9:?l]m>3m8ZE!XXIqY\cr>Y,rl5!iM`j&/9eUL%CQo@3'1'PV!R\\KKlP8*+%l%#7)#_XBX1D'NcjSKk_49a<JETL?sStToc_p*>W^Mk#bRbk^_kcj0aIO';qPi+=1kI#0W[YoHYZ?UY-Eb][T$?.u;eB"U%?sP-?d6%I_.!tJ8A&a'"+ATKaFH[ekmQW.-F85B8D/j'AGd2L;AfR74-Og3T6^hJ\!b4"24a8Y"HL/TI:A6Ot<:i8Lu8fOhPrY3=_tg(<A0]%`(FQ?X1<OonT:EIq:b$q5f[cT+__>%#Ha,PLW4-$MeD^E/L&CL"/si%JHSr>Mr=`/?_@gPeH,oN)Q7'8+FcYs!JRS)!(DUP!9"%)%X!g,=[2i^%6ZH7,WLutY-D8`%V$#tV+g8cbj=bPb"+jk^%0ooDk[R^F#DgSl)aR!n#Nc0?"-EVq!G%).V%1Qm(T:I=FR#g1J;oJA%U15dRDB`ZE8@?s)j9bB8!8mjj+TMKp/-7Z;FAP@TO:NaCPXiN=TGq8gW3fZ-K%XPi=4K]sbSEMP=[N?j1(9O1'.SeG7$=7%Ftba*%4!Kl2,I"$,W&g1D)-XihPF2FdJQF2Z)O<@]"'%1O*1NqG5h!M!\KtjmJ6N)_d$ukB\?I>^0q#1MKjXu,V7W`];/D=XeBYH5$Xgu)%c+jlM\fNCV_&<AB%#4As"Kc(p#-:%SfJiuq&XnSOAg+F0%@Y:WM10-_M6:5g+s5@`I%*YaFZ,_V7>]Jn[+%VV_\-*)c5-p*N>)C+%,/=SL%90c&<fZG6@`.b'?`9o"8>5jV!n!Z$9su)[-E:DSm9IRMC*kK!osmk0Y3hU*)-A4.e8R1i];sn,TEM'B9dPPY&2+"gfuOOJ%c58t-5*Tb(:`SO6+:b2>+=NOq.N4FWk<Ol!3a!(u2:)]]!I+o9GL9+9)<[$ZLIqtW=,#3T=JhhD`Y&MhJ;XmU*Fq1!K7l?i''*M<%Vntb=BR3ek'9J,K)'H=]("pJP.76IT:,@9\_@fKT4dcM1b<QA9+fGriF.k?E&?p?p%;;7RR2,ZUb#=+VaiY8B.r$]bLo=R_R9-gm%`kSW#At_mCM_nO&$5?-<[.V6H#3KLo+&,qG[8\h&d9Hhk%(Hj[2;!ePMBZE]"t3sqOS$CJd(j=l1:6_Y^bO4D67^><=]c8:Z&2tr%O96DrR;49+To0,.K;'(!J.'AJM<`GRP84H;^(=sK\A7*Y__Y>MSK-/T@&J6/kf;1L>/o.6dP>2AJ=KHlTU%;5V1t#?AM%E'()nlt%Q2ukR'/?.k9ULV$(l#5*JA^?(C'D#(M5uPXL"%k)a92`r7o.=D,(N-[S=l1a187E;bF#0KeEgle/-3=:K6kO*RmD0R?dG,/Ko&Xk%)&!Eq,HPL-pY"Wse;O^h8&KTb!42dJ26c<IC;s4l#u0#Q1F>X*5`4s0R6ZV,AccO1c'XA['$J`G-9,7fNcNP!1'eSe/m&KU8sDH0%Q3#4F!h2q],abO\>QRi[">"O,`UU</TYT#3JMKMAfX[aBR]g9r%4=n,n[+73SsaG/SsD+Ig2o.[7n>4a<EP%Q>)"0OTEe99JGLa1%\7D1s0u:T!71<iIQp(rAW4nS6'$&Q)3lM4`_>tl)W+Eb/!o*f&#.0<qrj[g)Ke1(BMsMsnA?a!<a59rR-@R1*kpmVbHU.J`;_f\'%;Zs!t1+(XOMIhRm%(.lbgK-2.%:=3IpXMs1`)AIc1/]nTa?uNb.B-9?P_OiS?d8@^/Cb/2G@6hQNj!%G:jn4\m,?D-QJ&DUTIC7J%-CF%PY@[h^SsftNOda+X%%Z`DTk=.TPZ0Fe:AB[LB#%p\1.;iJeI7ap/ouCt'.P._K-dCIEF`G$R"tkQQ(Ur0-Ak'Ij`kO[7#FFT%&l:Ad7U[sLAq5M)`ctYk$\/uITU%<,1i>UBH!1Ebk+Z^cN0.9JAZA<Oe5J+LW'V.<0Mfeu-1W*?%.rRo3$i'qVIXc`@l]E8_B"qq%X8nKe,i4(W:%D(;G(V[.jFC%!6t`?V/upPP>UDWa6,eCeM2jV7HUd[]=LJ[(9MR-+nV)4rF`\-Jnq-Rh7^3e_4&T'_o1NIN&?TIj%qR%$(m1KjQV!'E4"b?Pa&HE_A?OTm7/-^Dk+=gG\i@#PRYol3&,7o0iX0H$lQ/(LY7t`Pn>%j;U1gaJ&l^)"0fuD*o?`'hI>&1_i%,=)AWgKm5l`5Y%FZ5Q5[1$kd#?j#04VQ_#d*%E2`7FjkF8Dt\gMLH]S,`6O)%&F<*M\(gnNe5[cN@fbaAR:59rW]hVl;]FC)bfmu%^ur_QS-nPRF9;a>*6#3S)TlG6g:(U8.j2Af4D>:/%jZBVp)>gqQoZdAa<Z>Y=hpJ6^9Uj.WN@>qOQ-B/ClD(r$0W/`NnG-&_D7"'%TNY5Jr9(NkeqBm."!qKB!fPsu!bJ<i</cUeCf195C+:V<"Gs%.(dL$H_'GkZ@MB"u=3G#$N.%0F]&FL:dc=F01+Bf2iMHU4/(BfP%NH>2)K9ue$'d.!kE=CYBRU:XL%5O0\9j'q2NWL"++3Pc2!m4J=P2HfOl7HNh6Qjhj+Z!XO"7/cb@=r(**c%DUeBfPZ`=oLhU`UQM%8MlN;Y,\NJ]@[>+#QrcoW*pZLF3R2MAhtI=(kb1[d[l-s4VCS?#rk2Gi,K3:)-@NI1c/Fu>n@II"thX`li=U$SZ3i)K6[dsUr#Tr%7BoEL'VHG"%ql6("AMjQU%$8Q3?<6!a_>,o%;fI:OtOa5?Du(jE5f'j=5:"kJS5gOkbRu+ekn/0NH91]g0ar6'G+ZN,Yh(h2$/++%k(n+."g!:;1e-dg*@At>0h`9RLi<cO,9L?NX0PnRZe?NZL&_c^\@Q?cWcl2$hkr6lD@;F[l3a@13Sc;4e\J:,N3&cW+JB!f=Vt'_%92Y$p5u!G6,/C%KJS@)1TOS:q:uq6MXeAAk4mAU`^`*<"AZ3Pf6raHd1aY8!0IYVTfZ)pt+I8-cBXhLr#MBV]2XJND>m%85*+]p\%81.@E6a$bQoE;ge^Y-nqp)oCXE0sc3bgW^+Q7*O%mNBA@C'Qp8`Z738#hu%d_5Vsu6m6c-Rs(B"P_!k+!n0+(27C=1$sdp:#Smd>%)H[`u"(X3^,W(%_BtMWri1QKUZ016S%tN(Zo^:?qKLlA?4GP7_7_UtX,XelU@;$Y,:t\d?>mhV^&P)C4ob2KYD!@B:P;.*:L5UVW%T;3b/Ao%Md!1esn+h6GECr[/i-"8V5c!uT_L*ii==ta[sV!;.3<5_=`JYE1_R2YVs/cl7F//6)@P6^u:g1_P(8,aZq$R$n<%8.\B%L!ufa*-.d3JK%'+BcZ89SOcG`38hi_"l[rOBeZ2P<>\Jr[r&@.*%'`Jdb@lui=9;2`#(g5R3P<QN.o\,+T04W/J(fn"J\u@62Z/4%j!%KTaDioNO*emVNIZIB3aNY1FB(0gGs`+1*eQ%&Db6BGS(O/5265Z</8de*DsQk,iXRLL$5uOSrGk9eX[LsN77RCtW2SV#_/hW(%k44Oqjmn-Qnt6F_K\rS]E2s*uBV5NH:cXj(PlPc\XThu(^M,>+4<%E)A.EVgqZM'cYRM=lfgP$\RMP^3k^.k3_X1N7>OqE*P85PW%2os*n6\?9"6%:(IU<C@G'KOnTgA/78T3jmpJ[%cT\8WDBNt\YrGZSA7<]+`R[UK[!`rt/<E64l*nP#-)cueoL9ajL!%:F.6oqNFU%?E&Ouqd:OA$l@55BHeFK;%XOe#$%-m"<K6nB^]#d8C`g"o.!t@/#X=>.KTH6q[U"/C>o"L]Q[<!;=>FQJKbbm1i<8m)#A=UhZYpB%^;a$6'r2j?CbQb;[_uHs%4'D*%a.+:CV6([)j?T?W(&Q[JQa3Y85X(8@2iVmf\8H**J9k-/5odS9+9OA<-@oP#o"*BfIg!4@]Y]8%9,W/6*($,<GRI/$ZD6q?=S/'>f*^qBl#Mj5`9hc>S3X@@D(%qV=9bW&DiN3Uf*Vj&FGm(Ff<p2Vd$%*'+283dGfW0$3h?h$G[h`E%!>'q8'oG#iVobhS&1Z-o/>t$=0-N#hRi&Ls*TX`OGssV\m86[_9.1@]6Co7BgdV<:j<b9B1d$$s%p0j6!t50Q&6d;+''UsZ&0,])%N[$Bro&,DP52lqbO`ZmX(tg(;JDrr65TLR&\>j6$@n[<A+2&Yu<m^3Md(k+'#dg64(r43*78#=RAl)=Ek.hjZ"-,`*O)Z5$=b8?3%;&3(YaMmoe?lpUS[Q)-6$MOT@!@8pKT^..@*K5`(IBEa,Oib61(@"TIWWg(.-TnU9m1fU<eNNbtZ4[p$]$3=]-5\12T^ZR#XihQ>%#sN8KBZnA>T4pjiY]4?oTgn7J,+J(>[#(JjWe:3+#_\$r?7IP?YhMm9fYo1HV+jgIbZHK\.gd(T*.X.g$Et[(LsRmiQ(n.%[kohF%>Q%_DL5f2F:`TfWKe8lC^s+C5$qj9Q,a7"\.'b>(,W[lYnBu*^%nD]p;4+ki-k;Em+GEKC4Y/FP:bGm[-GXkJKEifWNI)Qj`X^Af%OD)K4;Dfu)_XTO#VK$\u`2uCe*L;f]Ar%!"(>tT>'@F"O_+#,._Or9JkH\>r<fFj;JE4lt[:!?(-d)MD7irRJP:@'0=_RY>e5F,n%.&9JWf#.8Cat2&c(gjL$l7M^H9sbNerot6^HuK(\i-l7TfG^14A2qF%S#Eg#5ZImi[q'r?.BNg>3#m<t!X^OV"hKXDA!%6B4=PR2%@GVM0O]'*%.%l-R@oOa$qNE='AO3_2@dI_C;XT@q4dp5,&/W$)<CJ(m(SSLX4Y\?=/VUE)S;maq85N^`h^UL(</N\gIabe=>4JK^%^JUT_(Kl8S.b%is=C*#5jZ#;)A8L944B1M-cZ6*YZS[]&9<1i5$&<+978C[-2sK6<"]WPm7i,K#MRG2k!@B*..-NJhKi'i.//Ki]%_u9Uup@_UOlc@Z=#]^D4JUEA$5_>6$`KY.\M7p'>kH?f<4pKF[iY,YKVe%!AmN`&Tm,smK7/9"t:?$+2hLW*^XL]M3@gL,D^Jj#q%$D#e8!!_W%I17P;S+6:_YXAD1RJcpuRB(B0GHf"YAQHabZkiD$JYN7alMm%Oa@rb(IDQ5:.C)6o3VS&S/-\jAhQ:NFaV`i_5Qcg!%Lh7O76[I^#JW1+Zn9ADT_P(3kLFW22'qeq[N8j7VJ,jbfYf/]9Je\j-8*]1q;ZENo6ro)P3lnnYJbpWh"5Asai1OttDh?T@#g[U"%gO=I`X.Bki*NOd;,oOpWjg>DGHO'!9hFG7J7ofUr(Z0Qd[KJ=RaQ^jhqn&?eRD3:rrECPgQ;#[E@uSaGD&+GB.dGZ'<ZX3Z<K[sj%fk+cNM9'UC`4%:Sqi+su%+dX4?]pN*TaM2GM><MPc#o#bj!H$0`K_4L>)>$Zf\`#-ibH%t+5o._T!R!a1&L>sa(Z%_D5Q[fYuS:S%)<<@OgJ0oL!I!Sb7-Ck>@Onp\R:kTT`"9+saiM8O^nj/.=e.;6&'BoZ.Nmmi2rNO2]P.#u$qW@iBb%T90Ad]d4QJ]H\B`gN]&^@[%Oi(c)64R[M:ZB[ti))I6+Z^n$h(jpkE+Hn[qu`e;=A&Cuftg5Yq*g<NW,,]/(+;oLqgjQ*caN^6hW)EaE6PNUon&pU$eRAsZ&^Tc%LSq@u"B`i)GjWQI7#m`ILatqLle4Q-c61a<qXk=m"L/Q\m6aV_ng<u`-tEQt>OA"Tfns;XfGP?gHnWHY2@m9g'SFDYPQjL'al;qp%iChtthiFB/I9tq00C)@PXp)W8f-R=7ZER$b&-I>BFigaoDp(;WAg1t&mtY-@\6J\qlWK@&p;)e^;r:GB3VJ_hqWBN[gRb<RJuliJ%OFn:A9Z/]`#`s"F,#n$36r>!3WV=QO-h7CN""p1NJGDW!X&f92.n7cE8Cc%3bLD^DYLCJjf<81=F)sL,@(MC^.eDDI!P_!6Z_Z)!%G"WK!i@+Id1+Lcj(pLSeblSFoJZ]L@'qAqiRR9,mcaSjR^K:+=^G$^YS=?P_j^MA2:NK["otfCd[uilDrEjq8cb,F*S?%_PK:hC]%0edQP-aGrQom:k,C(Vu^I6sCa3%Cc5P)<HR6^'SKF<5N2mU%*;FVYr"UNHdC9K(XInF'?;nfmg1[bkVl2JYK*FL(p!&WR$Ih?5)#%8;+LMp?s)r'M4#GCp5OpJC7S#*lPN$AV)ZF9r\:5oVGhoM(SaS>?e,@@uoa(8>U=R&]9%Tdt*$/aWo\9k^Kq?a8,VA9S:*/]gKbs%@)1E-RL[&3p;J#]0=k>WVWTaG`CKs\JDW9Ls4T)1bC<Yp\]t)$Sh/o)DL^P2(56(9[6fDR[Wd21Aq;]lduEZk2+QQa4U[U14T/%2%!)i\%;:1M8n3;C7,u?n=?(2%fAH%!I\<bSBrHn[E6>)(j/5@+]Ic(cf!\+$+;$`cT<[n^K#tG&MgL%Q1TmKsEEp<$`iRmUco8[[=%oJ3_2$A1"u+u=:e4QA4"Fknrd5DjSLpjJ<'i2!.s:<DO$P2:UPqu?QtGV45gI'\0HOr[\_K-;H#F25E`ldn3t;=[:qEo12l`n=;O%oH6s&nD)3*=NbTe/AjEWs$>LqJMHdoG/tm%2$]O.MZ5,)!2:TK7FiM!HiO+p[J%Ng?I:o=O+:S4&?E;?:^=GeT6>[N;edtI?02/Y%&r/D%.YgJQ36(,II,DkfD.P`r=hSbaXt*`<X@;rqOT0sHo3^YVcRZP6$5K`?^OKOI?J.-OhbIaE*S6X//TK0"ZmSLh%kJYW7:I0c%JF=$9JPb.N6$Dlk!L(G+0S&2@K-_#dUgO\(*EVLRd:6j.!U>I^45kf,P_NG_\YU(^n_BW-kM5's;sW9gjPR07$3[J'Js;@L;WnEb%m^J+NjtM=`J-/N?bbEPQ#"i^LnY^R"=]iS^J6LF2`7'-oB?S*1ES\E?'GB2+4u#LKYR_;'_fNRj*u)n??XlC:V%@Z3&K"i7LAae@%7)1`f!65f&EaPd\?3g)j721N$6`2/#]0F'/i=e+R9ZP.]5CaDDh(mbf?,Oq=-:%R=:+"+^UG@S=h-fsm"+uk78RtWa/#eYrX`XgW%C9U;q7660S#(r#=rS"UCWZ8K'A]4Hs7'U:#lk9;XInUGp]A=&0B,,r-%RJ\aa7YbS4pNp[TFBro'ilAd&!+^2dRcE?SQlNaK@l8!%(Ee*E#f1,99h88ijpkNY&coj[c%@b!$c.#%K`(FWIYcU_iA"21l"AkSP_capF";e'0\OL;03>D)aGco-k2/oi[Fk0K)#3D5mL[e5%1INQTBB#ks/GTEMk2>caM2%^"@$jOjK(m$:(@pKTlJU#JI1W\$f9qLG#\I?QdCfuQ'"k"\(]&A(qObODoB]f%q.uo_81Vj(9AEY`%(%8^N9-C1Z/%olk?G!I4QC<7>[K"%&rnl+MesUc1mcF.2)R%T-b^E@h2d2We;,8d+BjJf(O&;Cd.c;?>hH&l%hQ`U5j8V5>\V>>0%2:dCOjkI7>0F`"/)fQnO729PD:iQ'Ys"V08W&J=]2<mgp`[`@)O^Jq<aAiob+-[crGU5-SP_g]=Zg284?B0/#IXIF+4lD/>2U.13%rC%$3gZNkdXaD!q1:1<LqH@=!p)N(!P<&OXkW,h%,rO7?XCcJhJp9a9?83(+diA2,i+Le7qtS[lV!@L3GP&Kcg'iT_+;gS=iKXT(%f<q\BcsNNeXaVlFkm"YEcYXT"jLVT3C0#TQH>ignQQ!<!j!ohg(MG_(8A+X21kiGV/GqIT]*IBgNf9K!pVT.(GVBr?_e/&%$ml2b%(\X)d8[tEHJA_Xf$(Nn$`;T#2'6Z?%9mS+:,*qUY-QidIF5,uO3$^cfZdO=:!60i8#ck%<9hnSF<]/:fdAM[O)tJ'n9c1-;)NW!U%O"9q5Z!VYa@tsBdVhc\=89uM"4*cp':I(O$mRB;0Wbhl/]n.mMQGZo<5(+$7SS-3urS;*oRo4Ku@R=of?%>-VECl=+RL<PQQNo<H%TQTg"7</F(=sq)WZ*u9WOiem"'s4G4+\,Wf/<XLsa@H%TdgR\sn?Sls*T`D,JYjnH+DskNA+9qBb[Lnr#"J0KeKriR$t%H(ZcE-2%lolM^9]Q:V?[Y4A`HXt,\Fq[S5Mk4G!c>[&s#^2gGhiUm;eFfTg;Vg3)/&'B3F=SfMBC%<`JfFDhmX,cNUHdp*<4'Af8@=Qdu"h4%D_.-nMP!t8?=#.2.73N4`NMJORVBb"c[jL>1uhZ@N;I,)+Tn;&du<l9'+uC!SF6f$CRT6ddA[X=c1lQZ;!qi5cOo$i1u^uHf7srf%#@8YSN_L`n'F1T%2:!DZ`nJ-DnS;%Kjr!F0>kV[H2k8.7R4'T2M@D1a>&d%&OOK(KEjY@N`P'QA@p3k[g_LnP/&$S_D9)<``lX_R%@9I34!V;,.)?1P!bkO7Xc+*RD;D4(OB-_;ZBu_)':A3=[^*aK\ZK#Ij"0[+>pr;r>Ff-7X,%:cF"nE#e+VjVfngui9f8aciRu[0Z%l2IsNVB%%pY;,mXj6"%33$4'kaV-)GSf:hX,##Y(S>R'Dnm9AD]>(3hG=5j9CWRGMch^aaB$b5SZ/g:%TCp*b5Mu-9nmn]&nQKrK%K:mo/9>1F,C7]0OaZ%C]\q@=S"jlO<cOW[o^J`mUQ5i7Wh<-NRfF%0<+,8Q"2uG-mc@DS\a,h6_$2ArY3L3K5QcG2/Di:mA1upl.%hLB.Ys3"T^DaeJK.,a"WaG>tM6Oo313f:!53T(&?p$3VJ24!,l*NZ,l!k=U^<)oH<rq_UVc=4.*OS-(Z?m$(T#aYr*D>BfhHm2WO%!$;8a$%MBDHNPrlF.fcT:(_I:&ts-C^&-(1G>B6N6i?\PY/bJRG*["tcVjC`($2C;<*I-4IT$4n>^aG$V^2#XC=MPKXg.r9^.f<n%]ik3Z]BDQH/&0\)%.XY=&5:m5JdA[G#CbhW+rAkbWs\EEPtH)!B(1+i^c_s>R/%#_K)^Po+(:8(P^fm=`!_<g7JTZd&[t/O"NKc"%?[cl3Oi"=hkD5e:UCmUB=(/Vj3cjG4<<Wjgalg`f4sc#G:HTp:a!Bon4Pk#!&oCoZI$Q.0j*##X0t!>>mjHsDS'6Q`4]P(V+3"5i%#B4&Ip&QlE:#L26im'8KDQDir2N#a$,A3rfFkqf*3@ZK<[p(nc=`Rm,GqJ>PWPP(PDO!Q04`K[+UCH.^B##>7mFKegi7NTB@-1Pe%hYXjWX5d)`W91;5]/N0]I]mK!SO%FR6[Fg0#oNV@bkc`lQZK>c4EL;p=sm3*"8?CKpWt7cYs*4/;BXXdFE28s,Hg!CM:nFhkcu);%gjA5,<@\%ZFsVSO"3QdgZOmfK)i!5Rm]M4EIT+,k9$/[lg[72,j-ffARR%_]m#R5C"&X!99K;crOG<U61;"FYCYn]3$&T>8ocT[:%>J^>f*b>.d)(ln(a6(edk5G$;e5G6B"hJ8qbj82Q9$cC[fDFmc1I?rX>l@&</HjOSV9Zm%d0Bae#j":#]gHa>mNB*!ft[Kb*R)ph%>IId"#Pau=32bpa9+l8#e"KP;YG'MoTB..,?J)a&WQb6^NdpCJ[P\*r/TuLOgcr+fUs\&F1k9=fnF>qVB4)oIOd)dfZ'ENPUdLYo%U%/ImgcO0Z&2r`OC8eb@PeG1Y%qe7C'Js`u34Kb[Nn<Sg>Jma&bHPV;j\$G$!iH0Kf8EijMqqfE(mk/,_4Q>;mtD.h%UdoMSqp'C%lN`fl&bm"ELGt1uLZHOS!04k3=_4\6q*k+->U`m"e=%;Y5/JFIQ;f;%cr"3=o(VoYSTn.Yn2d*!hnipSC7$4lGP0RkGDO&!@MU1i%UsX'9F<BlDaB;<E=r?&[2J#GWjq(OKllH`FnsbFR+%o03e[;tR)S)*N;5<XYS/<ZC4IC7gN\%5P0=7Z&J#OE`nD!i><pG!1*"SWb%m\TgTQROs^%E=e)SeCV5KU@"gV?tktD\46efeNmbVL<Sf_hdRC(6Kf7YkOiJEf*AFWKL/()3mb-"M?LFDGci!j*Cr<IDnal6c5O6%<51^SOVq1%#@\Cn1%k#I;8F+OH.c+j?sZNF@R?OgjI9<K%kQ[hc(`mSje!*QgCg)0V;qr&kYsX31Fc<2)fK'$_kiOLJT=3KE*!E^%*3"r5!gg[@GER:j+XE`f5c"M*?,m5pJ_r"o4Hk90+(D&P&r01.fp:/Vig6:och2oj6A]J,5Ss_dr\P/Ec?`*kn&Uem&=<&dK-)9=%,Kk66%b@T]5*WeeB?d4<U#0os,<YAO/mog"U^^<8"T1HDQO!UtEC:f+).UT5Mf5nArFMeG&b"@U4r4>kh-f'hUDH-N..tHQLXLDu%B06eYA-WTd[89ah$o-2a&hc3.RVofk3YbFa$p\\6_Y(&c!WTp,m6c8\OcCOnDC\O%SmG4W=WfC$p)ni7[/dDS6K`IjprpZNBpa0`%@>o8X?Xd(?2\rRPkXbgG)9OEnQM>s6X8^:'bHW^OHbP=!GGl)!%&B=pLh?pdD"8^?);85A'Cj:skgg&Q5'kVK?c_g>57'1/qjA%.%^k<:>cn<Gf]o_E0RO@E/6Cn^n!sJ1M&=!'$$GPGI?dSD\R\<E!<'8+7:o1?_C]E"iG<ir"J"!.,(3kCIRfb>%q/]*6gKO7/$"c@J%KQRcD,9oc/L8^(&KHA&bk4q7QOQ1u'M^?KPXDPV;B*Q;j4IBbN4H1]MRHXoA3?c`Hm;dY!cO?YCGU>Q3I40k,+j\KMKKSFgbor(i%d7`D+Woe=PiPIg@kC^]`E[4d%LM?Cp4p^?Ki4j2kr(<SQP_7aaIhC#IoLgOjRJA`c_!Q<=$&AAMjH9o@I*=!/TT,J\3O!'(k<1l5%DTSXqCV]Q2p[H9!g[jn:n][@?km-bF)Un/DM!&8"MkRnOMY^btCVO2ooAT8Vn\XMr96.t5pcpt!%iQb'#P%`9o7M:2'1P=\5s-6D%0]7@,iq\,RbYi]tcc=m/9`jiIQ"ltPC`se$"k^>WfQ_X-SfL[/q1UpeAlADT4>S19jafPk)1:Wao#sqV0j'NMDEphVMg4*t`iU><%d!i5Ug)%sh6<rO>SqD!sK3<?k`&t(D6uGoko>Ni`m:uJ[QtKBBp/St=@@e>k)#D$11Zhki1!^7S$n9El4WIB2k*[UT'Df^%kkPdd%G4&-uK`P+L'D1Y_LDq2VF#:tHj+Aq15R)X'^ZY&5"8@`gi0bJ<^iN8<'gJFJnD^P)<?p@,[Nb.s]o"2sRAJQ>lf6b]'L?Np)1#&C%RD\i?o).qe]CoT4UP:7X/a"X1%Y*A'B4AV9`5$%`WqI]Gi!_!<CcEY3FKfA$[#!V%o",-!?X5m$M'DpWXTiRGD>BJ\I`>]?.RRVG%:;\l6/Aq<VgR]gaMq5s7bXd1J>-5-V/Nd4Y;36]moc7hQkNC3?_]\hU`NGn#(7Oe2fbo%emm&$Jq&Vko&aD*iSO&N2_<JjPoR4pW%pFaK6OdaHQ=j>YDk&BeZ!?:Pg,B,67Hu)7-BB0K6B952.:7rse"%n,.\^dCtoQ@kmIsIC'XZp;#,+':O8`RM1fW0fuce*5S;-\Di%TuU/uCi4!ZhcD89H0]A8HNP^Q(\qf3fiLd2)WjC6k!8)+e1;C&M@kQlSuH2;K#qqg=\Xa5!HR$"-_+T.lpFotO`1lHquDVu<j39"%G"@)?(1[q_gl$b&Nt+P*4bmZrQj86TII%:\*TpV*b<8+gA*hV<ROk`@P-G3g`Y.5K3<Ft]]9$Ko!Q).mZh>9:%+HG]i$)ZQRa;r"%e#^<p@[(olquhQ6&/e1kHk'i=mlNUk6n:&jpZEQcW;>\D7YN"@\`A"m%fGpr_>%A9&?ke7(0Y<SL"kPB%SZa)WV:1DZrB#GFhK/b%0X9U*,2Yi2m^&\*F^SGRhuE/34:O/Q#d_U^_<u!q)g=HB6CW1<,jM#mMQH1G5jQ9^;KBO<cuU)2&3>a6c\HDQjaYKC$LJL^\UsT&%n)(Tr'OX2P^#KnB7s!4,lm=s:fn0BC!L;O)R@tNff+e?<d]WS19G*S<?Uj<?Ta"UY-8fJ>lM6ZBZFEm_m21A97qn+2JO,rYhl_fl%i<IT,P^Dd>E.W7MM%RWTYZ@\nF<n\+-t;8BN)_9MiWE"W?NYYK!34=![<Debd/&M-_MHLIYCs7;oNSQLgTi*M1e2`?Mi0[srn<cl%,2#-`hY=c/3=L"[9fVW:Ak'jrRT"a+A%IbDBE@8QKsDD8@mbU,S]"`/99Ld*SeEc\=</+<otj8&$#*53O*mS1<K[]YDDL3&&msF,%Rkjb/`-Mm`[hT37hWJ'GkW]mUK1eN_G#_*.#^Q2`&J7_Dg8eBin.o6<,,_G2-`)%8Pm@c,\b<-"Rk5$mKLfboB&c:WY9[Es`3@T\%h4ChD?t:g?RJ]/P,"jb+!`/lAGC:+8Z\XhMA"'7;"#gfG9G1G"YcCAe$qrPj.ugd&gJfDi%4[]rQ#0LkF&&)Set68,De"k?q:dd$%UX+[Qr[5+G_4:We]n12X$Kl+m+h5n^1FEAVJ6EKXY39@s"VsAjH)7mmcY714XQc2Z(b!BM9#-cr;JP6:Prt)[7:(,eFPhl9^d]<,%"`LflXR.Lu@SM9RRnF+oQ5?HQ,MiL"`HAII3b]gp&3m)S5H:^Ws0B'h_,2F:]j:<C-Ki$DWea^4T&:nd2!GaO"OKUVjgd)iKHHN=%4V>mW@pqQ"B4l,0V7>.G>*==orfYdJICAp2%YOcY*]>UQm6:$_f!)<n$6b:H*<A0>r6'FWIfkE@A8P>eG"r,n(8U!coXt9X9BO:!%2mfObB.T9A\M81ffLNU.9n=eR))gl&atb5YL"H'Jar#b_'T<f=644RHcP;=`'617i\(%T0K09;J&o[jF\3*:[(3pW`64iA7b[r#>%5_7<#0qIDFfqqTs`u$ZWak919)b.2IglDptP0UapYYOtd2?Q!./,6*W@"s%YXBB%FU_lY6SP)N4H]ZU5*FL.[b(coH,D!o%`RO^(%h&0dM^AStC+A#Y7f7C^Oq%N=Df=pD;ifGs.U<Q+Ted(@'U#7ErFYNjV#k(!)3k=akM>dg8:rP,:F&X`1Vn\)(-:n-l]*9i'R0#ti%2X$fQU#mDVJ.7Qa,_?iseKj)JVV=?,pWau_m&FRNGBBuV#ui>]F<Bj"j^C].T8F)'=]Ag"GY@P:7>pLJO@M4fk=0mh<(Fnr]BoPm%B`\XVI3OnBhT.XTTsmGt\Z=nDT1lSDk;1>%l,g:'1<!lO<EP1RVgI9cW[WR*@V0m=I[6_NHbFVs[VEpZhPg=BOXjVH)]_Fb1ifau%.<FAfDi>+0W2)g?d^CFjZ_s0^*.NF^B6"+bq(B7@l2*1as-ZU[0<7LiVRkDF6D.LT`V&[:*iM/T[Mtkl6u==QNcco]L>h+YO*+#H%0Y:LThuNJ3l,5]oPR",YJXsKX'AGK_;<:BiVZu\hEKu@*+3/1nL#Y4'=!ETT>B-VCEEV9E!*`+$A(T2E6SLVTJ8m?2-tBKin`JJ[%3m!>j-*ejg)B\Iae>"iQ'9Anfg?M59e':-]jY.IdRBs1_S"\rb9rcU]aM$F$R6,4L5$.0G<.EL8)7U^M<+OX^aTBf'*RDmY@NC\Z%`EH2jkr'3m+_C!+V)`DBhT&[;LsZ3BqgC4?g(gjs#QDp3)Cuckj!qY858=kE;+G_X3u_JkUOUQJh(E3\aJDQNZanXqB6''&MU=K5%SEI,<NEpnFq(1LP%oj4]mLuGs,>&SJ.BXsT$Nh]uP$].[n4<6t8^NAVQJAe07&YgYq0,<H38K?BWnb6q!31U[^uUHZ#<RRMb`W`S%o5f!Nl`k!6,\O7lbP8Q94TGqkcTPopEdHkJR`)HU^-2(8*t59s-7`p962R(pVH:j9aYaE&%IgeX@1J,H;fAERoa7C_VcaK5WLc1^%UYR<Z<_&*T#&+PBJfc4M3D_r3lp!9rs*$:H@%?6%7YRRdM_&-hE\F"T@7U?+PRLL_29<SdCEplP1^SKsW?_q_Q4_MZ0GD>P)Ze2*%UX+f]fMia8a4L_W#$Q0%(N6]=UWClZA4V5=7hnS,R#Yfq1I4NSCb1D^r[i@s=.Wc8\.bnBZ,iQX>Dk7jm:i7cK?:M)#'OR%78kA6%XWGmZBi>H6Sb@"uB_bG&)uJcqp5&GTSa)g:9nbp*&es%s\T,R3a-QN0kScgn-pDp<V7mAtV'@(PA%f:-FNfje!Ka^BqF^1nd7ZIU%C3--JYqLG-hn^RtXgh*Rf6La4b^mM58KRnnjO7itadjfS97_.#?GG)XJfL<Z>F/6U5,:&nf-4\4`RM0IF>+<50R)hEnkk_<cpA14%e9.q[#\T6\GCpgQRiL:caWPR%Qt4LG/b&UL+m;=#9"j^obg_1fhi\1!&nqmS$Mg7Y8;P7&oKomRTOr?+4a&mgltM<rLsh9AZs=i4%(6V@/_.;OkeoHm:$(]1V&e/ilYJa-))7p%UeP5oNApDBUC"YQ=/]\O/cp:(M@V)2NgXcJ&(,I?,Va1:9(%g6EIp>B7JcJ`*+/j.B%NOsd0Hc?3-#7TE])@?]ODN*g]=l'QU$?dE::@^0_6oOPh!h<="Koo9&j>E"=B-9`"l&ni)OYJ^,QtBCq>1]HFaJhc;\De^dhibht%$M#S$a,d.qO,WE(In;8EEM6bAAqYAWcg=l@mu0gY:j?\&4A]LS7bKc9K@dS&:CRn,eUGMEJT$UI1GG$\^#u[grj69_N3k/S6k:h`%:MYOk7YE0.@:62-).+]ScRkcG;*M$m3f]B:jZs#Oq>9i#kH+?\3d(-&V9-5'&trj!LDG[G\^'Ndf^M!2cK;Oaq0H;^#pV[l.>!$(%V*;u6"pY-dK6;J@#k:7rCKYX,>jue70UL!0Qp7W.\8RAZQQ&/tN/1s+JTDhm^K6#M;</XEcYBhh$:k7.Mj4!QHduj9Yam!QO7IM*%9W]idE9HYn_VRLH&.Mt3Z5+.ji#aqm\hiR:q'k&e@,a_PHsW_r&FYg%Pe)De+o8Bi8t+q?cEZ!/k;IUn<-\\VeFk6iGC<jlNFt9s%jLY?'KqkFX7^"_eL2&E_+[KP#R1s-q7^hu\Pb#GQePp#4.hum6;8N.CRTNC*Cd#%Phnrq@#`6_p69goTfhc@"/"(65?F*F^07>?n%koj\`pY`fH%cKRZ;=^%!7N8e<o$)OBL5&==Sp<s=e3Vfk=&r5c2rRue;B\mc,@SCf6Ec1:iY&9,&Q;)W@7d;3qk"-pOn@OteBT7]%:.W%<c"uXE[a\7hcR"oA8sKV<R]@b*N<BmFFB8PEA6kDnr'q%%lbX6]105S`9oYC8Jp>C`Cf<0*SSub-S7]I$oh9QWCT!+BbP!s3%*/*.[P_/XHU=)0Mp0Z6b[d"[=(P;W?k8,-B_HCc5Xolqo<S'BXeFee8p7l`k\SS/a7P;$,dT$:.;f_4Ci;R/J%0eZ+9SZ6LD;HSW%-XESGs.Z2P>6`#?%WJd!LBK'r7::X$P9..lJjJIP")bQ2&JMa]_V();_QKX^]Ieg5K5SYdpI)[5\I2*9HNQo73p<[@$FX\K-Q$N`%OGk(;KnHPE4ttt#3+t%4%BujEa4q9Y&@*uFjFo/Y)'5JrgKKKKc?[&sH2f!jdS!t0d[C6U7MtY$CFEV,K"cq0XU>N2L%HcHJZd"N%<S/P3)+IlTjE0P-j&=_@Bq8!+cu0i0;^.%)XkQlNY')'dYNNL_'X@t,o)"3<MLHGBV^([YT56m34GrW@o8V<<[Q6_@q32mi87Y4H%lGooB0qu$9Htlt%,O%k?_X=Z9D,9Tk)>iIbO`9H,d@srY1Fe[%9^Eh&Zb2V&G[BQ<A0`0k[s]e,P?Ye_kBp2hL#JZMlUGhVA0%F`%ek3X+A1`$S[YsYErGtnS!OItB<RJpcEF?gYWh*r%0^?6>!'W1e4CEhi=3<#kMS]VEGC/,QXg.JiF4Dp(`;<jX>R-"C!jU?l4BukP%d#P7f6^!>/MnjFL7TAQ%aR-YDVQhu3q&R95L_(AK5i)NP0imcc8alHpTIrFKfTl<P^/i.:R(I)f\;udXb]a)PT6Bg"@J=q\Db#A4%7Ksq:$lE0qjA`-.\e2$p0#E=L98@83HVPN6H@RO'`hFcRoX__!ZAo<X@HsZ\695aHKdFN3hK%>\B6uii5/XVdZ>%=I!17/!QAM^s%QBKN"F.c75i?gbP#b+*T]?OWc'rse="T'eDeFSSU@&6Cs[B7$lD`2Yu1SVc_s"0R$eMXc4kY8GFK]tCU^W^%kF9GjddRf-!la3RY%/+Vln+=Ze[iIGS_4%Tl6P\N(O5jSR\[k[IPU?XA_-k>Cb:!:[D+B64';AiR8KNSq96gsqQgSF,"0$dFQbR?s)C'8%m8:GEXc:7i@%e'uD%79r`K0#+9=`(33Hcm*h!rb?e_M;%_W%CNSOhDLq2qlNZ"f6%l"noX+f:=uu@#rWJ2lul`?9.&/4!1Ir3hcl6sm'`dsb."8p%*hT_R9<k1^DgS'O0eTsir15>teTX;r+AIJc7&.6;>3lN/'3=ZiK!*irI70>o&/91<YYmB&F5<riSOS\ucUY!,&V[XhQZi]dB$qhI%\leaMR[4=fU;r2%o5)GD+2(amE]%fE0>-$h'RKR\CC)ND:S=PJ;cN`eo_<gSCB>eIaQd.O9*GaDJV5<'.TMZ<9MIOgG!A>1Sc\r?%UX((GD7>m/4gT4tP3A?X\rO'::0$A#n?K4mCg"^gQE&V5,FN$i8(37P`'s_9TIm*s!G/&Qm9>Wd)g-X3Cc?d)bA$B-X(;OGH<0KD%'`i$3U_U@o/cK(s__+`bka5&mM'IsGB3NM`mbDGNd.<1'>=Z(s@'&+UQk;`<*DnqL&XS(I?R&WAj=XsY5ETI^!/"ZU:eJ&A.!QZ4%.o'NU@nG>j"Xm9ETi"VnFC9rFgZFI*AS[^ohFZH&]+U*EE\8$;@O&*`F=4P(D(FJT8<kJ,3br_78Ji"b@L\Rp",N_@%N.W\$\e6J%UR@?[\Wg-]<cW#-Ajd4.S6(9/W\Bq-41l`eB<1$+*9)eElWK&G+V/-h;'NXKa4Nj;\W0NnkTbVd_)7Rq\k\3FXW"Z+TIk5lbuei;%nkBh'BPU\YR>9h.4u!gGi_TF0/YEUKEWr2hH,:brQ+'=(4VJut#n`m8U(e]A:(9I=QSDZ,G*hO?Pat$&<Ge-]Y-@*?EZKFeHC54]%&qDE[:A:g2i=>L6jKWRi>iNs(BP2JV!^R!CPb*gHoWIJ$b^ajV:t`G)X6f^7IrX/1'4RsNjHn/%>LsGD)gRVBA1d0^Bu-pe(,OBa%DbY9(]`NR^2Fne5@EOs^X[_;Vi0.=?h#UNDgK&;jHg1%DP.BU2AKC,[#Rl5qid!S]6F`&.0@lc9lSLcfVM$e2!dO?,D$ti?@s2nG%R#;gr*jVfQ,u6&5.m7;YY]a\id*64XT=''3pj;&6oXj?_$\X6PYS?'aOu$TTL$[X+$+U/!jZedYQ'QUUB`N+STcGsVD<2c54m^_>%HeGPE+R)k>mO$OX`tA`V&K/ohGm'j#:J%fk9YrY+&0UZ)M_ac`S)72GkBa<^L^]2:*"1:agWeIjR"FCC'2rS'Bo1!ti(*P96i=&M%&H`(=XJT^&)6(=`=2H.iBh`]h?7mcC$"[IU%YYjj50-k14mq$/"g>oC'$hmQ>jiB%cLXh-&BPp%mD/PgHXn+QF-sEJHHnha2F2Gi%ZK`6s!DZh:nb:+:nt)XtD#WJLb<1[tkTWjgn#S($3o]=#Cb'$<VmC]HpsEVD*!O`q<<YSO;;F.<</ilIY!\?!eHO2bd20(c?qZo!%JSiG*G/,:k3Oqf2NfA64erjNF;[5KVNND194l)ZY<&ke'6[LlQ8LM&(U2!%6BWtJRWAd=m&_)Zh[2+:O*^:kjj1O3T3X'7qa"_]u%WpB%#_%OV6mRNF3G-6&Ahjr8,:YWN`c66HnAjfHjK0SB?q(u++qd&#CZG?W[rnprriap5LT08\_63jZUit6HK9f\Lq';pP7TEZ[k%S+=)S'asMWB?\kl3$6pV,-,$<5Ko/+Q\I`bDBA++6'/J7`+M5i#AL;&3'LlNSOQXIXk0i&,G^TT!LL>hgD3Bg!s7(.l'W2\M`Oci%':5e;rO6C3F?_a^Gtkd4@cr5$GXr>h[W%8&l*1'YGeUWU\XGsu.lc%)1dWf^AA!S2ShaB,"J\RsC@hMo2Gl`7haAPPhJOI(=t;'L%(8b\a7M"rj9F<l4CTj-/\jo'rG>+6(,:Dmk%`l0B6rie(?;3dIQ"_"?03TCb(@rVro(DPPQjXS."Jc*iKoO:9-LZ/t5USmpo9=G:%=7OY"Fe@l8@*M4K.'q]?3L`Tb>\SX'.'O?,Hl.GSBI-Oh:aQ!4^%Jj06*-@7[kqSFdS39.guraRlY*"r"`A>u";BTR6DhZOT_J@)%E1>1rM/abeU4fq[]A,tCs&Z2'ad'lGd,HMBoNoZ#IG*dp'N<@jV>o)b:>k7Y;1br3cUbEO..`0^FRsSTI"Xom,6D+E!jc4;PQ\3P%!agl7;t1&Hf94?)pR*q"e=J=g`\lK7gumBV2V[,JPp9KU'1H+/4;A.sP+\=POP[KW!hr8pl=i$68IuL_#DJ,bhdZG4=Pmi[HB1D[%]o7&Z%Q)P`[W*\2e,m]U;_.:3"`l#W\BsEe=mBhmG!5l\ZmqM`mO4m9a6]Sh:_nf"<Ns4DV?@_o.F[/A<PfoBgqMoK>-F7K5u_?(%cn6IG>F/<[gJh/4!G6/AW7pKtV*h>l0RcA%U?&c-bS]2W=XF9KK/9\OMB0(>(eL'VlRE#.GU(iXM:Mk@_m:I]DU\Zj'r1@G7&H):%pEm/a'hgqmH;6(\/V_9JRq\j!IGsoCIsL^),Yf_TUZ0gN@[)b#Xr3R8;b(HfN'ZHne+LO4NST=mkD[m8-bMFuV>%C7XG0/#[LjP+%cRgp]hU\u+%(2LX]5iW=bS]4,.7=o>TU[N7I*'+eJ*pm;Dii"F@O)-DgDA'`!0Q#:MOD\!$j]`g\I<*F.B:-.1g+2E#LF2VL(3X8%X^ju*3rHhjH)`!A!pL2ehJt.S4c7=b_"2V&m'GcuC=r<?3C5RCJ:9I3,N%UpT,]XA2ok?C\s>UXh64>SS-<'tm.7O'J_+c71sdWn%ShY3];E6S!$'c^VoZYStk:@IH8b-Hq^,mslaUs'5Bu)A*4*GctYr9i&aS$uqFPo]2Zg*EW*B3d.ZQ>'*X^XK&0MlPpklejcPL-P)%"P-.NEN_?QW^'R-UQe(0MulGO-WaiCEe6_T7Pl50FU9gHS)#Of1nnHpUlial<?j]MLk?8BdjN:N!Ob@inj@0DJJd$d:*6U.+T;+O%V&2c-a(C_'&._^ps5MOtomXa>2(O"<e1$'VT@OOi0#1t(PrfkK46-V.AHg992?b=K>JR?i7W!lia%RP'9F>9tK,+b]7gOJ_=cPLO%;2NZ\W6;!#;WKk"2q^C>WnE-hde7gZf9s:L;*8,I't[D/V430$P7[V3!'a9RrLj/M'<f$m2N?;e_19ZIHRm2Z7T.>QYF.HpgQ%`?%:=DpF`Z6F11jgrg9K*8tI!skPf!!AT;=9d3<DAQ0j/cOJ"9L.806$K1`rHJaEM#m28-5'n;(*EAku2K*`5:!%7)WgXjXGT,:)Pis%P=3;mF%!=N(]j@eU.GPm?aq,k9.C'Al"98D?HR&XOfOk7hg9.Vgj=?k/V"I<-7eYV9@5hg:oeMilF_8q'%`W$GP')"&4uM$Flo,;%FkotOk7-^g;-6VY%t=lrlI_-]K^MiTIk(>s.Se&0b%fUVVZ./'(ERR%4\]9#!F&V$1]f.(cOhHUo,U&k3T)X.5_4it22Wb3C'.`S%X/0^f_:GCA=5OCM,hSgQP5=AgY]6#C`h>d;#s`K!:k=aZ!KM<R40bo5'&.EGPI#%*B[:4uO`Kt=?\"JUMX<?B^W7k&.&SQ[83:^j%]k.GH@F^AU>Cqc=b)"Da;df#208+n.W'"H$8rQ5HNn)]'r!Y?(<3;>OSg=2`OpkA$^`[d;Nq9OL^%rNQ[PW8jb(8J=+Y?bjV6#3.%fgX&:_s!1kKJSV9i[%KF:Ki^V$fGU*dTD9f-Zm:]O?USgpiCkZi<HJE5PMF)Ne3GR$_t)E.:L5I2/"c]Q^=mEFl;GId._-gMis@"%:TS+@4g%`@b/`d"9u2lBYbdPXgOs`C>tN9/RqWZ\:>N,@WD"tL:tW@!LObjS+j7K?!KNjQGt<Woj&NUE_4'#QYKtqcVl:5Z`d(5%%CFAI4XpH"L;Y0aohep:Im[STH7VSGPTWBhgs2od;@j.O`2;l)E5m2!:[sUNm(qJMfh*FY@k19>@UgeCHpH.(l]Q;p%RU]\GjrV2?%Ek[EragtDmI>djh*BFl65nV>'2A(s+c0A<Sd=+cBcT4i<bQQ9h!'Xi#U+rWe>R>8%#3:PZgo&B3@iTL$>kD5,f(;/?_k%K_",(RB%gmjM%(8:TNWN5[t$&,KjSBB6-:asjD`iWi_Z0&65Q#.)\okk1n>"6;$4()i!7eZ9e<<*HeUO-.)&?u_SXl#5Ngb[lFbeWjXc\V.D%'har3Z$q'R[_0ah=JcmW<c<uU96q5J(l`#p`)0ug2mE%0"bG/D:L4+m@tGdRZ!c(!14Z]-`o#92@$)GV'24e-"be6GJ37tHo&Q0-%RIGlaDLtZZ\s>JS1Nj_f0:sa^]2hg%imqNfk_KN$@5\i^ZgJLlf)f^5pKM0]"(Ap"!jD*8RGT=qp,Z?Z#F<k>!g,@j.m^-%`te0(%=VB0G!B<;o8OX+K;?s#lWUZsjc_1</1$Dc=.g\B73C5FYpi)9bS.h`q.4#T#Z6X]8D.a$3Eu>"0]KBDB&L\hO.h%pBP,(i_YB\mS%VWZXb#uZ_X!K\u&<@K!_P:$Ft;bMGkVh<O@V20(+F*DFI%0PME'LZiq6,9XmH:?\&%s)3QHE5EXSdo7<?-d-#l*EXU]"-NF'$(D1%M24S,@4$U%1$c4oCNG\fXsf0ZF>e>@UiKZIO`X./qf>E,-*L&rIl7^8kbc5E=nsB9nPpP1G'dN2NOWER=)Qk=Y;8OK^XOX@bdZ;=%,nRpol/uZ=eqk(sDhE)]:uCo&5_l$CGJ2?ZYcDG99-?]i<I'`N(j>d;UL9e2LFPP`I>hsUgHJmcda^+PGtU%IBK@h[AfJH$jV^3/%?:j+jaP`tK02PW2`^X=J2J@F^7@(Ru20e_&p]L<C+JP]_2kY<s1SCVAk%,_+7XCO^L#kdA7f]t8I2l:^>qXkb<^a-Kl?M\IR1ZjE%\?8uXYbUot4*&3;G9g#Q#6N2<NCn_f6f;eu@?q?RGCZ9%VDZENVh&9+M&.7QZ3bPh6QSs[!O_Bh-F-]S"$TXt<*$Z!+qX]pG.g*t%Jgcj&5b2Ji!"o&mjX$;)oL_:1,N0D[_).PckN^V]?Z&2I_*33U>",JK,DkK$9KAE,A)`7*9nGTMHi!p_(ii9e?X$F30SS_"53?9i%2$qXa3"!;cOt19U&tlKCZ\HaGPumZ6#%NCW&pW$GBP96h1l")KYYf*@d\/.da@<E?%gbh`h9eQGV0#[)O6qAUM`(*7\ED)<O[pD3%jB.)?Dpt;]52WmR:'MeP!.!W\6*nHO6h/77?,<7,OA7gZo\MQc-c\<q6Q50fJ:qY]Br't"1(6;"-D*T+"uL>.lEr@j6XN+t=G7[^%_+O:IjB1i,KsIF/jI@2UigBUbMlXs(q9YF;Q0X+h;,gL?O-,PkJ*#qj]u`a;Loqa$YeR@#FKPbm%!BM:ACbGhcX&1]IuohdK)Mp[%J,ch"_rGh;b"u)Yr/tZR2X*I^og,cAH/4dMoWLaMa+AsE.,0MM(5uMqf<?m1g)L%9:p5$NhM&0mH]HgKFau#(;Rd?@Im1Aggo'Iq%,GDi1'`phD!4@Hhs*B>l^ZF2Yr'?Y2#N@=@rXt>MH?'&f-M%N7qVKKX;8ti7!56th1]A+"r^SC:$+Ym\<m\cCJK^f*YI$1:JHoRa%m_mH+qGVK"X@4ZP^pOB=f30_K_]^:lE(fS&$\Z;Yf-XuUaIUfnH3h3#\s6$Uc($[>-936$X>ZdB_m?EqfH(kk9ACYj.=KoF9nP9T%GP`BGj,kd%HI(EoRUbO3C(KqV&!'EA`u-Y/W7</h/?%[R6)QCF?m6s0M8K(-MO\bYON9Fc8cU?cE6uTHgBru.;-VXLI9p`I3Pm3V%)Fd2eDa-[//Y?ROZBpeA@(!k6&shBj93AK[4ri'Ch]1$F/<MNC'O[H'8_]>Sb6W(Oqh.X3/oJbc)Q8?0cV9LB\9)^fha[d1,,5A2%j1u@b+WghYKV?20C+:=8WF2I_UMV/^n9]r=P-XR7?<NI6m'!IqD9pk,N,:Tb._Vqb*+di9'<3_;oeM3lKZ&:9A!`!;7MpD^7>W?t%n70FS=,G0alZ/2sKssJlF9ij(F[hE>G1]d4nB<pm4l%B$hG2A#,0eW.'d'_9*nFaQ#66;)8V$2uKKFBi%h>Ycg1MXNRs>iG562SH%;E;nbrB'eikD]%3[!cm6cL:V]Y@d0<X0Y:B8Pb[(D[JGb])h`n[OepsjX)8+n@(b>TuSo_d$HK3.V!6T^C=1LLpYm3V!;+U6aT7Q%#PmdK]+:#HMOsCurJYR+IUnj([>;#i*b?:ePR+o=V%()!Mdl1CLk[fD"Ttf,B<\8L:MghHiNI!D&4%AQX)NrE3a-Z<K0hBsL<kqh%7u%u+CIZ+=oQbPJ+"0@#:Ir^B2-\Pg]u&"@K%ZT1NHH^Ln2[;'9f&]@ZOZ?P^Z-(&jY9iZF8(&/(7XZeTb7o[0^09+j)9LrN].9\%#3?LU>^OePnmg*4W3l!3_159`!?G\IFlcJ#OQ,H3@F&?p:DDFX>[P]jI]f$`5dW"5]W'%J7!1N=D0GB;"**bqal,\$0O$?e$)5t^%J=)ZNHYCpR-I/6Ak)X"lb5.^SqBq%FcnfsMUbgX?:0].SEhmRpLOg2.<D--sk(]p[B^-Q].fd3/__5f[bUOal1Jac'qRWd.gK>O#%N\\W-WqO%>E1)jZ!'/"RQ[?p.+3+d_M3udpofsi?^jq/JX,7f?F'^iJ_436'MJp!SYJI9;OM`oo#jdTs_A$4i@gjaqrq$8B8>`Z;%o<V/.>>]*ol1H.,'OS3&oZVNC7+XYPfGr\rD&0h[Z9pu).2rr(JQ].Cj7kRFd^15'3fN:r\BjWr)YjP+l6sCX"pJS`<Zt-Y[I-9h%DD]mP80CL^]27NJ\8@c4*#e1Y8T>i[aRp/D3NbHM'_S22,L(p%%n\[:^mC)2.kX\m8*JJd.0W3+=RL5`EnZ?!:/$*@ZYsUbY9Q-5%WMK4S?rhpGa?9fmhTg0"]h`6O>VgHj?D]7;,PTi)AIVV;L"/K!XAkjJRl-s!Z)L(_Ys+%bq2/UY@PTRs4=?1^Mc$itgMU_rQg"Im%3U^RrY*d[.6Hnbu7jq-V3(?6M'qC)iSP:Y(,c&T4Shg\Wm6rG>WKN5HJ5olg7RCISJ4rlmPDW^AN-1KhI,2[F2l!Z-!-GmQBdI4H%A^\bD%Fj0Y)I$J3Gq(Ro'KQq`D*HiSH$ZSJ\M`m'2Z*.EgXN*iZu\QmdZA4[1(;Ju\cGa;`GU#2ni`atF4c)W<>:4R+)t9&bq0.a%`;/Q98tY$-?:7%scQ9OD&D0l1VV0LW<.*H`DZ4E@D>U9a"rGgCeZSK^cW3<;,Ei$51!IF\RfN,F*BI*!q4elZd1W4ZTIVO<^;U4F%`p9(]$-pTUr@Ur6a)me4AY\"LM@nSnb%Jg9]J!ACU>Q0KU"Yqubp14l^!UnI%\Hef#RuIAXD^>HQL]Q)"QRZfl,)8M6;B&E%(/Xq%,GTWNa,"$>P-_#jS`DK13^:o8Gr[ZV9F[_5"kdsM=4t$M"`MRXM35n8;$t)K3O+P4KNebhIMjRO;H"-a":9htB9Fg/*etn8qfPSN%A9i3"bFHrS*[@kQr5%$cj\JQ6]6JZ4V^REDajmTH)>JM?<^X_e_A$u-CaDur'J7_Q:dhl:b"u&3TemRZEb,Q>o$2eQ2D=(HjfI-I%(*!rE%@_Yd6WBcj1CNW4Ms<l8_!'Sg/"-b`)/"-R+D#%V[oCrQ\/qEM8o7GSNU30m(/*@QOgBo6m9+Z&W<E<^!p/B.gAk.oKAc3T%gdb=Q<0HOA:prOnNB-^qf*Y'/%,%<g+F4SqAP$=()KkQGTL5UIbndF.7u9[:F\_I:Q]AbXc_NlgI?3j+QR_'soO)%sj8;`"&B**t%B4&HaY'WHq5Em5AF"f'S;G>TKejnP8X0,&+a]"P^p.o^SMXMaD7o,ai?83IObb)%bAK*gu*e\R,@j.`[6GLf,b%j7@na=tbFLEL:%<kfHt-Db,]3Co@M'A8ZR(AXb'IO[8.i*"$R/O[,!<'(_lY[$t2?JS2OKMQ>ED?8+fZZ,(#g>5ipgl"*pgi!BDB<rESCQIK9,pP6m%Y]Kl`U<+;g3i&!bWFd810tckc<92[VoZkO<&,N:PS55;J!KQisfSWmA?4@bN5#orI$/]*<TX?DY3<F/sAV[2<Wqup_A.*%()"qn-%(Tl9n>1Q5cE19nMO/9DlXL%N(Dg+D$8..EQMF_h#\o=5]ldSO?"Y0:P..'_!l6,4:!K<lX,iHRP]H__M*X]q<DR7Vh%<IC+#n,CH%[5!_3?Eh'kG)In<Q9k?XO^k]9A1n&_\]L00EMJO80lSV--AQ6OSot&>\R@&S?Z'+52=0-jd9O6]]mqHPc4tbqIo=bsoV:`*!O9I(%"nJEs$*`b7ORid@f.hX;@a/jj=8\h*R<tn:4XQic9irXOP=As@bt^.8HgmCnA)7Fa<'NL/EkNqRGV%p5Q&3Fen`aPJ_G=7]4Rpk#%$?T9LBE]kc17?k\*"b]J_oGGb5Lne2Z6,2Y1=kNJ3.n3>Z&*q**#C,hXiOm,;_U&^hY780)9Mqlk9fl$<R5d5>ip6W8iLU6P%FFb%X`=Ks+9\3f?SeEY0?Vc0o^Jd8)54::>dcJj;7'>[/g=^(7&kt'n8?Q`TLJOSdZ+0^oXDg(4^Al`D-"?_l<1,0Zp+'hd47p3Ngj!b%)!/D0B.(jF=D>%ahNCPU?kf"ig=3ET^^!-0?Dl2'oDR0=$mH)Qb9$>6b!&%7,*J>QZV5@\RB'Q-,PZ&l#&iDT4?R8H\4gl:#l&kT%5n-3IIYAVX;:]/:dq>E"TPdsunkf2NlP$.ZUosh[aaVM[UPnf4jh'^#_-J0h#.-^SW:Is8G^ss>?";0J!ec_M13O75G_SZ"Y2aY`%?9#f[#iRoa!RRXbp8q`7FB:bt;O)-`XR;r9V\T7odLkcK,,PZ9?:*LsW$k(:L`r^ho+=]\ntj4iBiie/m2&[Cg62(E=RaR\EpT;b%YR/3MUX"V^TuOgMV+-,<3sG7o&%HV+i4E2*O2W!eG>75RLQ_m9U#;^ErS3gRnM)sB"ZrF<l/a9UXEY3sJ1M(H1d_M^-+&PGWi0!d%SQj6a"g*)unua)I.*,HNO6F`ZctF)*$\kKDomntFM//"i632O(BGUt1V6]SI_3%15lN>k\bosT0^I(G2=MIT3Pb9?oXd&tlVRXub%]`^uBlnYAJN"S2E[>B7$<3bc:YNX(@V7G9fZXQJR!eaE#X'Mi2-\'&2O]5^o1+!KcqB!0\"r'ZEhDS6\$)a.NlT;_[e0D.^[0o1*%aOAe!e\Pn\?'5_g^F!+d>),i$plm="!&]+pm_*KYo8.h,\3HTq8M[SZ`<(>JB:(sA]d)/)p'D&Og?/jVc5rbiUm'Z,C,dHs7rSQa%JjVIt>/O@f(UtM0b(;6)RupYic,dgf/,EY_n+'XnLJo*'RL+gMIV5hL&(K]%-DY^DjnRk<H.RC?\q$sJ'43%-#U2mQbfEJL1=ka&%B&6ZWI7s;rp%`"5af%ak]e)sb@tp9S%;<)=@6_LQo#irc_/[D,D=%E0B</goS9';Td/OsPF=I+FCC/;OWZ))-Ve0iuD"X]7Hee)[%&@j'9l9OVN2]6t6+'Ti&K&l*)Xduo(`Ropt@tW4cVP*+m0!=1_A'5:?;E5807hNCKL>6V@HGhK)(Z2r&F%:DHOobhoNh&@HS"29Q%S]A_.cmRId><`*9R3m<BjXc-D5IOSXLA#l`>G(_O<c(7e:j[kA@?C.Kbs_2CHaknk$%hc/!/==f&m7Q.\<AHV8!>(RR`D7FQqN0u%,.0bE?g78%6@LTQm[)V_VF;J#7HDYTk1C:BgT_LudSc)G'\=RX#V>^`o%+]76Mep:UZaqD3#r;M@!:1m&DCApp[H#[]FWcp<?)$%%d6;e+`?E;/<F;X7`,cYlJ///:AkCkjZKWWJ9b0=)fg!1jit(2+JB[AB3BSVMT<*Z[>q+2;BPHQ"?<bFh1Ynss3^C9IZTZ?/W;njC%G67u629e?<*)(Moe_mc'cDZ'5-5b?=3YY#(`GhsQ9g@6T=!jTPaMPgA^X0\lq@).ZUi=u+1lduiN*Z?DhXl[p2-A>9$"5$)'8B9m%/!UXZ=E@eT`>&%4>d5g=9h-bZmIHgbkcSW&*h;Rf4c0)k!&#>;C?=&dRb-aDjM653MMru(k2HfRCS]C,W3"#-[>L&0*!AofFuY"+%96$Q?+6akk]'9Q"gQF-LbJgt7(j^BaK&%-o<][5o?FTE?pN"Dm?rmLndVo?)'GE4djuZXU6#Xe%q9SZ5o-5:c"%E/_a9c%6]?'k$%>3(WQ+11`B3gTj5a_3-1CRl-c$_PktI;hE0bl-6&i6&M^K.4W"Z.8Mg#JIWT+*WQeY^s+%?$p]+E([cpEXGK\C9DI+K2aHYro$88%,oVA,43SftGI,#\FkZ@?]6Rn:GI;7qC93@a8>PO=QoDLuP_Y7h&@0c(!jkkKVMo'?7Am?X&QJbmZDR5aB?S#c%pO0a*_DeT&r6A%%s$W18MR+bR8s&lebI:_k29c6=[P#m+@Iq:$4i+28UEO?ESEofAP#;F"1jtRZBThi48JMVOT5G>u4C>oO-L(/?!pY('rc;oMd'#.U%OeG7coq&#Ql2Z/,lBk31CU;@/*raMYO%9cUUjBM*#m?ppo%7pQ'W+#H"h_4.[[1cOC`c++*oY1-!KO99)X_oeo,.1VI.h/)3%H4H%cVB5P_FX5QW)B^!ke>=NmJ^pT53;.?.\$j,<lWccM,)*4h1H"g8aL;Wg1ArY]#i,mf8J\DL@F(od8<VT?@rD]D7+e=<L<f:0AfL]%EDBTnLp?uTe[>\)RB$qhA]YAnN429>.lLmcBaUpOJg+*UE`"e2fAn$_4?I=..D+\M)mcT"6mJK$-&jI@WSqCEK'hIXFg'9tGl=$,%Q5#LHF8P\KRE+QANp7.48^BtR-H(*rjZq9A81f;1(c,:h&W;>)U/m](noT[M9Q>=?&W`E4/.F$Xlpn)WQN@q-WC^3<_9"^(]nGp9%Y=pJ?Z_hlYP*+gFh:LSjN`+MFe(.7l%g9dkN^Rr1WLidI+i;E0qN$`+]S%r.T^]5jAG(\_`)6A9fpqH_dnH]'R__E&&3R<72SUDs%lb#hZ7e5ig#%YeugErf_6Y@">AArr,MFm`H0'dYJd0Cm,Xm;?]oSqI6849K;!)'RI)7$&Xcll;mC&;E'*bf"n[;8DE^bhcP>=q;J%R*=[$$#TIY8"4#Z@"BW.QRZ85nj%&/:M/m^=deO5WUFHeAie.+q/1<GOALaI.'i3'c-\_P4%iR3`*-;T)V'_1dl)A^SF[bC8L)>o%-Uub,g<6_N2D.5"f])"UrEbDndq44Vc;UDsPGUUrCH`\l;aN@*WpR8@$O[b6q/qNX@:dX%;tcg5GS/^o)/8).Rmh>Y<BVWu7dAa;%fr4&n*Y]i?7@AEo'q_-bRnY]2FP9p!o8=a94\1Gi4mtK5/'[@,iTH6S"m%<+ORc`s[BoFjHmV9KIrDHmb1T@J!=;gNijRu:/n#<l%<DD<3U'Bao'0+Zf`u<0:C\;RIg^JST)$]LJ""eHsO'0H_q;PIE==1NFHjgj%WBc'N@8.&`D7hNbi<E'#X:HI$=)R,:`l%O?kWpn;%X8!1GLg""UJN"FF`OQ\El58,(/!6i\)@+KjI[NqeM0(7GJ.tsGUb>#b'WQiF@N`q88C7F/1b^;>)Z9/Uf3DpRbP*IEMSnQal/80G%Yro`5&]?bI@6tIpZcrWmZIL:!Au=8ogVIbOg5e"-/C6Y&C"ooR*Cj.Cbl.$N#:!>D>:b^XRV*.B;k^3E,EiptQa#,-X*!%Lo_Nrb%I9.2dPQ7l4#?E1='_<((1`K^g#QV&<Wh4b0l'jfHIBTgqq<kI<&2ko[nCO8W&G*K!nEPE738*t*jupF3?nV$=0Bu?QCq[jj7[4i^%r=qH3T%qjOBD9<TU?o;]W#DUlge8PkolrSZT1K1T[\@0c&%glTe/`,blUpJcRl-`<KT>V,5?cS'Q23_j8^]=j0TKmrd0eB@`R/R1%<e'hRTU-I0ZrckqF%Q/(ogqNhV%A&^m+?-]o%i0!gS8Tgl1mh*fYWLejobZl4\9mCZ#9q&>7+YNU)2`=-^ZYm?O<2k00W>6*hXH@%-NsS8mV9@&R'F$K+H'm5\CkS,Is<4Q.T=&-:Va]@S/F-6<>MlS=;L&ZM(!G+[3oI^&\[)iBc"f]).TI)MROfAAM[V6/*WQ:<7X1l%Th(t(g8l@)L[;\,<"klj#s^16L_.1H5XI3m[S?KK?Q]Y$VP-de!"8[t92$]j8EV\l^f^_7BONPQCF.^J9c^j_\HrNnT_hS]Y3a4;%&%G4Kg%;AJ)siG=ict?f[\ntSrM7lm2qN.>ofWcIYC((f\$Vgc^*Kt/F]2H,os6T`Z:F`N*>*'28K0H>Em]ST=uF(.AsfO:%`F^^%,==072:W;'mJaW`I'*R/D-&Ge,B`q=9]@ZRTqIg%bSYXm"+*VplKdI1Voe5\'.8o_:34u:Z.-]K'(oPMC-Z%4?G3+Z=[X*Ml.q8C%p[N!iT$r>q\"C@6YprJ5pMPjU0PHWfYIB%e2UZJW2/Zp$,E`Ko$k,PtW$"$gj5,t@%#J>.ZeB&b=MPM:_nUDcfm5*URF]?bLqtd-%Yub;ramV(gWc\;S3JlTEdTi7sH?aV$nn(8/H3k*gb4^`;.DS"F/>2P90%>9N!p$]5I4Q%<\=$UT1?:CAOA=%F@_7.:8Zh2BV$gf,%n.e&CH-#Jq<!F@/=f#?\f&j'8'7dR:7Y#8o&8BuK*o"[s(WNA4Dn5O7B!9gU()roNo_1d&N&5(Jm)SX(#/I^8*n[4F%FQE%#t_#%%oUCY^I-aP"e('mXbJD7b>Y&EC>O*<me<?<fRM`>)JQC%iL,+8gHGt*^1j[lDO'aE_bqU)kS)Rpn&q3kqmGZg#&^gdSBLschcQ6c\%fG]m]C0HpmiW\DSo`](sJ#EtVGATdeGICM<hkj)fa8B^rNq"CV[^Gtb"G`f_YC[oBZT6`;4Y[d0^!Bm)jDlkq],T#tC7SfX%,'RV%?X#u`,_4*dNBL^:p&k03c_[Pk8lp09mRsbXUo6C;I$n,>g0YO^"JVTZ5b1AkAl_Peo:jU*+'?mp]oU3`#*??+JS]j$p*:Mla,4G!%dcu8@fZ)s/#)n/E[Z(LSmV7nN[hmYXV)(D'BNEg3&Y"05q2uQ9Lrr3uPl596,<ZX3ZqYE_fNpYQ?1go>`2i96(J@iSFcf:RA<L8M%Fn);Ge$E[KAh*_(3i6Q7"reE&Fh/2tlZ'DbM'gjr3%l9Rg]Uhi^@D=.09dBirAC,Y4$-]r$H_ip>HTthl34QSDDCW4bHom-TN*FK%\RI&=M)p;Bg:DI)YM/t:=*nL6naj2(,a`&7^nE&Y29QX!_;lC`;*Dn53k^QP"5&B">+>Fbj42o5OV"o76^'_24tq"08aDm:$gRQa%k0,9?6AJ>:@N>@=(BPAODOSH!ZQ0W&do9)m7`P(+s*3RDeE3-?%:B`>!Gtoh@"PESR1Lia30@PfngR91ob'Hm'p#t')VZK'?Xm3F%8CuT7OXI]SF#>V5mG-#`-R/CkCc,IG2OLuj&A9%<g-0Am9-9o<NibSb'5u/;\Blqj3m/3JUsI>s2,?-'j]Ju^e?D1/7P0=FdIpf\%;mAPTH2K)@V%3/N0er/2%(m-:]4s3g5#Q_f1hTB<dA@7C-6lC1gXVt=H(g##5O`-KU$,GG@X#a+!21$EO@/AYgS\id&TpX&`&:>$%4=lr(UbF6c@XY!"O4RG)fs1A*,J(#]9/GI"qXq`;qYW@<`%J<sB4M[#_\X&b6Y+%>6`?02j--`H@/0]F@MNO2BeY&BZY3]Fk0?Zt%p1,0;Vpu]Y7;H).T;uIpB\0<:!+Xe*gnU,LJ%++0EZd_dIL,GgTo@/1L/(L^rpad+MOD6nXsK\i#t7\/Quup@^W&Impo\7NgVYYj%Eo24+g#ZC)_i)3SbBA'R^#BR$]e/?jn;R(sLFlbD`;4J2T%Co6lk,)_AZSggRqbH46KSOQ21_&<Nej9sK(:8=C*[ml'*=cZO2FU_%.iBG?b:&N,N5g*oM#K*_:gfU_jq^E)r8:l7kE=mq.KrI"%:J>rJ3%Y0R$m)C%KpV!C-.<JHuJqSXt\`f$_Lq+0H=5U6u4abD!Njm%8WQQD>Tb(7\,u2uQOTP*>*8,-2n)I767%Q3i"93Y@uMs)9N<&U=m$_GJMEAbL4f2N:aeB0TO-04WA-H8'GDcm?!K`!&lF%e<MkpP%nFo)TQ_sqYWQ/f*=NRQsZ>N`Q62,P,g8oliPX<qe65m*ZUtmFAmlH]>@'J.6>LB!;\&=L(*mQ(F,_Wl<1/sKIRH;n!8<GVGN[U\O%9\97I^2f@+D9D\g%Y(KF"PhG/Gt3FA*5^#d#3lBip$6+hBD%`cjuD-DKheb=XHW%.]r<4'gA2[31Y/kGeo^V3'Q*R0JQ#nWKLRY@%\j0>>I,P9oc;"V)rae*Z#.%kg`BOmt!ZtSf9KVM%f,gn;S,=8?!7:"Cc]4r8&rW?)/\K+#i]aMdO7@N4Bi\X7PVC;h?i?kjJ0t0X%>S1JinY_h1!Q:E\$0r:p@Mc4Ab$'CR98SD$lZLB+)9\/^L2jbiQ[((CLh\$tCdd#Enc`gE"*L(G4eHe@??>M<Me!XX3kuOaU[rjE%OP?fV;K?QchU#"hN1[Xs4kAZ\\`4J@lh#Mb0t/HWH'Wu?dZ@&cnU>m@6B$agMlF"_fM[\p0kVU:4@63SeqA*WrLT7*Y0%].%&%MI%q.[U7bhCMg;)m0D`a862=l=(c5gVhA]F[(qG[B_58bVKOG!'8^C*e7ILW+$g5!Z$0%=A;-nj$V$0k>akZMn2-[P>i`Da$jgYiI^2%B!g84[WUBPjZtiY0Zd9QC/qn$LQU`d*(Na@mk3;8Fb1la%=>lB>7Q;1VCbG=B4j<s@NP=;g_]E]ouFCqOXlq/at?J2H%CZ*9D$_K%#sjZjnYYXh4WtN&d(b^>UnQ*C<uC@)&Cr/"$H%;)fnS[qOf(7Afn:Qd@H<L&P]Mci*'-8b?#])+"Ju9ELrl@f!:+i&&ZZ_k@t$'J%gHIDP-$_X0?A(06)m\2coBZ+$7[,hqd>27BicWk)T"Z1tXR"#PjXMO8OZ/>gXY+h"b3dYThJ%/NC::sbXtqf*`oFuK:Jm8c#kb'l%hc9DaWaSL_9[Ga$5HHu3nec#^(miQe"$RL^a=`u:31[GO[M,UO<p)NP5gk'rm31W,J'Ylgm9:M$O(/5J`=i?tOZ1UD`=#\q=[tV8%hXfF7&B^"KfZ+/hNOqdcZW14kY`t1/D.YhGLAU-,o6<:k;5"nn2;,]Pc7fCp+>R(-HHarTb5%4%m7psal15O?'t?.G;8,bkAP5\O%Xn@PCS-6rN2E"@a?qm(q/Mo0Ni(Q_VI)h!TBaRnlYhP>"?6",0J8oOiir)_CW(s@"XP=oPE=*n>N&Zf]c_\uRZ:rj@iuTOWE/\u_%S0S*cnSgSa-qcm"ITC&t9mD@!5.Fc4.!s!N-/l>N!^?HVH7]I=]EW!Qk,PBC,u`@_V/1Y52J9?OHL"mHCN=VbO$f![B*uZ0P*,;S%?B)J.5hRXPX"Ce^]+i__/!%0c4N0gqaBi^Hn9<2?DEQ>>-6)k(BP$DaMUpt;JV(ZujY.Z?GOFcf.U(&['`pY#cr=/]B%?9;G)l(-%^X9NaG`$X["<k+X>,s!*NcBW_`5n=fSGhPq2A$E!%_8?3/_="TV]s6Wpo^hs&(j1=G/jQ`YNu[4/2lTRqlK^ecT4(erTYPNKni%#%&N(g:RQVMF+s.'FXOc@r<`PL88G_MFXbQF0fd*2+r+l7]'#\7-rELWbQKhIsfQ2dfa&3qCiVt:+]$B%ScqBN%RhLp74bt^@2o<qE%lLRD8,iT7d0uX@V9:0m<<Ij^d(q<kjDD!j$%Bm8B=Zr.dO.\-DSdgg&"aq[f5,?RBQ"TfY#srUI3[Ih/8*.3kmRc9"FMgb9795oO%,q9aM7l3:1_EiSidCu(WE\G7])R0?aP3lF6M42GM<=+`LBn.K%E^luEoY'IU,X9ce%/4cqo[\6/-9TTH+90ZjT>'^MOd8qGPNjr@%6IJDqPtalflJjm5!3c"tYsgd`V>>_ZF>T2:>B_(o!!4$`o+cY`eNg@4]YX2rIsU=^":<ha#1`k8*aNuG@IWoh.nMnbkskmd1G"#)%[`;6Xd*^laaj!`jJ+Mn%E9n[K^$h0W$=oHP/LZ>9q)b==eol.;$W*ICXjP-'4fgur4bsNdnrsa4MuM95$L2>]&cGs.RLN=$n<\#/%Q=6p&!7IaQJIPrVEEb`Q=e0NlPS[!(np6FCeXMOQq_:53`!#laJGr@WN^l8B`djHF5pBYg5T4Y3/;*<.e&)`Y81CsGT1c>>9V[$3%>4I&!Bu^jl;LuiJ8K*VTl'`Jd^nm$I9]GcLkkcY5(pDAo'qB^3-)2oa$]\cG;7\RD8`3?DZutAK<XCBTSZR'.R2,;!c=GZ!!o&Mp%oZPc;3RXsQpJ'@:H@$Bk59<N*gm7pef5;P;aZ2Mb<8(rJ]h]W47JRPJ'/ReBbSN!Q<en5h.hs'Hp1'(7n+OLoqZlU\[e;3,iI'e3%89XO5hE>l_MP\n#35m1slU)JVqX%;R36Xr?Mm(!-o+(VNBg/R0/Z7QQBkh81i-7[Oce4i*Y.eGN8K(,iiAd`R2#BMXc>c#Hq\:h`%mg2U;_4(=(mY.APZnbVFNpmW#p,kA(V=!uhh.%ABM`%dCmrdf?*A%LndJsXC_jI*'1:pRYLagUJ^C>'7;sS7GZUFW;V_Q^ap2m-1%*C+seUXTk^\@F=9KdZ-J=nJQBX<Ze=8<7Tu[WsErH(3k7EAl)uq/DB[7[!X4B='AhRit!'nZP?g^GegaUO!G5)'<L!C7plKViXg(%=chYl^cngga%B@MlZb+/a.qPtT=*c%G1,9F.FQs[1M<R)=a&Zu<%Y%ToutUa-2J-lW*1)oh.6ka^.0Ut\FZ%Y@buch=5sdgg4RJL%;Rkp)$.JDC>KMXjQcK5e9p]O`<W(Zc$g06EK_FHV5HCfEorE40>N<]fc<2HkUU45iIh#GtC1F1,01)U]?/DG9p)]aDln:,$(&p,K%2(2Tr-:M"*Q</0>ht@\ZeFlV9]Hs\K)0;N2bCj*(N2hOcZ;%h&.:R0d&[ON(aRR)kS%qllJaAT?Js62"q(r0K\RS9[J!?>MerJ8+%$Aa!jY1k\cPYbiF/!Mq1_mnTZ6WKhW?HcY;HaF^S:m,-bjAQP%)uEU&Gr!m`9grZ?16jbi^1u'Kn^7i?.g878)6kb&Noj0LD3$_n%)JaI"RQg(sj@:oj_-l89*O?uXI:1.?*ReSG>m\N:,t!$P6>Opc;8TTf4Y?&V.3La:jsPP"cd)oJO9=pSc(a5XT"G(Qbb[5i%c9iD%_l_ju#6bgjQ+l`b2=eMp/k@8-0Y&fKML1@grn]SDn]qgm0!ehX)ZGcDmBL9)/JLYMKH@rN[#Orh5+uSpfSA4>LRs+:N-QSUF!q3>%7Ip&S2`dVn5,R."55IDf4a!!(86FWT=PKjVBq*-*K3cn4Df_`'@n<$K[gkLuWFNQcraLp.E19RLXH)U2X_BW38<[mN!N8MW:=YE-%rJWTHK]t)UWDVF'l=Hd_Ol?]j*N:XtAc9#rEq5Oi=tKP(I*il>,pe7V4L%PIf4qJPSf2BH^kK2Q5<F#_b(?CSppLtVr2BTlm:d(j%%='[Gk*UmnOZH1&ABl'<hSDR+>LVs.)7(W80Fmb4;!Pc!jQ;'EDGr<lDY@ddLH2+cA_XEaVB/$p7rnDc'`S#f/i%A[qle.hQH7;-%2CP"$+Ik"oa7guPcX(\r0$4o[H:T^#B_9o7g"s.Z:ttp=9iR&1``c`\&8j'D_0(gblHtYENP6F5S:QCm(jS`qn$oX[cH5d%YBm$Y%A3p[D4XutbBAEaD0?*/2k3i95'#<Xc_I0Y?V1,TjM/]Jrdf(p3RZ1k[+3;>g_jl&Bl&!QZ>N5B)<7k`G0)N;<m?-KPBu0&\>2d(V%XS"D&\ITdA^</bB*(1/m4>PY;cf0k^r+_2[K7AXHRimH6[VJtmcN#f`<d]ua&^sT9`j)WbE2[oDoX(QH1nH#*Dpq("g/JVZg@jLP%2YrS@HIdWSl:4:?REBr'42Pf2,ZF)IN/2SaYm.3RiI@EjV>a"QD5F<_]P=u,`mRTMeW$QQAf[KP^cie%8dbQSBR+aVN.h7+Q/D$Z%8%2VUq-YhL+_H*VEG2A:"@RlG'k,u6k[e9sTZgoT[n"#@<9r:ON"NJ\kO6g*r:ntt'J?)+antMkZn/%;e4XBg\VdjpjA^#b[>m7j%hnbZ*AQG%MhK)WTIGsW!qT.-a;?"KIO=#!L1m664::mGL)A_Tl+<!c_6-eRpqG&+V)W@8:(!()Y(Q_:c--0TifPGX%TaSgR#6BIi%^"O:sMhsCMb6@'.."(Wu2tjpUF7f=&lG56[=-#lu&NB[I?T`XQ3RYCp+)Sa98@1P7A;O).1IaS)^F<_`^,kiam!&Y@(m.;[8=;1f%flj,'PHmbT`#'O-SQ>RN=)"Qq)/J)B0+E\3M@A1"J.L#H1qe!2U%tH*W%(7$(#TgoL88:"mVbHh#/93g+og[NOStp;:K-c2]fFNS%oApC!1GeBQp]dG0oY4u`cLk3BR'4fAD/Wo9$BjN\jO]T7\^k.=afpef?@EE?@9t;"DsqgE=6*,Z6Q(D11Vi_.d[VQ^Zjln-]<u.G%^=j5aflYE"+$=9IK]XBe<`p#-]'11'd7]O_\\dRuC9.raR;He^"A9d%`%<P@\#J*O(q)9BEXcE=ER9rH'YS9cC:er_]<+Ki']cn`%p/b!d2`4('8Pc9Ob/=6B-D%]#YHNNZZ(:#11.'l7D9V\i&E+^dZ3mHO>ha#\EDMPuP)PX!=e=4OVhI[]p7Jr;aEi-M&sh3$gP!;M%[hId`L0&EX;rMr<ce=`.Z[QIR1bmh*STg'>j,oUWQpfqTSK?8Rk\eT*'J-VV?>,PrZ%\f]S>^[UUjkVU@;?!VUWTs?_[ARMl3_34%RjOP6O!e("13A@Jbc2_\ag*5eD0hLA`pm'$fSn:iA^.&i(l[!fYPO]fph.!p&jlWZfKJFTXK>;;_EXm@I5D<+!0+8n2&>$++PN/2%3<4Ak?$&it_u69p:b&u@K)C5u'8<6Xnc%J)g(.%_`dGsb?1=di>uOCMf#BTT\GD]LGt=,ER]lLJ5RW8$fs]Id!F#iR?Q;GH`A(<Y%35bs@Ik.5BFE[2:2)@`WME)H65E@?iMj$>+plPBIO*0pkU$R<F4^9Op,Kd4o`Vqb!;/o%cq$7,(ao5X'+p16",O]3V.VmRS=t,-J%d&^aa"eUS05NYsA55L`=%!C5$M=;(--m.4"^LoB2]d7E;ek$nsHdrB;4,l#D&\,ekcdJ@loV^s1#8fT5J*`Q9Q:ND,'KKc;R9EQn%lD6VcD#<e?TP"XsIE\mE3it+ea_(&YFCOe3j=B]M>OhX:a^'<>/Fas*=4@)A8_P1f(bWFm94aFS"CgL$9DJPUnFbh@YEAFOYaD93%Z\WUk\Y,i@&r=\]J@r47Nds4od6?!H6;*NO\pqPRN_g]0Z":_bJ<CuG".&VXDs>oQ0j\Wbg*hL_N9$>kMW><CJC'u;K@,o),]_h=%b4j,+9m_!RgJUAncWF,):nR$33$WEGFcq31lUsZ$I/Aa_19k"7oIZ%3"T!Ra--]7g@K[N-8JsP*%6;`USFMu:Nb;8$h;rnaB5b?(%[P!Dp'Rp&W^1Z2X>,'P*+r-TDf@mqZ`h_q0XGUCXcWRU/QPX8E(G?;3FUJPjf;]ZdD>9P6l"L3]eVGS9&eUS4Dir+*/]=6a629Xr%Be'[Q"raEa9&idQ^^>;^%@U^dN4kTBi>56Dq)B)Bl'_,,mAWL_1=K,4i'>^kDEG2aPSD!ImpC3MK[bn:R)+uB@FN$q:BF=qGmL\9%?RgK&HQ6A;UrZ1&'05>6rBKRY^+TI,^:AN]Y'!s)5`Tj6>;\LN\]+G1I]e3W1/D"HYA3L_kohNcdP92V9"Xr/8WbC*d,,$F0[0BU%Dj!gG_I-R+.)mf:26T6D>@fUlb9FE,@n,/ZCsuj\070K2hArsuqt^nN^1._JcZF)!F[$84.n<Gin,^Wf@?G1UmLhu1S3aN8XsB?_%:/pdEheqe!LI1uYiP9"CHFCR^ZM%,`&-@;p%Dg))^?i[B*..@<pOH<H@k&U&"^R;[*f2,J85[fK0m@>aMuZ?R0i*/E-7f\36na3O%,IQ%1jB97CE$ZsJN5>#_3c`Q^^OK#$+%sVKm\1M]no'LS6n$[gQL>/Bc%**HYP7`VXZN0B,nelAV,Bdc2o_Xa(8&>#j/-Wq$CbmK%^!-I9,Mlp^Tspd(ekFf[);LO,ENI>5n&3XbhTM\/A+PF"5B`X]<gD$A)OI%!j`djN*A/Vmg+Vcl_Wt)E#&K=l+r9n8ZH*D.O/p@r%ZEfFV&GS9cIm%2(rlW9,XSn]+WEQmfP^eMo?AQ@o^#2M?r_qHm[^6Xs4;&tV9jtu9igF@"I0sBM[Rh*mh8"oTlP2M9Q`Xe/_pJG1%l(!QiV-\LPcBCe'>"Jqdk<u,<DoNd>`"`o:;BY$rHmbqqP%H!!0')q34])t)A+G=%[uJdAAjDinW=N)eA#3McTG"BW/U[]nD3$VI%H%)XaW,0l@22P)EV*)Ug;+?Ve9s9X[+<,1VFUN4snl@R,?J;W#et@mAofa=MXt<?nkDZd,[#,ua90QI-j;sqR(G2V^_">O!U>f\!%E)hUnA4aO-:>#,9<6^Z11u\uN<:Q<Q_>(']C!,&or)s^PN+>q`>Tp-0);3lbhDPO09GoAbCV$[Mq/e+d^'Sg@T!*V"oUXJ)l)H%X%-HEbBHP0K(1J-a&7Cp"7bUDWTM73E*M"MDMC!hhbMVj?;pGAJq,;1HE5F<FBRPPdA$O1GlA<p:Qf+ON7/rMG/:o\"78'>'`<K#QN%:\2XE^>OWbI'n%\'c*>-A)po[MW:&aHMgT/Nfm0+aJ&FcPMJ+HWCPl*Y2Ie2O(:r?6&IJ+52jg0TI^5<qYlMOIqI)3_Kp#EYk^Ro%@EaVT6XjJ7>t0<8/8]Fb59FfY"+<H1bi4:HZWGkIF@q#N%TV!ErjdZl(=t(?;mMAqc`HU&Yp/IX*A?@J.DQop.6D^YA/2a`oD;DI%r4MGXYmWhkWUI!A8rL5Q;:sG&/Lt6kC8>[hn`_Di>=<o6-0eYS)&u\K;YKKVVfJq/oI8$&!9cPk\<MasNr.j6:1)T`l'D-lV0U5"%+KS(]0/I6VTdc^fp5R4pFNUB+]r$/kd'EtpH+o9GIH$;Ei#9Q5rTr>Nq7D^9d$KG?Vte;aq%NW`2-sIm"M.'V?buTV(H>_-T-qT:%.Vm;@*&\o]Q$ZdEVIBMn."&\Y"a0K=[#>e#OaQX4#B&,04uc'YX#WK!D.UuCoJ[kX1:;C,:OZD3>_f4gKjCZokL'fO:O?_[A6jL7%ohn8,#eEr&&J[7%qJf=:TtN4P\_?PaX#P?3@<$'##m"p+U@F78$`!t"DMO0$Q(NI=oSF13aZ^d:?H0Dl44h/0[F>IC,@@X4Qmn%[%JrmT9r;1]M3?_q,!!JrWen657SK`OZGS%EZi4*!qm[%3@8E&s#8`un&"1aKe-@=OmICBoTVB*b9n0+9FdZ>_[4PmN4o\'jG`gA>P%kc:DAdnV@_?8qoJ;_*[-:)qZV0pEi4G=]1a#ho*J<I*&oW%e+t5gA^/pI<nO3-Um,$_b?R+,[`*3B;omdhe>2@s/HVZGY]NXuW+H%"Ujg1md^s/"M.$o.3A`/+HDp`=agq`)o]=KF&6eRIGK6"j6rloIrH8%jVB2O2W)@M.=u6%QT5<jRip<?5kdK[r"PE,A.mQT!,*PC%I>V3\*lM%LHhr7'6L46SIEM?ReV"u0/*l*g'SNE%;CqS*XP[j"^=>@p?E+JZoH7?FY3EfJcBg`:+]lL.q%P\>]8([5;Q^7oZ&ZtN%Yb3)`dLs&-A'/_m;Gc:4!>e'a0V-SCYPU1qdiO=3CZG6?&o4ra\(F"Ob&&1q(G<^<c*>O]ST%.E&nnk?)81oTPVrF-o2RLQILhUl%,.2-G;kmVApEF=neO^003u=c0l^mIp+X:a1qccDmR\XLoASX%%FLe24V:r&7Hobk/%aKAMMjK2\T3gHV]^^!,6%fc&mXl3*iN3+A%+B3TgbBYLQVD93[f#=#C6P?jX2e<NG2Hq5_#ND\cpfn'4(l0#MM9qh>:U2?^622qf&OjM/Z;@nr*iunQM11R.GSK-SH'$6cM)EL3%\Z!P>2oh#0YB_>)KN1+$mC>ot#pHI%CIX>\B^4""Hf"k7cg@fX@-u*AOt4MN,H\OPDY)W/d?ARL=!aiO7J<M$=-_Y*@pZXYna6a]%Otegd#\@kYRSR@dH6M4:n/$G:-BfepT`>N+6@jTam7Hj"]6f>EQ<maDbb,-DEOoK-/\Qo3j!Io)f>r.d,_q\1[eX'pK73H2GXcB6%e>CIL,*^RJ`b%c5k+8a5HiT'7D$hGH1)YSr)q)7M0b/:DD%b>RJE`d;A>U14HK]b=:12`TNMge^@n9ULEoKHXlhf"V:T>gl6*ocD%Vb#&s5]6-eHm2&uT\-PbI6*&%3K#l-.I<MG@/QU9%Wk8[J^k_rbb#MLV%Y1f+%Jk^T\Vm-@*.pZDYNb,5A9EY=<:[3cVQq?ff+93%K.<S5PCT*6+ReRTEG`0NaG-W&8LN8FJjj(9_Qdoo54Gm;q6^B&+6HF8%sM`$b<#]N]=.Zd.@";6@qYprETLac,#<P"HKF;scs]%?%D=k(Lke8/1&=e_g3n-gT22l?5963_0I<oj_P)lk.elNc&M0Cs8,$p+g*6dHB.<Sro]Z:07s1-1QP]1m[ZMXFH$@.BXkH=66BfdBR%h2a_YXudU;5Vucnf'+o#/DDO)RZU2ip*3hJS7V=cgC)[")C'4g'?S("WO&qcC5S:t?.*&=lQgTDI+CS$WL*PXXLik]nP5Z#j3o1N%=742_RGot*\UILTKb7+@+)fJ,g.H=1hj7K=meq.@QH;H:%U^#Mej/8kgWUB78A]CX+CEWj`(/P4h+qOI]mK5??;1QG&>s=p>iMR(%TQe/!lpMfZ9)YlYT8M04`@YOEWWd<nmg`G.*l>XF\^>9N!uY@WVu(@WgaoFkZ&Y(`&[S6s#C_FtKlMj5TTf4Q*JF<4^4&,-FoE$t%'u2IC3F-C2h>B%e`D#(]o>0)OR9T,)@**b9QNCErOqk/YKm2Fal]98AR&9i)d[IhbZRYel-^E+-\2fi33]_$VQ@T2"%e_pns(Nj4%oW#6"dXrF\k3YTLDc:Y6(Ou=*HTCP\Kt:lejFPD&KdMd\'kd4iH.#`4WSd$lCQ`u1TN;&ZD)/)!Rn,^Zeb8p<9mdEa*L*-Es)a@:%Oh6HV"s<CAgoc7HpT4_Baki)s:=[qP;?6bK7YH''_XQLJC%e]j1a:"Y$UdMoLqPAC1U]mAd?o)aI8#SLKQLgFqM9]!SQ8D#aLLjO%oqo?'L%Qu%cp"0EN;T@#n9*;VJfm/E;eKsSO/[>U`3KVeLUr/lL.ImRR.-\;Pb;AZ59OJCeEQ;`")K&hn0:"@J)XDKmN*.e__NDi%\2]"^':N@eg\-bKMf`!'V6d)V/aSiJZgE(BeSl^q@O1s>S:*M(^Wf9$J-79=D^1Z_+pU2;mp2U%l:Bq2%n8aeHn>Ogs2f74I0/f5%5*?UR+(oJTQS`WEc:BocF,W,9GL0!er/I?F,@S=?$BERC]F+XpAZlQ,\VAhB)FIoTqqEM<\SRiOK4rXC.fTJrrtn/"\DrNqbbd*U%d@hM3EumD2[<S#b8p+kt=PgbU*(s8U8=Ain9L\OkQ7dU,!?ETRZ-Idm-IGrTB,8YV:U*o\k)NBo'mAK3AU@=d.^FRT^p8[b8%coI%i'8&2)L`BIr-4\_T@NXh1J:"<+p1,YS850jPM%aYe*j&W!3cW]mPCQ)k$%#I`+:=W0:<"3nRHppq"K.-a?"uW<q78Dph5fBIb61;%_g.[<DRS]\J.qWS+SXj!RBm'++"n[,%LVGKHl1ms4n0)q=&EMfKNr\LF:lM<h029"H;\sbL<0M_-BEl?Q;km&JgQ@h[e&@<qs--E%.VRJ;P$kW8:H%#e"g@.u,ZAQhOVSTtFZZWsU<`J[53_*p?6fHal`8b,F\@%]<Po\9*pH,-?)5)aM*4VMM6%bRj=kj=U&'0hasYrE%!&.[i-8@B<$Eui0AJ#Cb_Q`0Es6@f6S/JX>mDQ"&/[7MM,%K'nc;F^V^U>PT9t-DZCPK60aTdjLgXkX4,_HB<A2UGoVLa&i%Tq(s%de4!7!\'ip]Db]\4aE$4#ON2.ATpWohF`c6"`NK,6IhL[<H:`nJ>DuC`mQVqQONA*(Jn%@PB_Ad^TBt/C$F[&fbIDMkURn?-:1_I%o"^H<d3Eb9OgZ/ohL_#3:Y/eUA76Gg4[_5jeX/t&%8Aql>%)Phl*PZpQFF-.l?FID5/sln],#$7o#PiRiiot31ShHW;'/E+qCfrM%9BHJ<l-SADCMNMunkZ"Bl!li41b^s?"QGf=]ctBq4UO`=,Rg>!@YrX#E&u=<+2A/68IXh8WKNQ;?XM7L'p+id/Q<b`R7sh`EbAE]%<G('la/@^>l25^%o&nLV54LB_n'\qo"R1E-7qt%D6LLXu5,;0tYi6Um>:oJbVjDk4EYrr&]'+ND_k]N5J)Q4UlUjLn&l]['"[fb#%&\RH'"uca8e<C1nS=Q19@c-6f?qGW9m'Ee'5$Fi=\G6hmaEt;S7HNnU'iJ;JA".DuS_sC5bADZ,rTs'4J$^5mY_MVd4CLABM%G_>%./#-u.n`@s6HM]9C3J)NcUJuoP"&ZZ+u..-bd4]-q,=p\Rh[X88SJQF*8OZO$otBOAZFSu>$^4&0O%a9#5iM5GFRlQY@7n4DVX88%g+1RqZ>me-L<l:&=4qTJhHr@nSSO"u8%*1H%"`t`1,N`DGQsS"O6MpOJ.mcn<c&#mG\p%$MeFN*^\!$tdm\nHWSh_LXo$=hJR.,J%ktX1<B[X3=.h4^/>L'k2@&_iX1%GSu:[-TI9SK)p_F0h%RDo%s8@/W36QR0^#SsAiBb:o#q#a\fT#LA90n*J_krNGJ&"R<@;=His%R)Ke;('_)*8L*n`3P?:'Eh=kJLs2/2*1j@7$P5,IT/*7+cB+fhgVJ08'Js-cB4<Ci_QP>bOG^)\m^R:(._lIo3lIj\#$"/(Se6N9%?,`bRMp1&DNV$OoNTa!%-g[\/nja3Z6,m4.!UUknWXe<0!4\iYocoU'CmCCn?Tu=Tg-)AW!hi:_Un+7\iOIl#'r:mLU7pV(j"8%U%&N5'^4[iIV>dlLp;>@Cj\-=)VN(L;j_NjK!I!g(3AD<NM"slPhD?h\T/`\4A-(a@sp,'E&<QNOHU6e/%h%jqjI^*T6f]M6Y4^*p2%/G'21DW>C('IQK9;O2-IFh?=^n#p!:C0d\AED5$<VBHos;mlg5UIFTLB4^epGh9d,%mP:.*t?saH[1=fCP!'?B_%X;<*Sld:MV!k%7.-A"l6+tX0XMhS.=>sXZ2?.g,FiRdD)Fbn/->CF?IXIrar!j<L8ijDHeQifHe*7=3G^;,p:F3\gUC%3A/4C[U$?LS;*#4ihf[L>%5--CBhsOM=LRWm22L=?&dQM62RGEpn>`N_'jWE6/,e`#].Flh#51e#8\YO*5=lQAEX`5KLYf?*BFP';5/t#hJSgn=)f!h]BdXbI8%<:JE^C9qjnUA_?]85<'?):M=s2Rc\mGSYjj]1>;%;ZJC7Pg?,c5oOVa/ajm\6mHU=l$VO7P$YsbPX"l=\:$PPmqMJbYG)&k\6asu%&[<JUKD:W%r;ZNb[QBg+l$;+toJuOc!@,Lj=Ce[o[!sNA3tSV*#E\=t!!C)_4HUAg-"/W*U9i1WY59ZNGOJ!4FXr7W_m?B[f?6V6%a7F;#YbWuAeM*Cn7Apa2FJhO@1;G1eGjpPA*PHMu&7/au@"A,[#.'@nIDWJ6]XP/e&nMYPO6Z</lWuEeFkqg*ed*mj&5ENi_3Wn"%mjQ!GH*#3GW`-U4l+9F"+J<t(cs_6*o\L)#%"--hNPcWt"N,Be3/?teRSFpuWau'ed\@Ej!TUn0,mkiRQXE4&KT#J=it!Rn*eCJ\%CBcPe7f_jdR!Ki)L]6eg3GX2\Sbgi5j`Ht8S$KX-9(a4bN/+S>:O(&3XG)NM"(FpVM;UNKS+P1&GgmfC6I[#l"tMW%X(Xq:bqE.L%L[_j)@_E%?YI/q/`;6c64%W%\8('on_@JHQ>?L+?V_Igf77;7\\1@7Z3u0sWSNu@\UFeppmH5k"A&$Z4N[8H5SAJ[@2tt(Yns]jD%DWL\aHn9K3QV;2(>ON+t8A_^<-,0uL%l4!3Zj#,s$d.E7;mADe.*nYdYrj]9rE)UK<O$J:k3s*t[7KKkKg\DpX?G7_'JP5@`=>Ai%Y+08K0l%ju0PB'@"bF/I\IB`A(3KtQgOUi$<ad\L4jGDTTC7c9LK/dUVXC.L0i8nQgqeuBX7,uF]uU_!#r5h\g$Q4*VkqrVX\)+7%LAt\Yb6W-+T]$>Y/r46$N9uLJq=Vt21+tlWcNQG'r@aW$]rZ@kS\_"0lt]MlC,&1*UF40ULPWd[PklgF8GR-lH8gag^ps3b_+-L1%&OU9Q"pA[0`lAL%7A.<WR(X>/O+[duU]m:BY5n4:Tse`i/"OeCm_?K;qnccXgD^TL,\(:!"oR,X-u2ZHMmboU*L#eP6`JuDM.@hP%<$ilj>%bGk%\i=PD?Bf'(4?QdNMGGl'XepbQ97<PYNpg)IX;H:Ti<oY5`QH\]2kr<l^Jb"JTS[lKGt;orbS2@Yr6B0JH<6A%a?MK%a`!3uDVTCd+<!@-OhSjKGPpR`E5il/g@ME.YE$/;3(AA_L^0.h.Je?$cXjk6&%DMQQl5p6>0Y7Ukf%uf3Sl.5Oi>BL]Imc[H>#h`%92nW4fWmXWOG32,0e-]LT$^E0d#PcNZ2[[_I7>\P;0`-HG=771_=0T[hH$6(4SJKO7=P<Tl$(uqULor$(%3WPNUpEij<L_MW#mXd%%C:.5V$@#K0o%"Yg?s88o6cc15k>W3GdreUPeEG^b$lJ-*s=7E`^@fPN7?<EV*_u$D6&8QY2b+f>=!Sf_Eh.Q'LuYlpUf6o]l6cO%D^L?.R,_AFAPMhtbYuJC=4U52*X&)17Q&PK_PX$Ld7UOl9rM",>E7Y'Usmk6*CVQe8'@$i52(Fglh[@c`!XU;n4>o)[j@dQnXOMR%DViN7NO2&!fHF;)c<:=XXh9o))Mr_8UZ'@4X)60A.HmZ5K1@!o_D^W,[X$&r500t25Bg>oTr\>m.iPRoHA1g8$,l3S+nqC/:b`I:%+\sj^FeB)MD;HiV<TIO2drB]q&@!Ri[E#S:naa1t\_/9A)>.q(%f2.#jj2iZY@$nZTDXI?J+OP,nu'8&_nZ&Khu;T<roUD6oD?<&%r%Ao`:]L-ds6s\$lLVdcr2[U2bocr>rL-W6r:s]KrmdY?=kir8p$pYKrUK'#qYK.Jr$R!ff73SnX$?WFs79Uqq1&:dhu<'$s8CjS%0)tPs?iTTD5PZCa\Lf-\9\/MEJ,R;7'6l14SS]],FSCUMW+T%s,XBeg?Ba=?b6W6m8nduK!MWT@0>11A81T(odSQ0m?IuIL9>Hh(%51;.L-!@9sK.1;kJueA!Fk&s5#9OGt6Rr[_2cend3X<T7p&c>\2ua^Wom<+XP:Q\*M)Q#]T.W6=N]B+Y;fIC/=cY;qUjPGSr^HV0%:.\h;>M"QhZo"[.,lr!LaETG+-@$!ABgG_Q"Il/TWX,DT5@t6`&ui-IG"f7S?N4X5#kZ,PJkc;%e5hj:TenPWj"$VJ"5J=l[2:ML%eK\/?]T*Wr"[#Ja32r/Rp1M*iPs+4?5122a.OKRF6SdW=rPLn8j0(J0ZSsVm&[]IZ%,>#3QfY8'P,OAuO94dEhF4:Y3g7)q@k*@M%hpj@YhA,(YGYlZ.chKRhZG(3@"n#;Uj+uq$f.#E_kMpC8^q"9-H3uHgD--'SU^lp)p/We()dgfVSI87G(OpjfbaS1F7rlZBj*>>8%G.OGG#s_%/hXq]7IE1,O.YEZ4+DDbcMNNb3ASO__kIg(LFRoVI4B8_!Y<qBJq7_mq=a_`k@IF#=/B7GR_<3@*XZc)WLGMGJC<@us%j34\YjV6i'WqL5J28,elB@TD.#hb7l3`RRd2O44D'oa=`?TQNUjk;2(:P#OKK*H+Q`qL`CKPK,!gG\Y6_@ZQ%_Be1KOGeUbOeNB[%BjFUCHd*#PY[._4[5M[_=,jS(.s_'E*#6ZEWkU^+=HPGEp_83Sitm!uLn(I5X6P2H@5PR<86*bc"3U2gN2#[6o+ZFDY1I2b]*'iX%%9Cj&eUFu%cbM&hNGPi_l3<JDs#)rV2o"`45@G:$?Sh>\MH>/#UYR^O@4G<)VTSnL#d]@<=thQkRXe;\am.Ln,jN:8V<ZNTp:u?H%McnhV3c.ap]2F(E1C0-QR3QL[Y?Q9XFHk;I;*$msj_+g+Z/P@&8Hl$m,3NI<iQEUCX_WSH1_/\::)+4#?nJX7T5tcdC@IPi(L72H%=7O>`j9V"E(!6"'HL(W<PeuWA`p'Bn]<@j4XoT.Bg).a1eqaq>:nr>BF!bsiSM5!N"["X+.;liS.rsC/!ThtI/f?D,[)0<jM\0:'%HS8VI'AE;-\cK"F`57SRn>R9_09%*67$LVK[)-CTHT-A"rUtj[?ol<l-OB$\&_ZWE`h[`BI)uYt%1GN.hW\\mhJCbT5j%"qBr'6?%o56ogFrFqM(h7FfmjSP)&0%u*D$E8,cAG)^@g>ar,o((W#/IIIBL_5hS9mQZ$NHT3&&]]$FBan3$a.<0TWMht3&CSJU\$&bo]s.4%_MP%@NUIiQ0AR4Z<[`r>]9jh2`W0,1[_[;g%-ru08=GN-'2kmC#-he]BB\KU[CNIQH&93qU'fd-77=jV-ZqL%QAj@V_mCX,NEJ')%hjQho@rcUof8s*/#]E\RWs)TMacihq*YI!0d'0\-_SC`%(j%%:kc:h-5(XG_?ZOdPSR"^>2@upub<<DN=!`X_S_oUc$hU!YWD[F5%Dslr5NHC0o>Y#?p>7mPkd1MNBF_+oepQ09DcC"h#L;8&p/#V%P]e$l-eHfb0[77$K7P)H=X3Z[nBr1?s5aG_<Gn=kgKG7^Ek;01r%@2XVsgKc)Q3\C.[nDQRg[::G=&$oE+/Bd?]3?K312lBb&In`k=(?D^GNQ\L"9#Acp>r%K:,LEEgapBX2fa//Y'N'Nk&o/?&qWjFK%pUq/8-X@'o?e_rRN99epV]kH+r8h+TCZYe3n5G5q>#b&D5m;+LHtJ2Hn$GR[+,Ug>hLjJ_,ZS"_o_<$p)+^51N6m&uZ`Ed7)2+/e%ck3s.Q4js=dI&SP^>8ZLnF(_rl;Vd6T?([OQMa0$ntkCm:((]9F_(Rj^QK9:a6i-qL)U%XgFuiBF88)9WsP>lr3WND%8rGN//LZ'%=A"]:Y1fX25TR3]8/CkgV'5+QneRBiWp_`r_[`C\Rh=0,Gb=02;?D9)4@9+(i;[)e,0Ac7=eH96P@p4BkJUuCo;]-,,1n'U)jtgD%!Rs`P5"#N2?+Mo7",u7X&HT\b-?ObJea[:W]oHRj;YV_c:AVsBf:t\+qLUU-ecK$V+YP@GK?>T]Haf!kPOilb3F@u(`k!:40QQa7%%P>Yi#b^M-a]R`(?])MH;1#q;/("hd/X>e*$,20aX0=/<)3skLU/mUjJB#!CDERAD\VNEg=3+/?.""'nZIGQJl1+"m]e'iID.'C!%2*p-+cUICkH>!hPObQbP.]"1pLm@8H#_eM68F_l-*e*:6J*>e98BP<RU^#M;Dj*67T"XnVok<>uY70dm#i%TI=L*f/=]oGD!jfO<%b801RVqEl^4i*g@!BkWQKFpKg3?<L2k%`J1FDuR+4f_CUYMXg?2F'L%M5$jZ&1H'RmI\bC-i9n62,DB'leY:(P3;-@NSg>qKu^-\%+PlCjoKQ/(#J<c?A!D$O+1@t";?bV24Up%t-NVnq<W`j6J9nq#q^)@c3(qi-OARtMKg:bEPN01C6kQaWTn]iXcUZh?o9dF-K-d$=%7T&klE=h-"Qq`2P%07,n:D,Wh"*+i<l"V'eZ5>HWC\6X>l=E@*CnU1BhO%jaI?a6dcL60V,Qb,g8gPVfL!$FO]t6Ynmp&AFhc"9c%dnVs"gKm+F,Y%LVW/F=*$')^d+\d&QrkSQK7sa)>%7-OSaTCW-ap\E6cs!M"<lor(-W"K"Hf.H_R"0OK:%KW7_(0.CgW$q2)mP5H%g9mp'NiWN%lOq][klS:;>n@]f>Inp[%.Z8p"Y.f#VCmGAcY4bfK8L(jdOn7te(!s]`8-9i?#6+GOrs@&3""!`[X=>]&EhsTj,t>0%I25\pHc0CFV0su#D44\81ke(1fefi5%n!l_d5>?qU$rU4q>UsS`mlK2K6V4o6[a;2e"/a9);rqc'0a(JC#,DpIZb<Sj<QpEGY'#<%I$+$j;ikm),=B/[jjBilCL&FCjsZ3LIfco..RdVDk>NOsfb@kDB.\+KMo1H4HkHp1-OhQ`3]0/-^&5i=X[p.Z[oiKp/@?6nR=X0P%Rt%1OVbS%ro9`*8GUd?2p'e!k#$Z04WFmlKKd@iZ\%K=i=car!:Phjr6s,5aa`ukAB:s?5<LKqnBoE+G<;t1u9?4cOiR,K:0'FNp%PfYn9-[u6aODr&oUmt>/jLggCoE=;BBt6M_jcH3O+srn0$HNph*39\O'O^"cA#7o-R(ePjP5Jsa[^b?PH>-bJ62H0$NZfVRq,#>u%0RqO#&DeO(fjK1g_9:>%Jr3V[frp6ML3UuUoasefJu-6GT5&:^;S&d3ae%B\\u/-<*O)P_?V4D'>UuK(QIKqASfb<e!%S]$;"E>#%Ymc50E%K`o=V`/:3A'@9f7DW7=A'Q!4mfZ)m+)0U&BmdPJj5<GA;d?@kB<^33iso%oT0V86rHgs^/Z\mP_>XO+s"p&XipEYV.)^S%(ug2-0lTpkjIZPVREEie8Iih>WX,H49>W'bH<t/#'PPd+onm$@E!:1\dPRQb'UM-78_]_9V%d9EJOU)ib)<np"%=J2A#)8!jW+r<%8PIVbHUt"nS/c/u5)J]T[?KTApiJYiL^>Q1m>2L["R6]se>[uXXhY_d?__AA3f.M@3-.lhVf'c_N_C9Y`3UN];cec**@j$J8ep^U%YH.:UjVJ".Rkm2Idr'>b$RNEfpcQ.7X/))@:!hJLCbU$$2GIa,;Ej(H&5UtFWMJ;o\Q<>D:[QE5.>@o^(c\W3]2\'c#0")&pX3d`%eKKipN;2`rP.1-RIO<In<7e0_82mIGIXitK`D\,D.+66sajQMOs5kEW9mU[+m0DB;b,GoZ"Gi0&Z7e8(+?2]@<>n&Ks!,cfV#r=A%&QcK91)?Dt%G$?V*]9Eer]:gY:gQZ^5\IN_n3$2#;`(<a&N1R9JPn"[Y7#HCEZJeqZe4WB:euH*[Qg%-r1.s&2:80CAgN>0HW[k0%]1\I9g\?:.1I.bUGjY2gY,$:iD+:QSqDA8oVQOsh4fgBZe9<oL7L,i+#n]'7%QIJ[f;QG=e0;YN/lE>DrUN,:;9ueI2uBHL-`&+`%pNmkSB2jA>RC'RdO/2E5\39h\Vli:3<;8lV/iPcp6CB3l4\!"DUJU8Sf+k8h_E=>VKL^e3=I<$^=>g0pe>G9,UT,XX4Y?UC(MVFO%f1"Y6&rb*+#d++b&s'6[OU5D11d%AgY9gE)7S+1D,'"q9g)TI;"4!l)Nn(?Pj2rXSZlQo3fNN?HZ0dm5J0:JbPZ]1sY1pfLp7?;f%Ae/PCL_L,7N2:u2U8>M"ggjI/L=30W10nCO?`le?J:HMJhqO2DIqf-^4Bd[XR_F4f+r.KE><ZPS6(eY;Q&%To<)#\=BL]gZ8Ej6:%>qs57eXb=Vd3\?$=?Rm6G:XI8n>jIMp4u>n:[:mg8LLYm0_/H_ab*9KDHT#3G>?O\JqR_**8.)nHb\0L!oHeoCk0A/#[n+q!BNHp%2%o9)F;sZ+mn[qX>fAVN+A6teHp`-POp^DibYloa60p<lOu7%ehaLtIAj>QhT(rd<aLrY;J_lq1?Qap@>a(Aa7udlBZ*7ku2"n\E%XS(2BG9eX*=1#i]-D3seQU9.@b;7+$&52meru88^<r=&V9HF9\QBP'Ld?tk;X&:[B@2=VL@9H!P$t<h_$a=ZtNu"'Wogp;l[N*+K%kS]%5,G0>F0i4"s%L&j(4;W8ri0'L+rPRY(2,lS2megU]F@EG%kXIRthj4fP6N3:%bGk@sq)"o!ZXhq\%=HXr9IAcTgJQ:75\5+6%X3OC'qu#..h"DGZSn/[:J:`WRLZ&gqP?K/)YL'=12+dl6$qgKA[k%0Mn(8r3+58)b+im`n-?VDaROU^HO%R"7))bih7C5\;C_kp`%ZVP7/pZ9;:;:=3M#p$F%5<B+o$JE^0\)fB*LjRHLM,W-i?f0P&N5-TD=H[oH+P!DeeZVkV<=<S@.qqWoCfeb6dPh!H?e^qBbZ.^)%R)MmS4Z2'.@Q8j-@'CYc`:*TW.$&sj$)oqjDa_W_*s!RUb<n2&:"qBh`kGeKPZK/k&^'P1hZa5L9LVc[J`h407d[H1H@L`T3jA``%DMXsGb?ASJl4cP6Ajd;C<m_3YSa-pH8U.H)cI,\15B/(@,^!uShs@=CaHGNDZI$W4-;DJ,fgqVIp6V@6EEC?ILo??>cWjIrk0KF%%7?O,dN>+l#Obfp8:.ekuG9$[mfb!k]*@#Vpqenu(6cmt*+k]DBcK!`"ZW5pZGs0oAl4DAQ@=F-SW9@th&U9'4biW]22D>GSX\_]U%MD(E]Xm@C\;.ajbHAJLu0TnD'=2&cEh8l0(,E_>$lL(AihOd,i"Ee7h4lPa=mQS;0$B2$X`-"RRr[M\]pA4"e'nHb5LsnEU*gsOS%ZoLQC1hYY#PZFj.65?ndi>DEt]O>C=SkjdH@=1j%F8oVtZ]tb?:I93FYE%9j8Q\5ur>p5I\5!ErWoqTLrA^&B%.;4hMYMW7]UQT'%IHdl(Gu&R%d^Pl7Ai@_'ghF<NDDNP<?)hJs4S^=(U-.nTNma[/,-m2`oL3X_j<L<ImaC5?LLG(@7/bl.9re/@!jj4bMdPPB</?nS%YM'Z@72HX=b52N%^#ng\W.:ZhZ^AG%#:QpLB5*<2AXp#nUJT4-OXq&.Zs&>oZkb[(K!HAb7dJ9jpJ#^+KE.;iCVa:R-$XmQrYL_(%4o&;j;YOuXrO+Dk,L1WTa+0c6j)=&VHP/YrjkDLkG^"RB`Z9pT[e+;0D%bSKSZj7=$eoH_/ARQBU+J*t>8k9$*Ru!u8d_1fmf"+"%Xk<?UpQ$E-P65>AlK6N9\pO!$o<*.K+kCdpg_+[I3M97>m2Gb[Km+M$[dX9[V9KH5OluN4;_pYldjAta[OWeqR`AEkh3:"u?4jcY%&'CGinNn';fhdq>bs+\a0=7Rl<7Qc9Y03_"4mshs7WK?e21]F><VT7!VPe[O6mU02]C780i6Ib=^36OD.]@ppE=#.(oUbU3kPb#Z%NMVe57)GH5Kkke[`d#6.kKgnDKLat:Bm]/@q)4Hj$DZ)DfY5i\lT-N,q^R/eJSqO3EuoNS@0058gQF47e`g4I9,f"h^b!F(JWoY"%J+,CSY[pJ7'uX#@^lZsN+%f'MdA=Ith6lH`?LR/L*b[@?:'u#iGjf:moU8*0`[st4Kst'iKHh>Lf)o;*kXkXJ?=S;!4R^!%Ci/uI%q?FSm[;u)emAWNGhYmc-8^fP4cRRUVatR9<0_p3&6<=a:VGsUd+ub`rXkj'[=TN4*]4]&$YAIuS;eZ::FY-Me2,hBkG0,-X3rR)b%a2MME[7IZ;amX!;qosS3M^@ek3;oF]FI:C=/=q2PjtjWpE[]KAmca-8*FY\S]goe-%'1mZcRl/91SKQ5%7[XgBmX@[Hn=eaYeOg]%T1]uA94uj/[jU#\7+E)VNjFdIdHhlnkjWh^GS1D8WrP5i1g7a\ZRkJH#O<d4DH50.f2i/q"d?cCS^4mWQAb2Qs30Y)K%Q"p9?8Eo%/s9nZR#c7jh=hGV].qa<Io]W'$f>h96_0@@?.P?r_*r@J_O"^4@t#k:YNY'<;\bO+4a=>pfBm9VKW;P[%QY6\l:P-Xbf7G\XPFMV%[m2i_7Nu`:o,9`Cic8n;nGS50JRn_aB<R07@&F7HD<gHnB#*3=g[)8:#e*jbg[ZjWs*<.94,eL!N[)i\'l7Fs/16!pC=r![CPe+E%<Q$p+p[URHSo?,>>7km'mc(^\[o*WR$319s;/-0EB$M?KkPNdBR[p=bp[A-*XY+^\b)4T8[9E-$a(M4]e.2^Lb6l[qSkj5#%-q,A%4%@r_<j.b?fFg&5L`L]Lm#fOU5%"^X%:74id1"G)V[KU]27*6Rd]C^u'1:;Q/$/t;S?^(9,Q,#&C6a2>AVD5'b4^TT#%*5+q:q)h%J,kGLrUT-tj87OXr<MYdc^%`cIQH98E5"@[Li;M<F%65F:]''?EH=,HR1t\:F(r'ss$m?p+T3i/n0$?/P2m/YcD53]eT7RH0:7/L%6IaWBKhe"9-NJGa+WT!4pQXOf5WA,Z(W$qX\)5KcN96pHId[QVr@$Le'").!YatNd$4-]-8Iu1Qa-O>JO#k2eN,iZZhnYXT#IeF1%NY)G*1.U@07cc53YM(QO(W@GMkpqX>(0W5G#(i_,\p:[bjHK0%nIk$G\Kr@-+af\q0aW8WbZn3.EuAb7oJ=%u/<,9u<n<7b1lJ3@%6A^BMbUGTrpmEo-**ErMI-t)jJ6C^2-shP5i&>AsXn<abbT&G:?'%it89e,qS[!&2f`6`6r%ai1+_c3K\t:]O<"qI-A$N0=dB>X<%KW1WNU$&OWUg6TE#.QJiRE?T*f]9WkI>QdlIcqbQk1YJV3]o21L+4oj0O;+r6_Mi9?)-q0VXhQPC-`5/>_.G/:]r>%_liZ0Inj"A%i=X%poW1>ChBJgAVF@rQ*@UPRgc3AT:!p^YcG+gO?*`,7,aJ;D6iWU1UTNE)T6&k\Rk%.Q%G5m4-uH"b`[%<j@B4_B6!B2o+l]2F%ru?1<IsVYnqlKc"73-$_)6k3,&1U]\.g3Z)SJ?7S@.o>8E;,O^#mH#1[fs;[pL>Cbh%%3q_;Df.ra<i.9fbgED<BLNqC,>?+:$DX%AOk;)$g:<c3"U,7R1FD5"#ejLSX/X,JN.V0P/#="B&p?b11E!a.\ULW!1>"QQVMdjB;Bh]59!JjR![Q5D,HVTeRr*R7^u)Ja1s:+%]>mIWr%/\?bjY!7r[.F1!@n_'Q2E:pC=-P](I6dWeZ`7eJSl8rV59/5"M>X5,,=/Xks8_5KpHSm7[dgaH>99XbsCBKk)84&8Wi/j%;QIB,,\4I0o179fEXUiq;Y=3gW9_(5b`?BNL8;UjjVa9Wf"jgqAq]0]B@OJK&qD^?pJ,n5.2.H5\nDA9*N:$(e/i2&].4d`<9>Bh%,0NFT!K9U7<OU><#%'9sdH`E]+PM/4eNnnUV7)0DB=.qG)^?8ak9aaIbnc?YDj"2J(O6XHmg*!oD':`i"6l5o=9jjViTZH&pE&:+%T0L),'?e]28:9GRngjM,;S52Pe;T=.Ub\SV1K:D[%A,BSfN!lEePQ;O+XV3qM[mHgNsga:86+%hKMMaYTFWR]".cIj?>(k$3.,J$%/],)"[3k55=N5#=>NXh*#PT;l'VF>Wn3i6U^.P/__'@,7OH:?SXBcd/HPeXR-74=IX`ShYMPs2u@lr4fIAW&9,'&_Gp>B`B,Do<A%FKWVhP%BEsX<Yo.08V(j;YL)&8-O<`k;:X^35SR4YQ<mn4X`.,>Dsu'&SA3lk[D#S9WqM0HWY=JJ48L)S$K(g6@t+s4,m`\ht1YJ%.LoPc$_W`''\OX52Pai.&;0sH=o^/j>ki;>PJSok4;%PN1MM0m;G7sC)j&`%E4lDY<n<J2H-)@c#poqP!&nI?WN"[4&pOXMGWl1K%nQ;/=pNp<K>lO\Xa*TM6nD3OrqGW:J_amL59_6H&p2XrVBRiZt`(f=nLXN5'`JENlH$:%;VQ)G!(h/%WdX'L'm?\LX3u5a0K>h%;%$CXf.3^"'gq5R!Vi$VtiY>e9S$S;`IpiU4D8Glb*h_M/s4&jk/a7??#^3,N>p:_:WT.&aZ*i!_X)DZku3&&ES@X[Y]&C2pB(V@_'%J;^@fp9Haa#=-0^DXTa=8OaC(#rOUdS\8!_i6OHZq,AK]&=eTn62u/T8lPhKD$/D-+;LquE\Tf`OAiFE*pf_L1rRO^VIC+bN9=Xl%&b>.3nj,9r7cIQIRQ^Yg1Q>F<G&_EV_qYuDZM=W,ku7^q'a2ep#sMZD9jlj_+@n^'CUcLg4(s@)\<nihf1!I['b_\Z?6]?%Pj)\D%P;"O59h#FtH\lfdmCBE.aq[h4\eud_o@-,P4?ibT1QYRbbj1)@f4F)Y/3uPlIE=>Uj=>BAGhl9+)Dmkk/Qe&c[0"@d^qG4OQp.h+%J;"90f17S>dL3SQke`9jl:aQ1=3j9j7l``ojKIC7N"$=u<Xg'G@GEUL],;)`Z),9r#$b%moE.u=q;d;QK<S7s&!iL'B?h*:/&ck-%-F0iqX$CCcm,::E+kA(*7o.D&f"VLI1%,r_"eGqq5_7:IIV,%5:WcGHGK$q^DO@`1h3sT,?<5_72q!pe1YC8=rDGta0?'#7'&I!F%Eg<QtX<[_9ZDDRO9`FL$;LI'GQV['WaGRpF;GTXE;$/tcZ\9SQMJD)CQE3J-/+_>5"P+q#9j;:]QGe;^Z&L$)`uMKVr=)+WlT:Hh%W6UK?.L,BKI_Zl1&F%!BnOo!/Ba6odB.8nq^mJ&0rYZ;-c?4>Q[YH_K('n@!??ZrbY&F$pml:Z&YWG)T9od+fp&=VG^,hQh"]0+E%J<1OER"/?N<YUG#g6C=?LND:ip5J@j,+k;V.7]]qCM&mALrB[eY(_ras8C+*iio5FU8:F5PA)[=X>qN[<_^KDb%SXf#+.3d;NEe@%<'Y,)2>T<abR%/KgPhY;8rA=W[acnWgN^k-Z[k9Hi4@pq_;o1&d)=q%h9LY'Kr\J92AU^p`-(^^RbmC$mCTuGMd&dnVTC3m/1eIL%V9n^Oj!N*6?!6(ZXQr=uX;]Y_[(ietL=f-qbgkDLU?>A*1``^m=M9B[jP>ZS*I<a:\dmGZojKUAhfkad]0H'#?t&E`_rei?*\bOj%@X+W#iec91dEh,=;*3B7Rnd-#S@QV$4/BKh]'=[?Vn#G8%`o4[geR-)^M[le3N*1]H"c:#CEY\F`t.inmT*#rkidIf#Ym]!4*YBF%1/*&d_u.3F([c"_qI(;67l:%V>qOs=7)qNpg)Q2S/%sD1a'H]*r!4(l(H>(Q];m[m\e>!@joR*[Z)gtu,XEXkFjjsUB`K/OT1i7i%J;I00;G,5FP8%^a,rtWoPj_U;!c>Im:co4DiL$rZP]WXb3W<u'otlt&42TLY/+$m6'aE)f^LN*N_&ccB,Dh<iSD/\$g8_jkDd*9&%*HUa"#\MjO)KY(S4CbhX`kn:(lNssga\3P>8<rPXNpJ@r*k3d?m0*f.0`jP8]QbK&W81ERQ1-.jA1u@.V$A,1BK=6njq&'6QN[oo%,eEhL$^+e:`q>2]Ee4DU#c.L&=d6X/*.X>Rg6D_?=!VikJ+(tUjt'g8[S4<YWl4H?QQd=lJf]P]$lg4Tq(;mZZsfaH<48HoUYI`c%EA&h`At@R0)6D:uWS,'f5$,b5N(EHe&Qs66AhW?Wc,ItFbuQ-<FQu_NBeKXQp];J.^KhbY?`'VW!"l=;603Pq;IgU\]O*3Db;m`/%D_CU$/(p37LNnkD4"UPi'^%9m7b?3g']-CO7*YFdms<5rm`LO%lVfsiW`=hGGqMQ4%pGu7=6J`4p$`^\UGFgnX$f<EVP#WD5QAj_%=1]J;=M(\PMSQToR+m>&DDoK%HE?HR1/ucOB+s6l=H#"S";*g*8KJ`McQk0M$`c`tO!%nuPeLnaqO&oUiG3-f&0^]AmcSc&FCJSG%,J'0PI*CjX=5u]69f,Pl^7N_M<(]P<"MLD\Ea!UVNAt)3eQo/7&52a[D$>k$S?03sW)g_1Y4DqWdUk*;2"W&h\%_<]';ktRBcJ!7%UBebeS*mZ8[:DGCm&1Ua4P`ogL.\/Z`*)Ao2H]Cq%2*dSFBH%of0gN5#$$Je(bG8"4K\EYW&qR26h@&j5#U':NJ:PV!>2!DEGr*/%Cg1%@l#?Sebt(.`CkY#[96cOn%Q)?7APd<Ri;\`]ASG4qp>Wtc7J1gLb$cF`R8=su&;g_uqiuM+#nad;BgM4"UkYloTMUeN`7KY_%7YmtD$SeOF))Al_Xe6V1]0XLd`L^K"X/,Ep&M)&^Y+_cnJ(6*s>E%%uX4(?OGc0G!(^lJ^Fa!IP#Gh^W;T^alrdck3I6/7/W]UDf%8F\F/kCn,#VMb2^Z<>Sq:Q?;kZP-NGVX8e)s$<"`![t60Y&>QYZMCNa$IGDF+VuCHRXs1l.@:%Y:]AZ<lj)jqOjiW959$tL^,f<G%2gbBb5:*rHs+!XI2[1ol-9<qkL>QX7jJmdg(!C6M;$g7-lRqpUUhCGD,eW@[3o2)P\:cf'D3"$NO,JTt7X-C-4q?Q7W*,H09W@o:%Af?mNgb<I3"N+30kQ^oC>tTHJ&YFY6=9](nKo)S!',npG)68TMhh.G?5`:Fl6p8#5/C.Z*pCu5V4mj!2]m63*-5+B:0_>^S',EX$%+(GAX'O/aWJGZc.#BbUA>"KlnJBrQ8%gb(gO*Bj/T\!,M/lG+AKdiEsg+^f_/:;,GVl5FklU]RYA-jGKW>N?fC9'/jT';.0k<q.X%+$]1"IkHC-4K4]8jKu3L\f)o>5d-=J\Z7BOjOhsdO2YO26?d:-P>gpOo&XO@^L)RR"6U^_X4O_KVX.0b!d4Y:`+5ANbD1@'Mojd4%jggPlQO28;o0*H)bGc`cR*0foTUB3B3L6Zj0IL%<Qc/s7071'5MqPm/Ja6^DhT$]%3(7[ZnZ(M.JTGS<Z^"$e6nBqE+tS)FNs!Y7%\')q$\]2:<h%VDrSrs+8TL-A4RQ6YS4N\k4\ip*2^*saD@_f=5Ols>g.WVUt<,YdBi^Z.1;a7O(?7YWu:B9@2gsfUdJ0c31m5FPV%.HUKTo)HUsA?"#6r+`Vp7X%]M46"'.CS]+E</,]e?.tE]2g&Xg(+Eg`C'mJG57Z2:UCM7no!c<&Mmahn.jug/=p:=W2@.nN9qO$(%^s/\&a_,pdC?^[LgHbIe;R85V7ckF[\LmLe[FTBOXiB&&kFd[@nf7+\n,lm,nP6!c71&L!\P@/<&!%%RB=k/p.CYf$9V=^N8Emb`%c<U58):Ho'k1Q>u&WN#CpLjs#d0>K\+u5^&2%I(,eP"86a2;C+Z/N>??%#*c3)t$\N[(hK?`HtB\4ObpntsDBK:"r=k:)?RT1KnW%!=$5$cZG&9>C6`X&\ZHr/LOEtQ$DBP#1.p>#o&X%?SsW4Y'1qr-&Rq%K1gl0F-8>`Rb5]O3inl224928`.'56p?W^$fQGp>)8>R*%TWUWpoE`%)4f'SBShJFd3qF4fBVuK)9Lc)jW3%S[Z.mn(7D^D-dbbWUd=jGr&^V4%X\.Q$cY?s3=g2AUpK@HGrHr61N)XKo`O#9F%9dp#fS+3UDhd2QtH-heu]%TLLXu5-DKp(7glZ%u+OSTi3`]H:(dQea(K88J>Bs2/e;>BmpCCI3"#ubT/R1QQ8HEQmWlj4,1]`UCU%WlZR9LZ$nkStEQG&r04,obaK[:)Jq'Oq*pIBT"@n/WM@A$FJp:#tR#<N6?'l</(8/\&9ZrD<`VW*#5P<Q^Fj:I?#kOKPI"2Ml8dn%dm\(sf\s;5Cq<4sU"C\L$e)e/I,q3/IJ/"GpE(sNla<-Q<olfS^f@K+1*Dma#:[6RGX5h;;1#3G)?XO#O-,PdU0^I^`@$HS2cq()%,Z-77CGubZ\nETZ<Uo4F"I1t:rC+DI!lQ@Q6U$dp>udDZRhU\,-:$\=ZQ+#4rDo*Xj(0@)ogp9gVFlp2WQMR(eD8=+e-tH?3`h^U%gl@AUOVQ!MP*(s3@J1Q.K9]QZlqn1CL@'Y0]:C8V=_/DcL^Gp[KLU4lEM5ke9bJEVRV.3>Nl&39S9G<Xa*_Q?>,9JXSOU,-[#t`m%)$(G/3[Pkb9T2VTBaNBHUre_dVE@hlqhVcL=l"#W8qP]Fc^pn^h)Mfcb2A3a[7)uZ\XcLQ@9[W=Je7aoDEK")<*8T",C>$d=LDb]%U[pdZh`p:Ldu4+1.soN!Y?#":!eQp6'R0r6Ik^UR9XIbJ5&?)OIOM`\As&<\@#glbB<URsRUJ]K3)c;pYCl"!-:I;KSd;YG7c8-`%/oMIpQ.S?82182I\2L8ZO'0X0Bs"b`;$;g$NH/6<+/$`iq=$l,m%1Xq:.K=]0\NnT5ZWZNpKaJ2B)H$s:c\D'4:RMBW&L;PUbbq+%pMmWlbo%*Dq<bW]*IHK4K=qe(p:;dGUb,SRXVec$HW$q/7I89>rAY0j%qJNcePklCN3S8^nGIeN@qYo9OT!,O+sY5n=ZYll/Dac7%EE*<8mua_GWg;otMc-h"O>g+@LY/bF:2t_#O@gAR+U^f0gFYhGOj-?_$MS.A'_OrBR@s]dIocYNMW[$7Hn!,)]mhHT'=N-\o'88T%oo$'X#DHk5\aEcm^JtL!"SBWDA6sg]Af!M/kT-E9[8O<T;j[A@146eSVcA6+Wmu3X8#UM)&B]5#,3(WT0PI5>l..uRXQ$7[DJXAB%_Pof[T@7o@>"S.-0%_3$;[0c<BTM\ib6i:h:jAVc;ab!i7_f-e0ciB[`rf`n,Jmr8^=t3aoMOEji'*suHrK;99*dAmB$M-QFC?cj%f!AGNE<5]nW5EHnod&gRmjYB8A>n>&ij2'H3.gEB&amV$Y1JGK[BHG'34[>g+L`u`&YNa#Yg8K,@ml6q[9<X4Q8dl-gKd+a8olS)%$L-)_?)uVkO8<of5"/n!NtIicc&B:V8.;<LU?lcW!:L%3+.4#D:1\Dqff2HYVZ4g[id8,2+7FEh7]FM,aoiXs@20!.%#KF#KK(S=%B4:=qetl9bB;ujr+f90\\mh<M)*Yufja:G=!3cfXd3s\5f2VPfWH9TW]9RQ@WDpM2Rfi$t_69H\_X!u8O4igb2:6Y9W<?1p3Wm]7%njU3m;M38E6CIR,XWF<2p?@`X9-m1>r*`HH7"jUI6tH=j9H-hdHa:]_b(rAfM;1j@?TPHS"YlaVS.8o;2P&!a6s4=Q:jV"6@OpT]%ln<ELfM$E1k"IG=7G@"h38Qsd"*CX^@XKk440-nuq\4;tqZV.9^hQK^].`[%Q`\Q%/('JX4H%f6RM%#`!]t4D<,'712ITk`_h4=N%0LCkW2V]GUKa\Zd@O;PV8`Hc%GPZ#??Wf?ja"]Gtaej$FK"U)CHO_9ES:Hn=K!2BjTPJ83PPqgdp#9eoj&gI%U,&D*Vlob`5g#k&%+A'rjiZk^b=X2=(09#Og:3A4MYomo<3f&#R(#rS)'G/(E*g(Xk/fVidZ1kg36*j3B/nQ]]>9lLZZo'`d)6>9"el;=8^KK\p2l;pK%-qi=%ql;qcA.9WHFjc2[cM'caS"H"i[bsICDQ]7<kfQCf!3WE_`&JFb(Jk:L>)7KIh2,,V/?7.%/UK>3fgtrS)mAUpJbQFI&B6J8%U\^#J6')7sHDTNu]'jFI>X-qefh5W]dF/-Hl"e9EiMI<0nj%_55k&L-Wthql"%2\PQ!P=_YW6ZCURE\u9%>4gp='[lI"!o&ej'q8%Ui%r`#6uGDVG<*:n1p_^hTmUO?A4\)e*h\OUen[@g\T'X9EbAqm6s6s/WGl*Sd*\Q=Q+0qX.>CTC][br[s]'<^u!HRF$L9t/A;FD%jO,V"BjS;%*[W0['G:WikT.F;.o?L;YX'uLkjVGeBl^t\/b.,sgo\GN6E^l-LL"F1Cat\5/lI\*eJ'1ea?X%qJBkL.b`ESM-N>W*%5HJ%ii_9IG1Qo\OUg]\`B(XCY*,#%m]I(sdH'C)?!fOhpnE:FRZD[@OM7n;(&B[N]\^&,OYJB4RldQGU_ut-&7lG"!,FK=94HH8/%VC0k]##/Gj@,+/'I**ZoW_Z,SQHXe>j#+^21D&'f*A#Yb(E]Cp-p6DINd+YYMgH?bC2Bkn-#%^B\\R]TR32]=m4N!sI[rSnT(!e0%ZQmN5oUHcgXH0#4gMFr?//HEG'<VM\D?+>4)&FuM(M'2o?2/;]Y_[d3UHr'C?>.A'E:bHYVL0*(\)/]*jP+/]7pmT?9=Zu`=&ak:%.m5(jcUa-Q>*GM"0>;PQrlD390V0(,HF[S!HJ,=')d[p&11$t+_e[rS-WMf#!UmAEj[_8n0<g,2DuqbP^,'=UrZ(auFQ6e^NqJt:%#B7i4EtG:X7G))7h)AWTB(+r-M[GMW=Jc+&2:c8rY$30Ea";V9Q+/XCZ]H4r$3<\19PfNh5D4=4!XH6]3tHfKH?1a,eh;7)muSI#%J$^;OW/[7o6eik39BrRHDQr.LR*1:c.\tOI;c(le"#J"]n#ED"Je_Au2SWERN4>M7Amlut'23P=<mU$.Nf$lZ[]&%X1*g&igk"Dn%o>@XTaE<tVc7HoeI^6M,,8`L*HZc1;_npW#),>#P@q,NFK+!9\A@Cl&^/[SmDK#LK?qSH6fr^H\+*e2_f5MJbLj#+SY_9>5Rrtta%ciiH(E+kR-Mu@hmms4PafW4/(4[0%Tg%(A^Pn7dVRu]rKSnP=[^]CAC=c9^-TbG%+)g=gQ`ieY[Ea&.VCpiFZI9EQ[dGgd,+A!US%CrgK4d+%[]fQQ9S^eG0NS,5gL*a_VT#2QAl9lI*5V#Abg.!O?i<+`$-]I&F,h2b`2mH-^_S0>UeQS\\l'&2M^_m,uO%Ht*pVEZ06%-&f=+`7X$A=rO%FBN^pXb/J`Vdhrc05S6IJ18_._CI-gq&kkGPceVg8j2Ag(Z'crQkA4q[D*e)%$tl@sXJu=>83rTJBXMr6T'=H)%V(l<H\TmmLZhKQdrPB#RiH.D?qb8U8N&cr1qI@B&e_WJ7KWi;"`fg':fU-6=SE_D[J!T$tac&XurNj!.2UE1C67Z=&l,C;K#t$iP%!K\;4UK2c(3;[UX7e.%L+:?)DEN&UQ[6WYEFat*P:b0)Vp@,CY=[FaBB?a<(rda^YnpQ$dq51P0dfNI#STrJfL6ZFLP'Ac2kcO'a%L4j8d5$JB\'JUPb<l6r)V<@TrXnFhk-2.qV9TBIs:6cQ`/<eNU@h)4pL2m9a$KPj3,&I$+3.K*0].'r.R7Yp'>0GkIO94s@?Rp2T%l*/:M.[G,kkr.5,D@"/GcEKe1/:b\k.AH0%9.35N#2fVX71RUZ"kiTc,NbEPQ6sj?5*DT5rL(0J21[OEJgqR2]#>]LF>$.J].>FS%9RpOQNlbKP=M+d-D"YkQWC_iUZA$WYJjY33,*H1h4'WXmG!H_[6<tLS8RUcNc[CA?R&mDPY.60i(8Qmd7ZLR39@?7K?=Mnm8=iGt%pZS+V\r@f&=-1&@HPcH8Q!O2$*k:S(<1tMfG3%cA"n+eCa),!=!+%<F8"P7b2.Q9QVQ<^1>P:HZ^"=QlZH@^_hAQD9kt*eM0(q4n%At%&]QAiJRAd<k%d.^@&+Ih9M4B3Xb+_Y0aTIbRJ"eXV+YQk:"@H<cUi#f]*?N9aiRD(i$/j*^u8mfOtFFAtscIfN.eC8!3U,VlJ%#9Tg8He>f?b,m33o,&pf*5T:5lSh'PHmL=ul<c^pb@aL[DNac*,J+OA'?9Y4b8[4p*F(Xr/;+WpR9J>97?BB2?[.]D_)+ZcP$6bf%a;,?%Pl^3Wk8.CA;fA3oP)JLO^-D;XZi$C2pk*_O-66TF=C/2Eo/sok?/#toP&aZi)CIIJ3Oa@^T#e#W@g>8ejfA_c4%hA$Ba1HC%V4Pm1Y,Yp:+O,)8ZdH'Sp+)GYr\5C<0i>O&T"e<#/B4t'mo?i4<5Q6DS$$<"pNWfcPpo>5V-+/e*Rh<EGh9-8:[D$6r,P0aX<"jj%W:4RmKK%J"L@GiJDgmR5Q&V!6Q-)N[9W6W;mKg,J=;1SXU!q.Hq`V5j,t[;3>j\L+/&)6]^0r2C2;6.!XJGK^"Nbf;mNO1^I1dR=%g+8'q'bP*pELY8<TdWHb7o@col2;Y\7dR#sFL$[fh/G8_TCfE)0IQYgq+.m*Sl?Bt5%C-n;=sDT*dS:WYWU+H'j6>5Iqehac8]UK%fQT:/0g0_W^7if3]0["2LO+Ath?phOX[?3dR-X328M%YZqiE%;%g;)kGd,!oFP\=m*HiAHlM:#*[OR,B@&YHD<c7RYX^JHrLTO39%FN7VsQR$dMXji(g#)oIRN^4if0[aGd'38OsbcSa;qOYRVR86*8#U.em@A;P2<)j6dPtLa'(n?JapUq!]W&9MYC*FRRB,Ps"0P5Z6%.qYR2D8_sJ;&UB"92mH#4P>Dk)\(0X`m$3LFt3l8Y*82gAJ]PFXO:qSYun+/[U';FFT>s7?Zap,I7cf]c/GgbHQim>Q6M3M&Y7al%h8$a;fDNH/E^POi;o@forq08U7NiIKI6E%<Ojm=>V`XC*_[kpL=dASY2TZY(g0ZK?U\gu!>Qbpac49_Yn^fbTOe!NXF#D-(4AiLB%i%@=lC77.4$E'fqW7>:kM8#LFdgm[MW5pf%:K@2`B-.5I,SPFX'eAtq>f2p4Y'eI+eV,M4mitSt>c+AT?@-N\d#"rCSC&"Y^=%UZ%*]2A./ue@c<BM>Xp"FSH/.YhU.$&(3ap1YibW[3n(]-oF:%G=1d_TB"WsfX6\BN5MV+&Dlk3OYP3;N23!LU]cZ9\tBe9+3q+2YNI%JN,:.OR?lrXcMuGK:H<7C9TKk=FY4Fg(!7N*h0<U_ou.\-=b_FLbC2^n_4J;@<JUoe3n`?\PA(/4;/GDQZNERZMP]bNQ+=H;R;GV%K%h-m&$-\(YT/,HZ'>[Tfd!KlT&"&8DYt8UViP4m,<R1]/E$\i)dBE+ebq"Nq)_T'53,1ajh)>.p#$b]\ufNCHq@SoougBI6!8+a%:IU+jhO4$#e#_HfZ)S]1miJ;FK=dp:*p,(m*Vc8Xg7^]nS(tJ$::X8!F(=H<W?40@XES\rTJUt`Gb$q>n?p(iXX%KE.f2bRmkL.s%m8"_^#>a!G'`a$[lW's32?;lKjOL>=F!f"EEpr%rW8NFbP;^0m5GM/Uk`bpd]tD`@TRtO_=*O)T54t_ZNQCB//5VE*dU?&p'gAq"%>Kdp$htL-S:ra-0n&@c@&QM9PcaGfg1+b,W50=6GLGs)>.Oq[jbfHJ)g_J-BDR-*5D.#\c6\eGg;V?2:Kt-rha;T(%09#sPMYfrO%A;I$_DJe<XOFOm=J&aRtIT5F#>^i1T'9MbWeQM:")Y!rZ,KOWoB`%e)r!:u[Tmk@@alL2\CQ[G=K$>1\Qrhqb(N&-tWaE"mc\0KJ%*FXTsHKmU^ALaZEOB:^BO3#>t_mF\p1UXnrQ@Yq$I3g:1>sVWp'o<2TPgqFr7ra,4I,@9UI$QDmDD[mZ"i>#bCl8eTqc<g&V\$be%(>Xe<?O;>j4\L`&cBKF/A$l.><P4bsCQ8cTUXmGR(MCh19!dJ,&<m^cN@c(M`/a"JNL[5R>;:4Js58hum)P+scH+.&m*9JMED7MC%V7uN,0i91l-^,Y^gSiSPM^dRLU`#Xkp"[&p1-?.f<6A1Iq!YL:Zm6Tm6ssO%/.7!3RTT]S\`1&7UG9Or1%[EI3o*I)C@!.ORiArg%^600krU]t+f6_hHD;g@9P$6CPT6gKr,E2`To'=2;$#(['8,@i`W:X<(Vm7(M,^6pIUI`jt6NZ$$Mf@">=DB7MT@S&8-M"b=A@4ea%O.C8#IZ-3'&M\iZZA$^#%;jkJ''(cMoKV"jR_N\MbkRFh_2C[Q6p7QP>b--ejlnsNCOoNp[qp1J1S=*,lehg2J+]8RS[CMCpZ-n#%gr\n\*o_<`.(=`n*Ob0WOE=>prY2J_%U!I+LpqtR,JulO:T4pfOER,@E94#='LI&Mg7J"ae*K;0?9C=+R"S7`]$F*)'IgK2B*RST%18$E*m*[-Y?(-n"c"2V4'!O$[[fSQ<qW&IlHscfCc1hOeaEMn9ld,1V5[Sjm/Ls'h\eGe1EF\Na>5h*0`NL;"O%8r11EXKXXk7oY%[8p17AL6=k180^m7]gJJd5KkLJk_T`1/CO#m3HFf)1qKaCuo9]j1imXnuY*!9oKooqFthpFl^TPI+^X\j9]VJP8d4Z12$"r?ZK(K%UHJ=6aB+>uAB(Jf=YioI/W-D>^C9Z?.,Or&=VL[P`"q/3(gl_^Q6:B&Utp(#?7pP.*=GpdiX0oj1mM^C@6dJ,C!O@c3?C2hp@SA\%<?Y\,/;kXfogZ_JJTq?KB!b`]'nH>['g0nBN&/;0FP0[VaZ?:f>+YJ=GJJ6&dt>8k*OY(EK_O@Y/.Iu#!(s#qWsZFc#oO4k%.ajk%hW(*U_kPSe>t;BsQ@UD*a!d9>G(sALl0h_E5O/:5CM$_AFSLk!24WMkGGbVR.iYO2h0t[j%mV;T9g2JA4L7C^^"S5<mM7rEINjYN%7\p*-8:OCgIT9,d#c;'YP"I#6>[48A9(3ol>$RhCOshK!maW+-cfF+g0Ul!\\>X4g\eLp1"^Xis8ORL[?E([,"tkOrdrboka5>?<%+k-I66aqP@h[?k+[fc#f6#a*j8<m_]1e=#$f/_j[$m(cVF<4?$7KgD`onJfm=DW!qq^d\-lBpce0OhL.Idej-l@a$^'Z*;F<+EES%+shZ2,?t"[0Bmr1nX=E"ChIG,I3btkkeJ6*dQe:8-V<Ur/lDL'!6kd9XJ`ICS@`$ZN\*7<a-alDc[^%3rjT1aY=f:L:5;N@!=V4.%Vo(d!!HK6kW`,8&Pg-X7/NJXl2n+hLM4_L@T)+uj^e#O$jBE2H.I6O%/U'@;8Vmt7'?isWkoG+I1W^U_31jr/P.72'W4<..kXe&@%/=fodI7p7J^cFSTeqj,R00ntCR_\ZgE)]]fe$=*un!)hk-aP*,2*dr=`-&7n/-j,>fBDsF$pWB[5l&2Pqa<@W<J[iN+H)i&i#Yrb%fPiJ1UbQmU7?Z]7$&Nr5S0Ecu!i6bj!eF^X7a-.^OiX\a];PJ5r@l6ESFPE9,9WUoI<s]A0<O"VJO/HYLN"]nNNmb$\3.F@M?6F@%`te#$#-P%lnG[tPB#Q>h;FNe2p2=M#\)/XCjSmB;c93?Wk>iEL2N9<\nY&Ok6i,uG;7;X'=n=1490BS2W67pq1cE2VJYX3.jgFe*%ZL1!/(fAHe;Qfr#B;pCVj9sBj$'g'B.O1FK4sgO(QL9?Z3oZRKT@8@&m9-G>\?G8L"6Cl-r_WJl:hYRd4S"_iQ%b$T!!&mYGMT&@%0t3"qZX0%1D2ZMj<=g#KaKY]3G=X(3a_!aY\_C>`VAp963SqpePC;ap^n[EBpl&4pf6-`$ZaofCNC.;KSH8hri4H0qNkJC?p6\?W%7B^,%g%q<+Z@S+LG4>.V9Bac@\`Z*?n&;5.k=k?dXGm1N^_FFSYe2(O9#bo8Eq\o!r:&N4Bb,5S[db4!B-`N-)H01ZS1E#P=5X&u%Yk(a`%tS.RF(E1:>t<Z7W;TmrTn7d6cQ\mSW>7-[''![G/7C]9'mHaN]$MM"NrT^3]pPX/F/h`sQcCZXkBoJddjJ+JPS8AgiRc^1%OrCOddJSpk0:ck9^Pp*noY(:*-AE;^YnnJ`#EH]72:;Nj>!fLg^4Hr^pUJFRj6://3fO`n9i"m/XiFA3f$%h#'^U-lC+'UH`K$"c%(X;E<%J>'knK7+G^p;(fV4iQ7gfMPWcDdm1,r\W6"DI#c[)bK"&u$-+Bosb3LSub6k_>g^k&"D/<Aau`S7eE.*7!h9:qPsn$12?@%RtiFaE3?r"-j_=BndWPfjQ`_OH.IT)kYgpTcA3J,-0n"J8"@R`WBL9?A83WO`ls+gTnXLbLu1VqNi&)WGGk%g8d-V+3]V*^#!@D[%kuZTJcP26j?gm[>6I5kbk6;<u9gT#\>P.ZOi!c5rd%JV4"#lrhnCWZ:^7I<sI+8hB4(`k"]mK]<@:\qkiU\SC.;'@O$PC=`LsQ=3%Y5PqL7&(d<$uf@Gd^D]4H$FFn@o+-[3=MX6Ar/T$RWnL3&s6Bi'2D:73$Lsf9TcNm!1;&USqpK^Lhoi,B`(HdiM;$C5HEYcAT0u>%W:7LoK+N#X]k.HAP3Y#k/6GrY-mUCmAlR,K'dZCfZC0Lcmp^<XjtJB"4Juc0S5.VKpmq`cYOOnc"*uDi2C#DicTMh"8h">t/0(MS%blj0rTq\#UlPVbphV:t5Z+39Zk`=+VJ):5QL'ec\m`$U4_l'XCCHJ*J5pB@r=/,52mWGg@ZfY?Ogf5CN]L2ofN<q@qmNjr;/9_7h%hGRBW[>P!D-*`M##X'$e7?=+c*qE1"MWfbs2"28H^nuKY.mX6@`2]9`e["5@)2P_08LqU`P=B&;&<GEF<s^B<hW*##66)<AJruhV%*RuIt^10Q&pmH:S.mipodo(=LG$]!iM0T)dI(P;ca4C3aVRg`sCru:u/?lmtmZ&V^bNpenpaC/HL`Z3t8_T02hDuDLUS;>t@ga/o%PS1+c;tl(`K\nSKR2-8k-Y0"T7WKV?)H:u!A5gm*\FSXY1b!8?$K`RTK_)g'[A>Ll2b3<)-l]Y.6)p"8'ZGt!bABp>N>C!HNid@7%lt04iTE(!s9gi"BXPdbFM`Mp1aX`)q/bD2%,R`tkQ9NDn;]gL8Q0lkgL:"n@&t*B"&8rmI''<c/NYf(H@,Z&l?rbT;%U"gi-1D4!%VeC,NOhRKX*"m(F"UqTHP:jPO44Z\h<gb<@Fa,GM0/p+:T3mmn9;oud<<dZ0rV7d]7t-`[*XWKM/3)gmC;0-;\q&ST@juU&&lp:h%3hjBCLAR*i_Ye(!3gl,t4dL1,'LamN^7!@*Z\j2GDN#j#.MtEO/m"0mhk!f[%-s9RC+b`J8lph9k2"qRb^<7r?V:g"!6L$f<]U3L%GNkCp#`ZL`RetLiPJ?Ch[/%IeUl:,lnig9=AAk%3nc>E+ai1[n<3-Y*Lq=X9`YA%H]m0`&G,O-!Lr:Wtlq09VI7X.6W?>t06-G%g%\tbnq.M6.f3Xl_tF*<.\.abifk\>B^b>N[>Mi1nZe,`6'B4p38:i$aBjZjn4GMWul/97ft211T)OlbA?F57Hnh!t2TP$;(OHoWo$%Gd-B5FoDa06]c/u75I<dBFo1>-juj?'El(P8&ncuIg[BH'KU87`[CuF5#%,]BWt@P!gheDp\Bd"N%:0?*6BZkjhsk5)r!6^/T=@W%54DLVdJ@1X5QOW74&/4qoaFYp<aup]!,@SKWd5D`/?Pi"$j&n8&pHcF@C#r#??5P0piW=IS3-1H-V&6ihSLS3CJ(e)'SlI$D<!h*%E0Y"eZ&_!#5Hib8,4UqrBq[j5fi^D-OG*A3q/?jml0B=cH6<bu3V*-/_(eJW.kU\5/_\o@^Dr)<?&0*/T,CK5+#nkEdWFD-)?Nm&%%)eJO,)XOddF8fY"K-Hj1744UW8dJ9)i;>5Ll-:s5fOqO8c`L]lN,W)Mb1V&*J'XJLopOVRW8IRHPB;DG-*T5`+&l)"+k)6Z%O`_%bSqn*IS:!fON[uu!pEl,oNH@omZ-20-3'oT0'o7`#IQ^sgt7['R&LW<7G]G:9=2<(DIHR3"OT;h1srRg^>mchiiPmojRSUhV+T]+%XPMuW)]e5]RTVGY@^LOJS9\\piI=sRL6Zfa,H"#%IQ-tIT_aI]nbSY7#iAa=W+06N(_cP;3&3pBW,h1UnP)aka`G*bPdi6Qj#Thc%5+h??p;fSiX43//l]*f%cd+@'/`uV4jTj=P8RY[/73cH=9fr*-1%%#e27!ZZZWRT2<)I+J];6X2lZ6u5=dssmTTcSl(-g]Q7sM[a%o5sUC0,<^QR5!dWod0HV#SX[VR0f8A1\:*eQ]TJ4^BUh"\?F=p5h5tf;P0sieG@29K+"AJ;sLDKIJtSL3H8$32='))>r($-7Drb=%]^u"YH'kp.KAJlff*\ce<TS??0E!.4n;,`UQBGKHK].l@SR,+Y+<u>!ZQ-9GFa1cJeGNKi%2=T0Df6#a<6Ei/n\UF."%2UF"-ku)%2<0Ea+qJ3Q'APaRS3f4JX`A;(=JC*/Ldn.poS:cbKG+)rIeg+,ZdU'I<h^C>=R6X:73:0F\`\IQ7f6k]rCoqa&T32!Y=3n\Mr-NZ%f#A/P:SY"(>079)^6#')!#INpI?M.[DJ#X0k8r$@aL$iHBKBEhQ4h!S(*+EoGN0$+eljgR@_*(=QC0(qW;%&^@O7B,Ag@YfetKKd%%6="6,`YA=kK(`m<'a8sYJ5:]<^MLkiiLE20IRcpi[A)_W8;q>g\(O-Mk]UDocgKSHFBK"p/lpQK2RjY'mc3W.kDD;!r^rRPe&`r%/MaRLE.uo4_@QU1Ge:<#Nn@nl5GlN:r[n1RAiVmOEjPe$F3**sH3]f:":^f%fHDra%fZ.M\]oh!C2jY*muQ5T+e)X!:OtA%-XD]p%\M';Z0iMKl\U#5A8B!ZW95tq[5,\!]7<A8oFWZ<f^7Hs'b$&#cXBLnJ9<fHa.ER6DLQ3m&JDsIUr@+S^I9F+WC8YeMfO6Q;!"QRW%;TPG*,tGdl>iEt,6^q4B]uO+V19q'(d_H=",e^8<ma#Cd:;n7Ch4Y*`3WIldccSL$20f"360)0%h(sBpa_[Nk[4Pe$<*lW*qVf",%+^"`8L<jR/pilh'U^dX:="pNN?L;e@^R5)D?"YVXl,,I>F>uo!cmbZO+D!ZM.?*WT'bXFtWWaig_/\<7Z<dK8]q_WudD9/[8"\MB%r`<1NOoYrAS_CP$2c?>Kr;T(Z1#c^I%k+9W/qZ%(fIO2pEI$Oh!"X:DeTT&/2q+qpZ1-#9:6k`Ybh.'3nL^?+[65a[L3_4LE]'Jh%*bDN>*fCSeRbFVrAaPLmS>a+3MTnP0Q;IECjh=Zc=I!V4H\-pN1f)]?fIPX7T1^(i[l^kN,@NN^kM>enFHHTp2i2#AOACA\X0+eD%!:84.Yh)bt"Ou4O7Wae`0>6U0M\Tn''[F,l+f`Lp2)\mE11lfr?EX`L+!GT<qOk%Lrfg=q%H^[Y.%8Psge-9oo=Afer0No&P*E8_%#OQ$.Wr::q57>l]fN,<+!R9X:F_Uor>P6QN7)%*JnP&-7.`Ch?hf#.4IEe>u)U9>0%lfb"ZWqK>.ZVq:JjhBe<?n4J]p3(HW;CLO%rO_]rg5d.60B44u_]ZFao"A?C:C_8/>^Ip`*2WPT%`udB@QC26f^k6Jo@*h'jW)RG=<-rg?m1.VZ/9R9mpPF^)X.j$6N'%[`[o7H%qFf-[n6I')VSM?WR+c_,+q9+8[=Q]9TQ'-%jdk5Ja,?Cg2nq>Mdp>bCWF;hB_C]g'0[HoS/O3\Q=e,'nm%F"Z\l@VUUWCJ$N<OKb%r:Z=WH/CiFOZ4::LGWXTEKA*bPdMd@:LR+hA=FY^,M4@Ln<B$q+i4`Y-qW7E>4aLUg/FQVA+e\OA%,O62t#_R2hra0pFmsJgKI)N%;g^'L7<!OmG5pniOKedp);=hLV`@N0IuVSi@F+NWXu_b*Bg4hk-nX1"ddObKnVs2jkT@1pR8c?WS*W,9U2<>e\:foGAWLWhU4_si%i/1)<@5G3Dhc%6/g+6BYXrrHdC"/o2,J\5m_b-r'jC:F2hlT>:I]8\6En1:_@.E"ton5\Y.;"Sb3cP`8@;A+b-&$@Ic]AjQ&II`F%&L5ql:k-)PT=o1A,3G,KL9Jl+!u[ZEpG5f?l`a&4\W0I&R[ILZ'b=;o>h28i,'mf0mr\f-J(D<DW;-U$b3>:<+4hD+_Jm`.e\1b?%5/2$2qbbi1[F+A7fc0&W7'WqaE6%R2K30RC`9='6a*4=LfR%L[V%GoRQa6OdPn.ERo'N1DZ^drh!*`K^7c`4Vg.!8*TE+)>mnDKk%)KADY<#O%hqDBA^'j/cT<M,bf<C41qS\ZX9Rm=)O&:4b^pHg;!RsGG7=58jZ>Y$*;DCJ0X&iZqD&']F4m;F\V<kr[d:k.Ee91e^%%'^uDGB"Ylk2p6X(404Kjd3H56LY6/^&g(M^W%Id>%E0&>Q=[V1RnO=moV52UOcJCqLoV\d3#h'(A6N"^Rl]`c^6b+X7abhf]W^D*%-(r3n/TE=Y\YJm1%n1YRoe4^G:r]-&_%_ROXHgQpR2W.YVHCF20=p1<a?Xiu#oZ8W=KFDYN#el%4BbIlH2i^fJJ"u%Gu`.MWo:D9%Ijfj7ESkGdmhgm8s-he!S;?g6F;pG.@sPH.YI&9"$^JOi%#)^<`$j@M=1HAa;PbKnXfmi!gB)V,7u]f'!mCBfrpUQ%iGt1'(1e$H%V_>,]bYp8sH"G9:EWot><Kc:*V+D1?pe&[1#Yu-(D96^$AW$QmhHlCD)3OlS?PkRN%0kaE$Kgs"FO6`1m<sAgTfbEBEXmj^!JR#W%/mFT?#rk_fgTJ)h0c>+a_iZJIY:o!7Dl'r"N(u\o\\Cc.),3"J)OX0.[p=k5L-YL8[J`sWLhh&#DfMm(.dq#?[$)O;C+o7CXUGP<%=67-G'g1"&N<_/c,C;TGALeo$[rt;8YJ"nRh`R_'4:QbDa]YN-Ze%:ue15t1X))a].2&H/<V?$BiKN][?SO"],jbpF;oCjUimRG]%nl(ZE&VQrn7kZAM$DM/mBJ?"m1=k9.%mO:#9X@S8P3h"n6/mmWd^Gt=8?_OQD087U1[#C5#EFsg&KMOU.iHbr-HN^,_n6]o<8J4\%7gh];,4$AbDSCr?-V.!%@[e88ZdZ[]*pjk;Ik6WP"Fp"q9neP)XdDjf/$lWb;R*#7<9iYm7G6^H"F@o335ut,5QX??)-V#eRfU"D%gBb4cb_U9+LQVE^\P?:+&])n9Ljf[07-mI<4mMhCof\@Ns,CDGoN0L:mO66aZ<J%GR`FHRI(/t%kclbMZQ)o8\UIS1hPcXRj-]og%8qc7drN,F-7q<t#Y%4]nW#8`mZd<B3f3O:AFm`=-LZ49omCtRY)#l&X!j;M,R3,O5,R7NKMHXJ6"hJe)3VFmS#kP]enpXSI.[K&[%@^bX%B^_(X@XkmWbV8^mLQ,24f$XuHa(Z"pDB-&H$B;V5gqPM[(j[PT:%(R61:N:B6dE#@^Qc^?2ED#Rn.^sg?RS9WE_Aco>W'DT%?G0#:jOQL(:jOGp.2]D,>nG#P1r0[tr4HrkRrq^*-k%c6)PtaN<TT0k$-qPC!4?]K_.iWbJk!?KZc"jk,(IRgrSr%.fa'c1fe+i)%.jKe!R9P)uKo"c5$DSA.[g/,rCM.OZ^KKihbhQ-8+F6?[)Z</0('7uT^LF<6ocmjC'i)LAaksT!s/7*R:)XI-O@mn.UXJ[YYc.1=%XROpi"8PgY5Y$DNp'f>!T`0;+GUZ`j5>M:kNPC\mV=;_T?V]WrB$=r_"Ka%+!]>WkcF?0n5$&+XYR7O%"?^?@X;DiJD!BtZ8_%ES%$FcXG/HcMnQX2rme^_4DUM=bKr_F!PMV'f/-=iEW4!Uq"nYU%UX.hDQ9&Z-@@K@?D^kBS*?cdL.8Aofn]jkq036nQUb=Sh$cetU]%@a*.K"gP[=.Yh<\=K#@fa*LAH5Y_R\WG5`*5uZg#`\,T)c9ab;*KY`LQ3eE$T;jTd[uW*FbPIc]3dT:5(l@/U9&<cKJ6*UZ1M6$F%+)1r^a`t9$l\(ML7hq/D:ge^*2sVN(Q2/kS7Vit@m(,>F:)-g2$XI?(oY,l>6731T.(X0LHS,[9K8MXj5b:8h&%SN0<=lG!I?ccF%'jdo9cH)Dd-ZCq-fTkf%^Yc6IrXYBlX.:>=nYg?=-sFtR@oOuOMe"4Z^11C[6kT"(X0Y_;4H*BCE!97uot7uk$d;2p`=cPfAP;+2%;SS);l3a>*hUt1:N=ga(A8[>_!L%OD-ocj2:IHOUgO@"%_sWik5kCC*:]itU3*buWkZihQ=SoTInF2uF<ArDRRo[7apB]3=/a%.h%ndEC&+4YAY`8h?fI7CH=P^B\VR%6D;(q4AM35ERNa'$%ck94jFkga+I+bfX7*JF<\#15CT2"9hJUJb)Z'Kh*jGOQ'<lVj*;5MJ`D%!spc4YYU+_r>q<n_GYd[ZqEa7E5':KHUlGE(-aJQIQmoa:Zt\`]']Qs,-8uZIXS+=A7>2a$.Bc;XlI2.p=#RiYlH=kf*ji#K;W4t%m#Vg1=NBES7*T)[3b)p-U"u?TE&mD1mpBak.U$=S#/TUf"4PAiXBLE`fG2"g%nV_uAI4ocb(s"f%]a7J@O2S9g`LrB7MHOmo=s*Q%1nk*30?Ap4Lee=fI*`%EpU/ba^JZ8th_P\7_@>j`HaF2+#nP'8$&E3h<O:hETV9^K]&5@t2l$mTKCPr)jfAP/\2f,F:.TY]!XV_\%qY2Y&[p%k[[QJVdV>l0/I_gie4uo(spmF`u$046qq6B.rQP03q3;OOZO8YkM_Dh]]*TbHE;3pHdR!EO'Y:sWSY%N+52ZPkL_i4u;%JN^CZJQh^A@_j`S@VD37#i5U.H"8/hb#!oV4``kD!cF\lGfHir[?'`R.6<c$(!J-s&5r>nc.1Ch?]uQS(?`aj=faS`^QO_-GFb8I%)fD"!3J.DH9);I[2LpG(3qMi&=//l%qQ;4B*gjWEg.-N\=rm70,="m`dTlr,D,`teX9E``DEbY2$W<si0n3PZK6T9upK2`H+5U6b%!q*)h;ed626F#"+'J@?gnfL(NG#HKP]1<=dD\L\[/VIJ\H7V]?biq#7:]$/;]5XZR%URIj\V%N12aBt:h&iXO9Z>Y+d>Fb1\soMA%N#9*9/+R!pL;dcbW647'9fNnt#[i$W%.]M.dlNns,AkQT.U#g+,>O&I@CO>%D8/!7hgWEeZ3a9p.6]I?VOL7FkA`M@("5$L1)-o`%CF7*e,kKjC,'XD0R/C`f"\4TI\15M8#aXRf;di#cK&eth24t*8bT6bgMZ5BOErXE#KDYe%W?<W./fH_C1J7/A/_/8]C_B6JYDod1%A-?W6)H:UjW.M-L^@^#3W$F>8g'&^P?]o8LJO98C+XA::I6.W=U((O_:r6l+cj5bQM4"5>>8N\UGEj70b3eVFT3*gFU#X`-q1_d=%=W;g2C46D`B`-mOb@`KUK6p"Ro]mlLk0\+!fe**s)%eP'Xa#En5Nm.(I$YI$W6ND>0!de%)[uo1-f56@XsEZ);2Ff$Kc^r5X5Zgs%B;l"GM9(@8ga!m6mN+s*dm81CH5EiG?sAk&.-$>NC[5^,O%Oke8EQm\4RHeHh.2+<O4<EK%6r;;;fX(11M\3YPAP$89.-WX@uEV&%iZ*ZO7rE<OB]XVYT28,B?sIGZ8);qBCP@:Y&h%EEJ`:28'#s>`E$<<["+8Vtpc'M>Y>Me<1;N3oLCN62I9OqdR,#S+M?21lP?..T%?*gBJe[CEuZ#_?u04F@G,rhtS)+pf%Hj22STqdK5^k73^ljfY725V]/5_)9fV<)2G?-@g309A$ZBlEHoC_#BSI`6I_5A`\p'56@e%&`6NK\i020lH$<FHu2LOGhjp]f%8#1JoSH^Selebl<^PpRmi:G-O&LFV#$%$aY\[_d*,tY@"B`5rDG,s,p)6bCHA>T8FPe0?`g,^%%\4VHa7+d*==g'S\GDH:/t72UK<:qF0C4kc<Q@MuA7R5;#M_0?!&4-#=,0hQ(4S!O!/)"TV3Z#t9SA1D-D`JGfsuGM$ThQVTK,JJ%J+pABc&j]8HR^`24pji'[3Kc<9nf!]r'#\rS83_?H$$ls4AK"F(fqpXAP^>#;mqh[?Yu"Y.31^kQlAJtQsNg/=+qcI7Z<:5Ii!/N%R@)H:0uja==mSW)ULn4!+L.mBF$sm[OU8Iee(7M,V@KeS3\^7:&a+G+&H#PrePHq/E-TWo.%WkVgT=m^#MkH(UXi.j'_H8d7`6us%<10)1lBP9/,i`_(]-.*?r]H_S<k96uQZnE%Mit%<!Jo.5C&+l!*E1^p@o7oY.lXSNNd1D#!BI1#Z<ZT1;/BWU;mUVGR.b=+5+l=O%`Fb%I_s8^9($N`2A_Sb!;?=Q6qfq,"pNQj?&\Z4+F=kYeGOXnU928(hG;24`<=ZW"eT-ni=s^PW[n@Ocdg?k2TRc1DZ`KnX'T.*<%+=MX'*,f7dp!;QZD!1I,O.Fgq7W\:3p+]deB>_MOQ-nMO#>?^).hJ_m8CMp^@lW[X#al`,S[Olt00L8[0Xk=5oo:9Mi9R*^5a7s\%R@mbqIifQP;37%R@ZB/e=*0S1g?5fl_$Bkq4l-8\reAM/rU^M(G?X.lQ!TTQE2"2Q\?h_/I]8`e6j)uU8?4nGJR$q)WE\F\#rc*r%YFB<"l_7T.^Ns_4s.S@Z!4RCg)AkgJN)<??_um1PL=8AI20<DG[&u@[&@,ZHaC]gWDY@dU6C_bO=Q1"F8dnHo1-?Z:RqS\,KF.hb%p>bOVIZs2ds*"=1mY;'PPiURn1!F*&'Qp]>Z!n6*"#[%/8KJk;;mX#-D;gSQ:UhFmp3D0=,u#:rm4HP?#dqr\+IF[jT*Z<)&u/K1%X'5]IcD-7_8X`'uLVu]F5Ka3M6tuKAng?tg<jBbJ"SR)igE!KMB><CZIl^f/$qD+g59elN9UH+d.UhL4J<,llZ1OoQO2tq7Mph'`%iA[%U:XlL(-b<5e9R"Q"A%k"[F%=M/1(9cbe6)P:@9>qDSGcp3@VD8Y/$^7-dr6i@rSY>PXT#m)o8&#/C`!R1XJ0+&[[f,ipAOF=%M7"I[!c9RCMNjdCq%f;lm8XWZ[5FS`J#*rubgT5t5()?>J4VuJdU$c=rE!cFV'Art[#)=a)m;l``=A%DP*^-r*+Yq'j7fU%U_m$r%J%s<_-H%<@)KE?Op%b#XJsC)3?jH&T*PY\h.1p?NTojpkKKfWH+Rf`O"E*EE>*9)54>R_PO)+QMXlg%qAI8Zn'4Q*t)m9q?cl`U3%MDF(\88\_=aA-UH49+Smq$N8cVX[>TA+]nopqYZN'OQ'2:Eq<rWS`pW&M\<Eac[&+XG-c6XCE\).>8DU9srSVJ/4'lPIgNYU#TRK%:gphbL3W6ZeoAA%=A5DA6/bZ2:];[[pF8mZ%89HN9FoXO#XI_'(3<]TI6\\cW>1q!Q-e58Ph2g:_*Q)haIj;De*AhSQ*tZZ,!dBr%NY-]mhHU!7$n]^6X85p\I$r5Q3q?*V%(ZCO=p6.K/CIk>gPA24]<-1_'NF"PYS7M5qmOJ&b`n.E+OZOSk%O:4I1?f'd]RY*1!,FV%-:)cQ75YG8Vc7Uj;pm(Z<QWIf89\rqoZWU_oSEa'>&-B/4[H%bN#[:2bI(E$q-7/(q0EKRXclE$i`)\01,uR8_Hlq>G!jRZ:ID(\%o[e?s7^fts@m^od*]-m9kDU\$QAaDWZ&'Q"3H@MnCqKJSBYSGk=9h4l`F;8-3Jj=:Iml.ERM;>(:Q!EH:cb)\C\e4<G8+fqi[PmY%PU5`.S-UiGO]#=+"7fbSaYBWT](iA!hW+O-NLcs_BrR]ZKS(NI)e.JAf=hH>r$T<VWbNN3B]7N]SEV\;H:(H$QKB5Ge$(.9fro3%%Eh,/ic\u+S1DKFYcrp:B3)Wp]KWo%rNJa4uM(n>bE*9<hCIZ(rMi)i$)8)aP3.GaPYs5*-_*<nk)tFbYA@C9(N$*F4!$:XG@t_Q4%.i!/oSIoF8m$a,5!j?*)!AO(4;_&@fC:QD3"?EjCl)+/Cak1bGGU\[h/NpU*@Ql[V%NC<HIO6?7h.0Y9n)mWOc=1,I`-*!@c@+$[%%/c\h?5ao)n4EOlKt&SG%p%1/oS,b(AH(@AgLiuU&on$%o6KI8jZ^>r&oN$$8_t3(.u(O,g-,UOrH[gSZc:njOG4@<_%XOgV''Jd%62RK?%Gc-C+uV0N+RkmX5:Ji@Wl)A>DV,Z?\l8'`@=a?!W#7Z?G>_#gGKtC?#u"AH$<:P%Q=fG7V<sPXMO,)6H)6*4%u3:b@jt6:%:Hr>JVPdGTA=M""b'U-M%qqR:(5Q(-3,"*P_!=It/WouqH[s6o&^26`4)BJ;[$Z/F]:oR09T"2=oou<R!BCW&$Ltc0'ru*`^9k""%+idmAZSSF$-u[]Q0e?11o3SG#B.-'CKaOJ;l:lB2h2s-(DW\FIHt)+%c53oV?LX_Y929bY^+o:p9IJJ9'DF5Cgn;ET3%.:2-$Ue8%'IJ48s.3k;1n#+bj8^R<&i-q6\u:1;TorjkjU9W'?5>6@7ooUIlKC]Y4'CbC6aS\^H1&g=c`=.m!T)0Q2c!Bp^1V;T!"#j)CGc5.%DDV@qBtBu?s#OVg"2jp@UT\LP_!h'a3MkeiUcF,\^h^!%mLkF-M3Gbb,N9@4C/5@m=rr"=ACsnII6Chc$j<;!?F4le+;2cF:[Nc8%B$ipuZPc#Nll+oCYKH1"4#<BrIm]eBa:&I"K(_X,XqF7i$:j3@=1oQE0Cj*j-@8!C[WQh(Rso#6h5PN_mrjVkaP><E?3[dt;7\m:%6IOBqn88P5Mph"__t'=."Z@Lqe7n'N;6`B@e)=Q?-LKCI]k,W*J^d0EAlW2J:U%\43!]`IC2QDX8^XnWYbG-B,K,Nh%(ID8`8fiG%Z%1s2=MhA1)-,YUHJS+o<80\pn^Pu!l4H9:#KqaA(MJS*?'S^AdKH>XB&B<sNp-C7Ypj@@nFS_R-L(hLmZPQ.crsCLfr#oPM5a";%nD1$:\o+Gonn<^^&9(HlhQKP^HDp!CbYBMAhBV?/)8t0$448GN)D+1<_lS4t/iUN,)/+S^_WZDn.\;LZ.9NcSq^;i4bFTqc:*"@>%4q>eE>HY*(mQ%:;e6AnS',Zhf.7$^?p6DG8hA(p$OY["&_aS?TG"0./TGGoP,4M"jI7O@e!4G"]H6sABVr/knPXGn6$g3/-@.[Y5%4]qIUj)'rSb"o\2SG()hcRR=\Ydk$)4LKPd=3Qm$R_"7"m[@2i97\IL=HYh_c&c`3_#&+@J)F!MZ!IJe$!X"WQLOehA\NM*kA>L$%pafb/i[t"4B%Y`"aPKo4)55;OYE"44l7/-3m6-Kr*6ED^d9"h"3IbDJqdnmb>Qfs@I$mPDiu"K<`6]%IJAF2_!cNsME(&uLXAFK'%.4FPCQrWLI.8+.WX<a8d7g#BtPUF@53u?HM3P&_D+u`sqWtdrSC9^2tl%j&@/U?.2*PSVnR\G?J?Feih[_:$``MU\gFW7XG$e<&T%eG&!LMuR8:pY+'4#&[EsJ';(b!q,f'kU\FB39/D3"n`i\4?f@`V`C*?:[?433JH2dBnrYR+ceXYTQ''#dsbg6R1\2Ie/)?nI5XN"%[@R^]M40fm#Nb\:6n'@\bIsiHW#WHnTjC;raRX/fk+>;o&$knB1U?$[<Hjl"h,)th[T3:X";I7REJJMUY8WNBG9Y6E,saE5PIT2s%DN.\Q4ON;o@.OedqI:8m`9Yu&_e.80rJ6X,38uddb=)+%0ZEW*a"?A3=I2$V2RMPu`1uDipBYjqoa`=QBeGKY96[+1I,.HU?D2J@%?RLQ,9s)[3M+b--*qg9\79#)<fNHqiB*q:Z='/UL.p`6i0uB(2>\SM*?*$qkbf[]kpS)r3?@We4@nGuUA&hf2A%ESY>Q3>,#"t=&%C$WC0Al0H(#EV,f-*hJ=)ff"O;=M0-4b>_2<UZ'.*-bbb9f3Ml.QYG?H?m'BZf*^soFu_]Zmql6A%87kKDZ_.`CU1Y0_-/cV'fC#%&jCQ9d]*6q#'^r/LljLYW[2o_N;Q`DP6!c()'ajuMbb*=$X<RBVQ<e60CLnfBM.:`djGjpKai%RgQo.5D<k.!_CO@7#,V+.W/qS;%!_ER3G\0ULLW)&A4T15cDdgQ_mACJ)B*aXQ>[#!_9=s(Vm\dS%+U,tU`/EccN"h993IU,D7!ViI%Gi0u\nooQ28rI+V"Se.dS"n[%(;(1`8l%R*OO.k:?b4S%7l:io)EIC[(T:[eP/Qcce?,<@Pj2EErV1/*qHlEUilP,/]<\tjop`>JWT8c40ghUFbZnL$$b'?5DT<gO%$EAc,Uf;nfB5fV&h_H@$5/`sO5C`PU^N9GO5rRNuq]GUV=.XI15;4_hjHl53ikL!9LYr-oYQ+%*s5jj,qp3$'D9j5KebH'?Y6Gj)%5QC6qJ,YWrs24=*lEC6YF$BH8rQXfGf%oGZs7?i*J,V,$it&p%421Q(s7@B-'j1nDkO\Dls*4NWrVc!\qI;2=-9g5%TDmHWq(KM[%GQ6cSs4qVnn8EgJ)Z.954K-jjIGXn:s68u:q>^EF:ZM&MrqQ)7qHs7'&+RF7k3mfoqu70J+q:<RpMp/\Is/l;j.-.a5/hXHj"iXP%;p8PFK-0."T%m-Ae#,G,dm#qoia;`YJ,P3oo[!NiVa($Qs5c1hq7D.Vqqq>%J,e?n5Q0^$rT=.Th<3\noj@aD+'oK9DdWP8q(I6t%]>+6\hu*ItTE">orQYAaaQo#^nNZlFJ,Sj8c):R\\cHQ+~>%AI9_PrivateDataEnd